
PWM_Control_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000df8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f04  08000f04  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000f04  08000f04  00010f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000f08  08000f08  00010f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000000  08000f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000020  08000f2c  00020020  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000040  08000f2c  00020040  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  9 .debug_info   00003edc  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000aa2  00000000  00000000  00023f25  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000005e0  00000000  00000000  000249c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000558  00000000  00000000  00024fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001c49  00000000  00000000  00025500  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001a28  00000000  00000000  00027149  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  00028b71  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001898  00000000  00000000  00028bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002a488  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08000eec 	.word	0x08000eec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08000eec 	.word	0x08000eec

0800014c <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800014c:	b480      	push	{r7}
 800014e:	b087      	sub	sp, #28
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000156:	2300      	movs	r3, #0
 8000158:	617b      	str	r3, [r7, #20]
 800015a:	2300      	movs	r3, #0
 800015c:	613b      	str	r3, [r7, #16]
 800015e:	2300      	movs	r3, #0
 8000160:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000162:	2300      	movs	r3, #0
 8000164:	617b      	str	r3, [r7, #20]
 8000166:	e07e      	b.n	8000266 <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000168:	2201      	movs	r2, #1
 800016a:	697b      	ldr	r3, [r7, #20]
 800016c:	fa02 f303 	lsl.w	r3, r2, r3
 8000170:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000172:	683b      	ldr	r3, [r7, #0]
 8000174:	681a      	ldr	r2, [r3, #0]
 8000176:	693b      	ldr	r3, [r7, #16]
 8000178:	4013      	ands	r3, r2
 800017a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800017c:	68fa      	ldr	r2, [r7, #12]
 800017e:	693b      	ldr	r3, [r7, #16]
 8000180:	429a      	cmp	r2, r3
 8000182:	d16d      	bne.n	8000260 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	681a      	ldr	r2, [r3, #0]
 8000188:	697b      	ldr	r3, [r7, #20]
 800018a:	005b      	lsls	r3, r3, #1
 800018c:	2103      	movs	r1, #3
 800018e:	fa01 f303 	lsl.w	r3, r1, r3
 8000192:	43db      	mvns	r3, r3
 8000194:	401a      	ands	r2, r3
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	681a      	ldr	r2, [r3, #0]
 800019e:	683b      	ldr	r3, [r7, #0]
 80001a0:	791b      	ldrb	r3, [r3, #4]
 80001a2:	4619      	mov	r1, r3
 80001a4:	697b      	ldr	r3, [r7, #20]
 80001a6:	005b      	lsls	r3, r3, #1
 80001a8:	fa01 f303 	lsl.w	r3, r1, r3
 80001ac:	431a      	orrs	r2, r3
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80001b2:	683b      	ldr	r3, [r7, #0]
 80001b4:	791b      	ldrb	r3, [r3, #4]
 80001b6:	2b01      	cmp	r3, #1
 80001b8:	d003      	beq.n	80001c2 <GPIO_Init+0x76>
 80001ba:	683b      	ldr	r3, [r7, #0]
 80001bc:	791b      	ldrb	r3, [r3, #4]
 80001be:	2b02      	cmp	r3, #2
 80001c0:	d136      	bne.n	8000230 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	689a      	ldr	r2, [r3, #8]
 80001c6:	697b      	ldr	r3, [r7, #20]
 80001c8:	005b      	lsls	r3, r3, #1
 80001ca:	2103      	movs	r1, #3
 80001cc:	fa01 f303 	lsl.w	r3, r1, r3
 80001d0:	43db      	mvns	r3, r3
 80001d2:	401a      	ands	r2, r3
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	689a      	ldr	r2, [r3, #8]
 80001dc:	683b      	ldr	r3, [r7, #0]
 80001de:	795b      	ldrb	r3, [r3, #5]
 80001e0:	4619      	mov	r1, r3
 80001e2:	697b      	ldr	r3, [r7, #20]
 80001e4:	005b      	lsls	r3, r3, #1
 80001e6:	fa01 f303 	lsl.w	r3, r1, r3
 80001ea:	431a      	orrs	r2, r3
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	889b      	ldrh	r3, [r3, #4]
 80001f4:	b29a      	uxth	r2, r3
 80001f6:	697b      	ldr	r3, [r7, #20]
 80001f8:	b29b      	uxth	r3, r3
 80001fa:	2101      	movs	r1, #1
 80001fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000200:	b29b      	uxth	r3, r3
 8000202:	43db      	mvns	r3, r3
 8000204:	b29b      	uxth	r3, r3
 8000206:	4013      	ands	r3, r2
 8000208:	b29a      	uxth	r2, r3
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	889b      	ldrh	r3, [r3, #4]
 8000212:	b29b      	uxth	r3, r3
 8000214:	b21a      	sxth	r2, r3
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	799b      	ldrb	r3, [r3, #6]
 800021a:	4619      	mov	r1, r3
 800021c:	697b      	ldr	r3, [r7, #20]
 800021e:	b29b      	uxth	r3, r3
 8000220:	fa01 f303 	lsl.w	r3, r1, r3
 8000224:	b21b      	sxth	r3, r3
 8000226:	4313      	orrs	r3, r2
 8000228:	b21b      	sxth	r3, r3
 800022a:	b29a      	uxth	r2, r3
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	68da      	ldr	r2, [r3, #12]
 8000234:	697b      	ldr	r3, [r7, #20]
 8000236:	b29b      	uxth	r3, r3
 8000238:	005b      	lsls	r3, r3, #1
 800023a:	2103      	movs	r1, #3
 800023c:	fa01 f303 	lsl.w	r3, r1, r3
 8000240:	43db      	mvns	r3, r3
 8000242:	401a      	ands	r2, r3
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	68da      	ldr	r2, [r3, #12]
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	79db      	ldrb	r3, [r3, #7]
 8000250:	4619      	mov	r1, r3
 8000252:	697b      	ldr	r3, [r7, #20]
 8000254:	005b      	lsls	r3, r3, #1
 8000256:	fa01 f303 	lsl.w	r3, r1, r3
 800025a:	431a      	orrs	r2, r3
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000260:	697b      	ldr	r3, [r7, #20]
 8000262:	3301      	adds	r3, #1
 8000264:	617b      	str	r3, [r7, #20]
 8000266:	697b      	ldr	r3, [r7, #20]
 8000268:	2b0f      	cmp	r3, #15
 800026a:	f67f af7d 	bls.w	8000168 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800026e:	bf00      	nop
 8000270:	371c      	adds	r7, #28
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr

08000278 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000278:	b480      	push	{r7}
 800027a:	b085      	sub	sp, #20
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
 8000280:	460b      	mov	r3, r1
 8000282:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000284:	2300      	movs	r3, #0
 8000286:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	8a1b      	ldrh	r3, [r3, #16]
 800028c:	b29a      	uxth	r2, r3
 800028e:	887b      	ldrh	r3, [r7, #2]
 8000290:	4013      	ands	r3, r2
 8000292:	b29b      	uxth	r3, r3
 8000294:	2b00      	cmp	r3, #0
 8000296:	d002      	beq.n	800029e <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000298:	2301      	movs	r3, #1
 800029a:	73fb      	strb	r3, [r7, #15]
 800029c:	e001      	b.n	80002a2 <GPIO_ReadInputDataBit+0x2a>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800029e:	2300      	movs	r3, #0
 80002a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80002a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	3714      	adds	r7, #20
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bc80      	pop	{r7}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	460b      	mov	r3, r1
 80002ba:	807b      	strh	r3, [r7, #2]
 80002bc:	4613      	mov	r3, r2
 80002be:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80002c0:	2300      	movs	r3, #0
 80002c2:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80002c4:	2300      	movs	r3, #0
 80002c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80002c8:	787a      	ldrb	r2, [r7, #1]
 80002ca:	887b      	ldrh	r3, [r7, #2]
 80002cc:	f003 0307 	and.w	r3, r3, #7
 80002d0:	009b      	lsls	r3, r3, #2
 80002d2:	fa02 f303 	lsl.w	r3, r2, r3
 80002d6:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80002d8:	887b      	ldrh	r3, [r7, #2]
 80002da:	08db      	lsrs	r3, r3, #3
 80002dc:	b29b      	uxth	r3, r3
 80002de:	4618      	mov	r0, r3
 80002e0:	887b      	ldrh	r3, [r7, #2]
 80002e2:	08db      	lsrs	r3, r3, #3
 80002e4:	b29b      	uxth	r3, r3
 80002e6:	461a      	mov	r2, r3
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	3208      	adds	r2, #8
 80002ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80002f0:	887b      	ldrh	r3, [r7, #2]
 80002f2:	f003 0307 	and.w	r3, r3, #7
 80002f6:	009b      	lsls	r3, r3, #2
 80002f8:	210f      	movs	r1, #15
 80002fa:	fa01 f303 	lsl.w	r3, r1, r3
 80002fe:	43db      	mvns	r3, r3
 8000300:	ea02 0103 	and.w	r1, r2, r3
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	f100 0208 	add.w	r2, r0, #8
 800030a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800030e:	887b      	ldrh	r3, [r7, #2]
 8000310:	08db      	lsrs	r3, r3, #3
 8000312:	b29b      	uxth	r3, r3
 8000314:	461a      	mov	r2, r3
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	3208      	adds	r2, #8
 800031a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	4313      	orrs	r3, r2
 8000322:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000324:	887b      	ldrh	r3, [r7, #2]
 8000326:	08db      	lsrs	r3, r3, #3
 8000328:	b29b      	uxth	r3, r3
 800032a:	461a      	mov	r2, r3
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	3208      	adds	r2, #8
 8000330:	68b9      	ldr	r1, [r7, #8]
 8000332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000336:	bf00      	nop
 8000338:	3714      	adds	r7, #20
 800033a:	46bd      	mov	sp, r7
 800033c:	bc80      	pop	{r7}
 800033e:	4770      	bx	lr

08000340 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
 8000348:	460b      	mov	r3, r1
 800034a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800034c:	78fb      	ldrb	r3, [r7, #3]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d006      	beq.n	8000360 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000352:	4909      	ldr	r1, [pc, #36]	; (8000378 <RCC_AHBPeriphClockCmd+0x38>)
 8000354:	4b08      	ldr	r3, [pc, #32]	; (8000378 <RCC_AHBPeriphClockCmd+0x38>)
 8000356:	69da      	ldr	r2, [r3, #28]
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4313      	orrs	r3, r2
 800035c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 800035e:	e006      	b.n	800036e <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000360:	4905      	ldr	r1, [pc, #20]	; (8000378 <RCC_AHBPeriphClockCmd+0x38>)
 8000362:	4b05      	ldr	r3, [pc, #20]	; (8000378 <RCC_AHBPeriphClockCmd+0x38>)
 8000364:	69da      	ldr	r2, [r3, #28]
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	43db      	mvns	r3, r3
 800036a:	4013      	ands	r3, r2
 800036c:	61cb      	str	r3, [r1, #28]
  }
}
 800036e:	bf00      	nop
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr
 8000378:	40023800 	.word	0x40023800

0800037c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
 8000384:	460b      	mov	r3, r1
 8000386:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000388:	78fb      	ldrb	r3, [r7, #3]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d006      	beq.n	800039c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800038e:	4909      	ldr	r1, [pc, #36]	; (80003b4 <RCC_APB1PeriphClockCmd+0x38>)
 8000390:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <RCC_APB1PeriphClockCmd+0x38>)
 8000392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4313      	orrs	r3, r2
 8000398:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800039a:	e006      	b.n	80003aa <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800039c:	4905      	ldr	r1, [pc, #20]	; (80003b4 <RCC_APB1PeriphClockCmd+0x38>)
 800039e:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <RCC_APB1PeriphClockCmd+0x38>)
 80003a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	43db      	mvns	r3, r3
 80003a6:	4013      	ands	r3, r2
 80003a8:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 80003aa:	bf00      	nop
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr
 80003b4:	40023800 	.word	0x40023800

080003b8 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80003c2:	2300      	movs	r3, #0
 80003c4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	881b      	ldrh	r3, [r3, #0]
 80003ca:	81fb      	strh	r3, [r7, #14]

  if(((TIMx) == TIM2) || ((TIMx) == TIM3) || ((TIMx) == TIM4) || ((TIMx) == TIM5))
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80003d2:	d00b      	beq.n	80003ec <TIM_TimeBaseInit+0x34>
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a1c      	ldr	r2, [pc, #112]	; (8000448 <TIM_TimeBaseInit+0x90>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d007      	beq.n	80003ec <TIM_TimeBaseInit+0x34>
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4a1b      	ldr	r2, [pc, #108]	; (800044c <TIM_TimeBaseInit+0x94>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d003      	beq.n	80003ec <TIM_TimeBaseInit+0x34>
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a1a      	ldr	r2, [pc, #104]	; (8000450 <TIM_TimeBaseInit+0x98>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d108      	bne.n	80003fe <TIM_TimeBaseInit+0x46>
  {											
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80003ec:	89fb      	ldrh	r3, [r7, #14]
 80003ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80003f2:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	885a      	ldrh	r2, [r3, #2]
 80003f8:	89fb      	ldrh	r3, [r7, #14]
 80003fa:	4313      	orrs	r3, r2
 80003fc:	81fb      	strh	r3, [r7, #14]
  }
 
  if(((TIMx) != TIM6) && ((TIMx) != TIM7))
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a14      	ldr	r2, [pc, #80]	; (8000454 <TIM_TimeBaseInit+0x9c>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d00c      	beq.n	8000420 <TIM_TimeBaseInit+0x68>
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4a13      	ldr	r2, [pc, #76]	; (8000458 <TIM_TimeBaseInit+0xa0>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d008      	beq.n	8000420 <TIM_TimeBaseInit+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 800040e:	89fb      	ldrh	r3, [r7, #14]
 8000410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000414:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	891a      	ldrh	r2, [r3, #8]
 800041a:	89fb      	ldrh	r3, [r7, #14]
 800041c:	4313      	orrs	r3, r2
 800041e:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	89fa      	ldrh	r2, [r7, #14]
 8000424:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	685a      	ldr	r2, [r3, #4]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	881a      	ldrh	r2, [r3, #0]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	851a      	strh	r2, [r3, #40]	; 0x28
    
  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2201      	movs	r2, #1
 800043a:	829a      	strh	r2, [r3, #20]
}
 800043c:	bf00      	nop
 800043e:	3714      	adds	r7, #20
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	40000400 	.word	0x40000400
 800044c:	40000800 	.word	0x40000800
 8000450:	40000c00 	.word	0x40000c00
 8000454:	40001000 	.word	0x40001000
 8000458:	40001400 	.word	0x40001400

0800045c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	460b      	mov	r3, r1
 8000466:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000468:	78fb      	ldrb	r3, [r7, #3]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d008      	beq.n	8000480 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	881b      	ldrh	r3, [r3, #0]
 8000472:	b29b      	uxth	r3, r3
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	b29a      	uxth	r2, r3
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 800047e:	e007      	b.n	8000490 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	881b      	ldrh	r3, [r3, #0]
 8000484:	b29b      	uxth	r3, r3
 8000486:	f023 0301 	bic.w	r3, r3, #1
 800048a:	b29a      	uxth	r2, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	801a      	strh	r2, [r3, #0]
  }
}
 8000490:	bf00      	nop
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop

0800049c <TIM_OC1Init>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	81fb      	strh	r3, [r7, #14]
 80004aa:	2300      	movs	r3, #0
 80004ac:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	8c1b      	ldrh	r3, [r3, #32]
 80004b2:	b29b      	uxth	r3, r3
 80004b4:	f023 0301 	bic.w	r3, r3, #1
 80004b8:	b29a      	uxth	r2, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	8c1b      	ldrh	r3, [r3, #32]
 80004c2:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	8b1b      	ldrh	r3, [r3, #24]
 80004c8:	81fb      	strh	r3, [r7, #14]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 80004ca:	89fb      	ldrh	r3, [r7, #14]
 80004cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80004d0:	81fb      	strh	r3, [r7, #14]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 80004d2:	89fb      	ldrh	r3, [r7, #14]
 80004d4:	f023 0303 	bic.w	r3, r3, #3
 80004d8:	81fb      	strh	r3, [r7, #14]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	881a      	ldrh	r2, [r3, #0]
 80004de:	89fb      	ldrh	r3, [r7, #14]
 80004e0:	4313      	orrs	r3, r2
 80004e2:	81fb      	strh	r3, [r7, #14]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 80004e4:	89bb      	ldrh	r3, [r7, #12]
 80004e6:	f023 0302 	bic.w	r3, r3, #2
 80004ea:	81bb      	strh	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	891a      	ldrh	r2, [r3, #8]
 80004f0:	89bb      	ldrh	r3, [r7, #12]
 80004f2:	4313      	orrs	r3, r2
 80004f4:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	885a      	ldrh	r2, [r3, #2]
 80004fa:	89bb      	ldrh	r3, [r7, #12]
 80004fc:	4313      	orrs	r3, r2
 80004fe:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	685a      	ldr	r2, [r3, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	89fa      	ldrh	r2, [r7, #14]
 800050c:	831a      	strh	r2, [r3, #24]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	89ba      	ldrh	r2, [r7, #12]
 8000512:	841a      	strh	r2, [r3, #32]
}
 8000514:	bf00      	nop
 8000516:	3714      	adds	r7, #20
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <TIM_OC2Init>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	81fb      	strh	r3, [r7, #14]
 800052e:	2300      	movs	r3, #0
 8000530:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST2_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	8c1b      	ldrh	r3, [r3, #32]
 8000536:	b29b      	uxth	r3, r3
 8000538:	f023 0310 	bic.w	r3, r3, #16
 800053c:	b29a      	uxth	r2, r3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	8c1b      	ldrh	r3, [r3, #32]
 8000546:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	8b1b      	ldrh	r3, [r3, #24]
 800054c:	81fb      	strh	r3, [r7, #14]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
 800054e:	89fb      	ldrh	r3, [r7, #14]
 8000550:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000554:	81fb      	strh	r3, [r7, #14]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	881b      	ldrh	r3, [r3, #0]
 800055a:	021b      	lsls	r3, r3, #8
 800055c:	b29a      	uxth	r2, r3
 800055e:	89fb      	ldrh	r3, [r7, #14]
 8000560:	4313      	orrs	r3, r2
 8000562:	81fb      	strh	r3, [r7, #14]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 8000564:	89bb      	ldrh	r3, [r7, #12]
 8000566:	f023 0320 	bic.w	r3, r3, #32
 800056a:	81bb      	strh	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	891b      	ldrh	r3, [r3, #8]
 8000570:	011b      	lsls	r3, r3, #4
 8000572:	b29a      	uxth	r2, r3
 8000574:	89bb      	ldrh	r3, [r7, #12]
 8000576:	4313      	orrs	r3, r2
 8000578:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	885b      	ldrh	r3, [r3, #2]
 800057e:	011b      	lsls	r3, r3, #4
 8000580:	b29a      	uxth	r2, r3
 8000582:	89bb      	ldrh	r3, [r7, #12]
 8000584:	4313      	orrs	r3, r2
 8000586:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	685a      	ldr	r2, [r3, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	639a      	str	r2, [r3, #56]	; 0x38
    
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	89fa      	ldrh	r2, [r7, #14]
 8000594:	831a      	strh	r2, [r3, #24]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	89ba      	ldrh	r2, [r7, #12]
 800059a:	841a      	strh	r2, [r3, #32]
}
 800059c:	bf00      	nop
 800059e:	3714      	adds	r7, #20
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <TIM_OC3Init>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	81fb      	strh	r3, [r7, #14]
 80005b6:	2300      	movs	r3, #0
 80005b8:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	8c1b      	ldrh	r3, [r3, #32]
 80005be:	b29b      	uxth	r3, r3
 80005c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	8c1b      	ldrh	r3, [r3, #32]
 80005ce:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	8b9b      	ldrh	r3, [r3, #28]
 80005d4:	81fb      	strh	r3, [r7, #14]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 80005d6:	89fb      	ldrh	r3, [r7, #14]
 80005d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80005dc:	81fb      	strh	r3, [r7, #14]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	881a      	ldrh	r2, [r3, #0]
 80005e2:	89fb      	ldrh	r3, [r7, #14]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	81fb      	strh	r3, [r7, #14]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 80005e8:	89bb      	ldrh	r3, [r7, #12]
 80005ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80005ee:	81bb      	strh	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	891b      	ldrh	r3, [r3, #8]
 80005f4:	021b      	lsls	r3, r3, #8
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	89bb      	ldrh	r3, [r7, #12]
 80005fa:	4313      	orrs	r3, r2
 80005fc:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	885b      	ldrh	r3, [r3, #2]
 8000602:	021b      	lsls	r3, r3, #8
 8000604:	b29a      	uxth	r2, r3
 8000606:	89bb      	ldrh	r3, [r7, #12]
 8000608:	4313      	orrs	r3, r2
 800060a:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	685a      	ldr	r2, [r3, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	89fa      	ldrh	r2, [r7, #14]
 8000618:	839a      	strh	r2, [r3, #28]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	89ba      	ldrh	r2, [r7, #12]
 800061e:	841a      	strh	r2, [r3, #32]
}
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop

0800062c <TIM_OC4Init>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	81fb      	strh	r3, [r7, #14]
 800063a:	2300      	movs	r3, #0
 800063c:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	8c1b      	ldrh	r3, [r3, #32]
 8000642:	b29b      	uxth	r3, r3
 8000644:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000648:	b29a      	uxth	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	8c1b      	ldrh	r3, [r3, #32]
 8000652:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	8b9b      	ldrh	r3, [r3, #28]
 8000658:	81fb      	strh	r3, [r7, #14]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
 800065a:	89fb      	ldrh	r3, [r7, #14]
 800065c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000660:	81fb      	strh	r3, [r7, #14]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	021b      	lsls	r3, r3, #8
 8000668:	b29a      	uxth	r2, r3
 800066a:	89fb      	ldrh	r3, [r7, #14]
 800066c:	4313      	orrs	r3, r2
 800066e:	81fb      	strh	r3, [r7, #14]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8000670:	89bb      	ldrh	r3, [r7, #12]
 8000672:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000676:	81bb      	strh	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	891b      	ldrh	r3, [r3, #8]
 800067c:	031b      	lsls	r3, r3, #12
 800067e:	b29a      	uxth	r2, r3
 8000680:	89bb      	ldrh	r3, [r7, #12]
 8000682:	4313      	orrs	r3, r2
 8000684:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	885b      	ldrh	r3, [r3, #2]
 800068a:	031b      	lsls	r3, r3, #12
 800068c:	b29a      	uxth	r2, r3
 800068e:	89bb      	ldrh	r3, [r7, #12]
 8000690:	4313      	orrs	r3, r2
 8000692:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	685a      	ldr	r2, [r3, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	89fa      	ldrh	r2, [r7, #14]
 80006a0:	839a      	strh	r2, [r3, #28]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	89ba      	ldrh	r2, [r7, #12]
 80006a6:	841a      	strh	r2, [r3, #32]
}
 80006a8:	bf00      	nop
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable: Enable TIM output compare Preload
  *     @arg TIM_OCPreload_Disable: Disable TIM output compare Preload
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	460b      	mov	r3, r1
 80006be:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr1 = TIMx->CCMR1;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	8b1b      	ldrh	r3, [r3, #24]
 80006c8:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 80006ca:	89fb      	ldrh	r3, [r7, #14]
 80006cc:	f023 0308 	bic.w	r3, r3, #8
 80006d0:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80006d2:	89fa      	ldrh	r2, [r7, #14]
 80006d4:	887b      	ldrh	r3, [r7, #2]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	89fa      	ldrh	r2, [r7, #14]
 80006de:	831a      	strh	r2, [r3, #24]
}
 80006e0:	bf00      	nop
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <TIM_OC2PreloadConfig>:
  *     @arg TIM_OCPreload_Enable: Enable TIM output compare Preload
  *     @arg TIM_OCPreload_Disable: Disable TIM output compare Preload
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	460b      	mov	r3, r1
 80006f6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr1 = TIMx->CCMR1;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	8b1b      	ldrh	r3, [r3, #24]
 8000700:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 8000702:	89fb      	ldrh	r3, [r7, #14]
 8000704:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000708:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 800070a:	887b      	ldrh	r3, [r7, #2]
 800070c:	021b      	lsls	r3, r3, #8
 800070e:	b29a      	uxth	r2, r3
 8000710:	89fb      	ldrh	r3, [r7, #14]
 8000712:	4313      	orrs	r3, r2
 8000714:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	89fa      	ldrh	r2, [r7, #14]
 800071a:	831a      	strh	r2, [r3, #24]
}
 800071c:	bf00      	nop
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop

08000728 <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable: Enable TIM output compare Preload
  *     @arg TIM_OCPreload_Disable: Disable TIM output compare Preload
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	460b      	mov	r3, r1
 8000732:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr2 = TIMx->CCMR2;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	8b9b      	ldrh	r3, [r3, #28]
 800073c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 800073e:	89fb      	ldrh	r3, [r7, #14]
 8000740:	f023 0308 	bic.w	r3, r3, #8
 8000744:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8000746:	89fa      	ldrh	r2, [r7, #14]
 8000748:	887b      	ldrh	r3, [r7, #2]
 800074a:	4313      	orrs	r3, r2
 800074c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	89fa      	ldrh	r2, [r7, #14]
 8000752:	839a      	strh	r2, [r3, #28]
}
 8000754:	bf00      	nop
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop

08000760 <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable: Enable TIM output compare Preload
  *     @arg TIM_OCPreload_Disable: Disable TIM output compare Preload
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr2 = TIMx->CCMR2;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	8b9b      	ldrh	r3, [r3, #28]
 8000774:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 8000776:	89fb      	ldrh	r3, [r7, #14]
 8000778:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800077c:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 800077e:	887b      	ldrh	r3, [r7, #2]
 8000780:	021b      	lsls	r3, r3, #8
 8000782:	b29a      	uxth	r2, r3
 8000784:	89fb      	ldrh	r3, [r7, #14]
 8000786:	4313      	orrs	r3, r2
 8000788:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	89fa      	ldrh	r2, [r7, #14]
 800078e:	839a      	strh	r2, [r3, #28]
}
 8000790:	bf00      	nop
 8000792:	3714      	adds	r7, #20
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop

0800079c <delay_decrement>:
#include "stm32l1xx.h"

__IO static uint32_t time_ms = 0;

void delay_decrement (void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
	  if (time_ms > 0x00)
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <delay_decrement+0x20>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d004      	beq.n	80007b2 <delay_decrement+0x16>
	  {
		  time_ms--;
 80007a8:	4b04      	ldr	r3, [pc, #16]	; (80007bc <delay_decrement+0x20>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	3b01      	subs	r3, #1
 80007ae:	4a03      	ldr	r2, [pc, #12]	; (80007bc <delay_decrement+0x20>)
 80007b0:	6013      	str	r3, [r2, #0]
	  }
}
 80007b2:	bf00      	nop
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	2000003c 	.word	0x2000003c

080007c0 <delay_ms>:

void delay_ms(uint32_t t)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	time_ms = t;
 80007c8:	4a06      	ldr	r2, [pc, #24]	; (80007e4 <delay_ms+0x24>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6013      	str	r3, [r2, #0]
	while(time_ms > 0)
 80007ce:	bf00      	nop
 80007d0:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <delay_ms+0x24>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d1fb      	bne.n	80007d0 <delay_ms+0x10>
	{
		// decrement from hero to zero
	}
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	2000003c 	.word	0x2000003c

080007e8 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	6039      	str	r1, [r7, #0]
 80007f2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80007f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	da0b      	bge.n	8000814 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80007fc:	490d      	ldr	r1, [pc, #52]	; (8000834 <NVIC_SetPriority+0x4c>)
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	f003 030f 	and.w	r3, r3, #15
 8000804:	3b04      	subs	r3, #4
 8000806:	683a      	ldr	r2, [r7, #0]
 8000808:	b2d2      	uxtb	r2, r2
 800080a:	0112      	lsls	r2, r2, #4
 800080c:	b2d2      	uxtb	r2, r2
 800080e:	440b      	add	r3, r1
 8000810:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000812:	e009      	b.n	8000828 <NVIC_SetPriority+0x40>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000814:	4908      	ldr	r1, [pc, #32]	; (8000838 <NVIC_SetPriority+0x50>)
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	683a      	ldr	r2, [r7, #0]
 800081c:	b2d2      	uxtb	r2, r2
 800081e:	0112      	lsls	r2, r2, #4
 8000820:	b2d2      	uxtb	r2, r2
 8000822:	440b      	add	r3, r1
 8000824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	e000ed00 	.word	0xe000ed00
 8000838:	e000e100 	.word	0xe000e100

0800083c <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800084a:	d301      	bcc.n	8000850 <SysTick_Config+0x14>
 800084c:	2301      	movs	r3, #1
 800084e:	e011      	b.n	8000874 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000850:	4a0a      	ldr	r2, [pc, #40]	; (800087c <SysTick_Config+0x40>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000858:	3b01      	subs	r3, #1
 800085a:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 800085c:	210f      	movs	r1, #15
 800085e:	f04f 30ff 	mov.w	r0, #4294967295
 8000862:	f7ff ffc1 	bl	80007e8 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000866:	4b05      	ldr	r3, [pc, #20]	; (800087c <SysTick_Config+0x40>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086c:	4b03      	ldr	r3, [pc, #12]	; (800087c <SysTick_Config+0x40>)
 800086e:	2207      	movs	r2, #7
 8000870:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000872:	2300      	movs	r3, #0
}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	e000e010 	.word	0xe000e010

08000880 <main>:

/* Private define  */
#define Kalibruj //nie je potrebne pri Opto regulatororch od DJI

int main(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	SystemInit();
 8000884:	f000 f99c 	bl	8000bc0 <SystemInit>
	SystemCoreClockUpdate();
 8000888:	f000 f9ce 	bl	8000c28 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock /1000);
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <main+0x34>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a09      	ldr	r2, [pc, #36]	; (80008b8 <main+0x38>)
 8000892:	fba2 2303 	umull	r2, r3, r2, r3
 8000896:	099b      	lsrs	r3, r3, #6
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ffcf 	bl	800083c <SysTick_Config>

	GPIO_init();
 800089e:	f000 f871 	bl	8000984 <GPIO_init>
	Timer_init();
 80008a2:	f000 f80b 	bl	80008bc <Timer_init>
	PWM_init(0);
 80008a6:	2000      	movs	r0, #0
 80008a8:	f000 f828 	bl	80008fc <PWM_init>

	#ifdef Kalibruj
		BLDC_Regulator_calibration(); //kalibracia regulatora otacok
 80008ac:	f000 f8c6 	bl	8000a3c <BLDC_Regulator_calibration>
				i++;
			}
		}
		delay_ms(500);
		*/
	}
 80008b0:	e7fe      	b.n	80008b0 <main+0x30>
 80008b2:	bf00      	nop
 80008b4:	20000000 	.word	0x20000000
 80008b8:	10624dd3 	.word	0x10624dd3

080008bc <Timer_init>:
#include "stm32l1xx.h"
#include <stdio.h>
#include "delay.h"

void Timer_init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0

	TIM_TimeBaseInitTypeDef TIM_BaseStruct;
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80008c2:	2101      	movs	r1, #1
 80008c4:	2001      	movs	r0, #1
 80008c6:	f7ff fd59 	bl	800037c <RCC_APB1PeriphClockCmd>

	TIM_BaseStruct.TIM_Prescaler = 160;
 80008ca:	23a0      	movs	r3, #160	; 0xa0
 80008cc:	80bb      	strh	r3, [r7, #4]
	TIM_BaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
 80008ce:	2300      	movs	r3, #0
 80008d0:	80fb      	strh	r3, [r7, #6]
    TIM_BaseStruct.TIM_Period = 1999; // f[Hz] PWM bude 50hz, nastavenie periody casovaca
 80008d2:	f240 73cf 	movw	r3, #1999	; 0x7cf
 80008d6:	60bb      	str	r3, [r7, #8]
    TIM_BaseStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	81bb      	strh	r3, [r7, #12]

    TIM_TimeBaseInit(TIM2, &TIM_BaseStruct);
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	4619      	mov	r1, r3
 80008e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80008e4:	f7ff fd68 	bl	80003b8 <TIM_TimeBaseInit>
    TIM_Cmd(TIM2, ENABLE);
 80008e8:	2101      	movs	r1, #1
 80008ea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80008ee:	f7ff fdb5 	bl	800045c <TIM_Cmd>
}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop

080008fc <PWM_init>:

void PWM_init(uint8_t duty_cycle)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
	TIM_OCInitTypeDef TIM_OCStruct;
	uint16_t pulse_length = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	82fb      	strh	r3, [r7, #22]

    TIM_OCStruct.TIM_OCMode = TIM_OCMode_PWM2;
 800090a:	2370      	movs	r3, #112	; 0x70
 800090c:	813b      	strh	r3, [r7, #8]
    TIM_OCStruct.TIM_OutputState = TIM_OutputState_Enable;
 800090e:	2301      	movs	r3, #1
 8000910:	817b      	strh	r3, [r7, #10]
    TIM_OCStruct.TIM_OCPolarity = TIM_OCPolarity_Low;
 8000912:	2302      	movs	r3, #2
 8000914:	823b      	strh	r3, [r7, #16]
    TIM_OCStruct.TIM_Pulse = pulse_length;
 8000916:	8afb      	ldrh	r3, [r7, #22]
 8000918:	60fb      	str	r3, [r7, #12]
    TIM_OC1Init(TIM2, &TIM_OCStruct);
 800091a:	f107 0308 	add.w	r3, r7, #8
 800091e:	4619      	mov	r1, r3
 8000920:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000924:	f7ff fdba 	bl	800049c <TIM_OC1Init>
    TIM_OC1PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8000928:	2108      	movs	r1, #8
 800092a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800092e:	f7ff fec1 	bl	80006b4 <TIM_OC1PreloadConfig>
    TIM_OC2Init(TIM2, &TIM_OCStruct);
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	4619      	mov	r1, r3
 8000938:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800093c:	f7ff fdf0 	bl	8000520 <TIM_OC2Init>
    TIM_OC2PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8000940:	2108      	movs	r1, #8
 8000942:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000946:	f7ff fed1 	bl	80006ec <TIM_OC2PreloadConfig>
    TIM_OC3Init(TIM2, &TIM_OCStruct);
 800094a:	f107 0308 	add.w	r3, r7, #8
 800094e:	4619      	mov	r1, r3
 8000950:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000954:	f7ff fe28 	bl	80005a8 <TIM_OC3Init>
    TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8000958:	2108      	movs	r1, #8
 800095a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800095e:	f7ff fee3 	bl	8000728 <TIM_OC3PreloadConfig>
    TIM_OC4Init(TIM2, &TIM_OCStruct);
 8000962:	f107 0308 	add.w	r3, r7, #8
 8000966:	4619      	mov	r1, r3
 8000968:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800096c:	f7ff fe5e 	bl	800062c <TIM_OC4Init>
    TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8000970:	2108      	movs	r1, #8
 8000972:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000976:	f7ff fef3 	bl	8000760 <TIM_OC4PreloadConfig>
}
 800097a:	bf00      	nop
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop

08000984 <GPIO_init>:

void GPIO_init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct, GPIO_Button;

    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800098a:	2101      	movs	r1, #1
 800098c:	2001      	movs	r0, #1
 800098e:	f7ff fcd7 	bl	8000340 <RCC_AHBPeriphClockCmd>
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8000992:	2101      	movs	r1, #1
 8000994:	2002      	movs	r0, #2
 8000996:	f7ff fcd3 	bl	8000340 <RCC_AHBPeriphClockCmd>
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 800099a:	2101      	movs	r1, #1
 800099c:	2004      	movs	r0, #4
 800099e:	f7ff fccf 	bl	8000340 <RCC_AHBPeriphClockCmd>

	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 80009a2:	2303      	movs	r3, #3
 80009a4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80009a6:	2300      	movs	r3, #0
 80009a8:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	73fb      	strb	r3, [r7, #15]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 80009ae:	2302      	movs	r3, #2
 80009b0:	733b      	strb	r3, [r7, #12]
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_40MHz;
 80009b2:	2303      	movs	r3, #3
 80009b4:	737b      	strb	r3, [r7, #13]
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource0, GPIO_AF_TIM2);
 80009b6:	2201      	movs	r2, #1
 80009b8:	2100      	movs	r1, #0
 80009ba:	481d      	ldr	r0, [pc, #116]	; (8000a30 <GPIO_init+0xac>)
 80009bc:	f7ff fc78 	bl	80002b0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_TIM2);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2101      	movs	r1, #1
 80009c4:	481a      	ldr	r0, [pc, #104]	; (8000a30 <GPIO_init+0xac>)
 80009c6:	f7ff fc73 	bl	80002b0 <GPIO_PinAFConfig>
    GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	f107 0308 	add.w	r3, r7, #8
 80009ce:	4619      	mov	r1, r3
 80009d0:	4817      	ldr	r0, [pc, #92]	; (8000a30 <GPIO_init+0xac>)
 80009d2:	f7ff fbbb 	bl	800014c <GPIO_Init>

	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
 80009d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009da:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80009dc:	2300      	movs	r3, #0
 80009de:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	73fb      	strb	r3, [r7, #15]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 80009e4:	2302      	movs	r3, #2
 80009e6:	733b      	strb	r3, [r7, #12]
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_40MHz;
 80009e8:	2303      	movs	r3, #3
 80009ea:	737b      	strb	r3, [r7, #13]
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_TIM2);
 80009ec:	2201      	movs	r2, #1
 80009ee:	210a      	movs	r1, #10
 80009f0:	4810      	ldr	r0, [pc, #64]	; (8000a34 <GPIO_init+0xb0>)
 80009f2:	f7ff fc5d 	bl	80002b0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_TIM2);
 80009f6:	2201      	movs	r2, #1
 80009f8:	210b      	movs	r1, #11
 80009fa:	480e      	ldr	r0, [pc, #56]	; (8000a34 <GPIO_init+0xb0>)
 80009fc:	f7ff fc58 	bl	80002b0 <GPIO_PinAFConfig>
    GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	f107 0308 	add.w	r3, r7, #8
 8000a04:	4619      	mov	r1, r3
 8000a06:	480b      	ldr	r0, [pc, #44]	; (8000a34 <GPIO_init+0xb0>)
 8000a08:	f7ff fba0 	bl	800014c <GPIO_Init>

    GPIO_Button.GPIO_Pin = GPIO_Pin_13;
 8000a0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a10:	603b      	str	r3, [r7, #0]
    GPIO_Button.GPIO_OType = GPIO_OType_PP;
 8000a12:	2300      	movs	r3, #0
 8000a14:	71bb      	strb	r3, [r7, #6]
    GPIO_Button.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	71fb      	strb	r3, [r7, #7]
    GPIO_Button.GPIO_Mode = GPIO_Mode_IN;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	713b      	strb	r3, [r7, #4]
    GPIO_Init(GPIOC, &GPIO_Button);
 8000a1e:	463b      	mov	r3, r7
 8000a20:	4619      	mov	r1, r3
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <GPIO_init+0xb4>)
 8000a24:	f7ff fb92 	bl	800014c <GPIO_Init>
}
 8000a28:	bf00      	nop
 8000a2a:	3710      	adds	r7, #16
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40020000 	.word	0x40020000
 8000a34:	40020400 	.word	0x40020400
 8000a38:	40020800 	.word	0x40020800

08000a3c <BLDC_Regulator_calibration>:

void BLDC_Regulator_calibration(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
	uint8_t button = 0, buttonState = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	71fb      	strb	r3, [r7, #7]
 8000a46:	2300      	movs	r3, #0
 8000a48:	71bb      	strb	r3, [r7, #6]

	while(1)
	{
	  button = GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_13);
 8000a4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a4e:	482f      	ldr	r0, [pc, #188]	; (8000b0c <BLDC_Regulator_calibration+0xd0>)
 8000a50:	f7ff fc12 	bl	8000278 <GPIO_ReadInputDataBit>
 8000a54:	4603      	mov	r3, r0
 8000a56:	71fb      	strb	r3, [r7, #7]


	  if (button == 0)
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d1f5      	bne.n	8000a4a <BLDC_Regulator_calibration+0xe>
	  {
		  while (button == 0)
 8000a5e:	e006      	b.n	8000a6e <BLDC_Regulator_calibration+0x32>
		  {
			  button = GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_13);
 8000a60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a64:	4829      	ldr	r0, [pc, #164]	; (8000b0c <BLDC_Regulator_calibration+0xd0>)
 8000a66:	f7ff fc07 	bl	8000278 <GPIO_ReadInputDataBit>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
	  button = GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_13);


	  if (button == 0)
	  {
		  while (button == 0)
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d0f5      	beq.n	8000a60 <BLDC_Regulator_calibration+0x24>
		  {
			  button = GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_13);
		  }
		  if (buttonState == 0)
 8000a74:	79bb      	ldrb	r3, [r7, #6]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d102      	bne.n	8000a80 <BLDC_Regulator_calibration+0x44>
		  {
			  buttonState = 1;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	71bb      	strb	r3, [r7, #6]
 8000a7e:	e001      	b.n	8000a84 <BLDC_Regulator_calibration+0x48>
		  }
		  else
		  {
			  buttonState = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	71bb      	strb	r3, [r7, #6]
		  }

		  if (buttonState == 1)
 8000a84:	79bb      	ldrb	r3, [r7, #6]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d110      	bne.n	8000aac <BLDC_Regulator_calibration+0x70>
		  {

			  TIM2->CCR1 = 100;
 8000a8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a8e:	2264      	movs	r2, #100	; 0x64
 8000a90:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM2->CCR2 = 100;
 8000a92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a96:	2264      	movs	r2, #100	; 0x64
 8000a98:	639a      	str	r2, [r3, #56]	; 0x38
			  TIM2->CCR3 = 100;
 8000a9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a9e:	2264      	movs	r2, #100	; 0x64
 8000aa0:	63da      	str	r2, [r3, #60]	; 0x3c
			  TIM2->CCR4 = 100;
 8000aa2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aa6:	2264      	movs	r2, #100	; 0x64
 8000aa8:	641a      	str	r2, [r3, #64]	; 0x40
 8000aaa:	e7ce      	b.n	8000a4a <BLDC_Regulator_calibration+0xe>
		  }
		  else if (buttonState == 0)
 8000aac:	79bb      	ldrb	r3, [r7, #6]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d1cb      	bne.n	8000a4a <BLDC_Regulator_calibration+0xe>
		  {
			  TIM2->CCR1 = 195;
 8000ab2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ab6:	22c3      	movs	r2, #195	; 0xc3
 8000ab8:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM2->CCR2 = 195;
 8000aba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000abe:	22c3      	movs	r2, #195	; 0xc3
 8000ac0:	639a      	str	r2, [r3, #56]	; 0x38
			  TIM2->CCR3 = 195;
 8000ac2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ac6:	22c3      	movs	r2, #195	; 0xc3
 8000ac8:	63da      	str	r2, [r3, #60]	; 0x3c
			  TIM2->CCR4 = 195;
 8000aca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ace:	22c3      	movs	r2, #195	; 0xc3
 8000ad0:	641a      	str	r2, [r3, #64]	; 0x40
			  delay_ms(3000);
 8000ad2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ad6:	f7ff fe73 	bl	80007c0 <delay_ms>
			  TIM2->CCR1 = 100;
 8000ada:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ade:	2264      	movs	r2, #100	; 0x64
 8000ae0:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM2->CCR2 = 100;
 8000ae2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ae6:	2264      	movs	r2, #100	; 0x64
 8000ae8:	639a      	str	r2, [r3, #56]	; 0x38
			  TIM2->CCR3 = 100;
 8000aea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aee:	2264      	movs	r2, #100	; 0x64
 8000af0:	63da      	str	r2, [r3, #60]	; 0x3c
			  TIM2->CCR4 = 100;
 8000af2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000af6:	2264      	movs	r2, #100	; 0x64
 8000af8:	641a      	str	r2, [r3, #64]	; 0x40
			  delay_ms(3000);
 8000afa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000afe:	f7ff fe5f 	bl	80007c0 <delay_ms>
			  break;
 8000b02:	bf00      	nop
		  }
	  }
	}
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40020800 	.word	0x40020800

08000b10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b14:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b16:	e003      	b.n	8000b20 <LoopCopyDataInit>

08000b18 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 8000b1a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b1c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b1e:	3104      	adds	r1, #4

08000b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b20:	480b      	ldr	r0, [pc, #44]	; (8000b50 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 8000b24:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b26:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b28:	d3f6      	bcc.n	8000b18 <CopyDataInit>
  ldr r2, =_sbss
 8000b2a:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8000b2c:	e002      	b.n	8000b34 <LoopFillZerobss>

08000b2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b30:	f842 3b04 	str.w	r3, [r2], #4

08000b34 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <LoopFillZerobss+0x28>)
  cmp r2, r3
 8000b36:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b38:	d3f9      	bcc.n	8000b2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b3a:	f000 f841 	bl	8000bc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b3e:	f000 f9af 	bl	8000ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b42:	f7ff fe9d 	bl	8000880 <main>
  bx lr
 8000b46:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b48:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8000b4c:	08000f0c 	.word	0x08000f0c
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b54:	20000020 	.word	0x20000020
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8000b58:	20000020 	.word	0x20000020
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8000b5c:	20000040 	.word	0x20000040

08000b60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b60:	e7fe      	b.n	8000b60 <ADC1_IRQHandler>
	...

08000b64 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr

08000b70 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000b74:	e7fe      	b.n	8000b74 <HardFault_Handler+0x4>
 8000b76:	bf00      	nop

08000b78 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler+0x4>
 8000b7e:	bf00      	nop

08000b80 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000b84:	e7fe      	b.n	8000b84 <BusFault_Handler+0x4>
 8000b86:	bf00      	nop

08000b88 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000b8c:	e7fe      	b.n	8000b8c <UsageFault_Handler+0x4>
 8000b8e:	bf00      	nop

08000b90 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr

08000b9c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr

08000ba8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr

08000bb4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	delay_decrement();
 8000bb8:	f7ff fdf0 	bl	800079c <delay_decrement>
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000bc4:	4a15      	ldr	r2, [pc, #84]	; (8000c1c <SystemInit+0x5c>)
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <SystemInit+0x5c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bce:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000bd0:	4912      	ldr	r1, [pc, #72]	; (8000c1c <SystemInit+0x5c>)
 8000bd2:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <SystemInit+0x5c>)
 8000bd4:	689a      	ldr	r2, [r3, #8]
 8000bd6:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <SystemInit+0x60>)
 8000bd8:	4013      	ands	r3, r2
 8000bda:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000bdc:	4a0f      	ldr	r2, [pc, #60]	; (8000c1c <SystemInit+0x5c>)
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <SystemInit+0x5c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000be6:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000bea:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000bec:	4a0b      	ldr	r2, [pc, #44]	; (8000c1c <SystemInit+0x5c>)
 8000bee:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <SystemInit+0x5c>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bf6:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000bf8:	4a08      	ldr	r2, [pc, #32]	; (8000c1c <SystemInit+0x5c>)
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <SystemInit+0x5c>)
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000c02:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <SystemInit+0x5c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8000c0a:	f000 f8b9 	bl	8000d80 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000c0e:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <SystemInit+0x64>)
 8000c10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c14:	609a      	str	r2, [r3, #8]
#endif
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	88ffc00c 	.word	0x88ffc00c
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b087      	sub	sp, #28
 8000c2c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, msirange = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	2300      	movs	r3, #0
 8000c40:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000c42:	4b49      	ldr	r3, [pc, #292]	; (8000d68 <SystemCoreClockUpdate+0x140>)
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	f003 030c 	and.w	r3, r3, #12
 8000c4a:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	2b0c      	cmp	r3, #12
 8000c50:	d864      	bhi.n	8000d1c <SystemCoreClockUpdate+0xf4>
 8000c52:	a201      	add	r2, pc, #4	; (adr r2, 8000c58 <SystemCoreClockUpdate+0x30>)
 8000c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c58:	08000c8d 	.word	0x08000c8d
 8000c5c:	08000d1d 	.word	0x08000d1d
 8000c60:	08000d1d 	.word	0x08000d1d
 8000c64:	08000d1d 	.word	0x08000d1d
 8000c68:	08000cad 	.word	0x08000cad
 8000c6c:	08000d1d 	.word	0x08000d1d
 8000c70:	08000d1d 	.word	0x08000d1d
 8000c74:	08000d1d 	.word	0x08000d1d
 8000c78:	08000cb5 	.word	0x08000cb5
 8000c7c:	08000d1d 	.word	0x08000d1d
 8000c80:	08000d1d 	.word	0x08000d1d
 8000c84:	08000d1d 	.word	0x08000d1d
 8000c88:	08000cbd 	.word	0x08000cbd
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8000c8c:	4b36      	ldr	r3, [pc, #216]	; (8000d68 <SystemCoreClockUpdate+0x140>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000c94:	0b5b      	lsrs	r3, r3, #13
 8000c96:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b31      	ldr	r3, [pc, #196]	; (8000d6c <SystemCoreClockUpdate+0x144>)
 8000ca8:	601a      	str	r2, [r3, #0]
      break;
 8000caa:	e047      	b.n	8000d3c <SystemCoreClockUpdate+0x114>
    case 0x04:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000cac:	4b2f      	ldr	r3, [pc, #188]	; (8000d6c <SystemCoreClockUpdate+0x144>)
 8000cae:	4a30      	ldr	r2, [pc, #192]	; (8000d70 <SystemCoreClockUpdate+0x148>)
 8000cb0:	601a      	str	r2, [r3, #0]
      break;
 8000cb2:	e043      	b.n	8000d3c <SystemCoreClockUpdate+0x114>
    case 0x08:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000cb4:	4b2d      	ldr	r3, [pc, #180]	; (8000d6c <SystemCoreClockUpdate+0x144>)
 8000cb6:	4a2f      	ldr	r2, [pc, #188]	; (8000d74 <SystemCoreClockUpdate+0x14c>)
 8000cb8:	601a      	str	r2, [r3, #0]
      break;
 8000cba:	e03f      	b.n	8000d3c <SystemCoreClockUpdate+0x114>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000cbc:	4b2a      	ldr	r3, [pc, #168]	; (8000d68 <SystemCoreClockUpdate+0x140>)
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000cc4:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8000cc6:	4b28      	ldr	r3, [pc, #160]	; (8000d68 <SystemCoreClockUpdate+0x140>)
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000cce:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> 18)];
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	0c9b      	lsrs	r3, r3, #18
 8000cd4:	4a28      	ldr	r2, [pc, #160]	; (8000d78 <SystemCoreClockUpdate+0x150>)
 8000cd6:	5cd3      	ldrb	r3, [r2, r3]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> 22) + 1;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	0d9b      	lsrs	r3, r3, #22
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	60fb      	str	r3, [r7, #12]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000ce4:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <SystemCoreClockUpdate+0x140>)
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cec:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d109      	bne.n	8000d08 <SystemCoreClockUpdate+0xe0>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	4a1e      	ldr	r2, [pc, #120]	; (8000d70 <SystemCoreClockUpdate+0x148>)
 8000cf8:	fb02 f203 	mul.w	r2, r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d02:	4a1a      	ldr	r2, [pc, #104]	; (8000d6c <SystemCoreClockUpdate+0x144>)
 8000d04:	6013      	str	r3, [r2, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8000d06:	e019      	b.n	8000d3c <SystemCoreClockUpdate+0x114>
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	4a1a      	ldr	r2, [pc, #104]	; (8000d74 <SystemCoreClockUpdate+0x14c>)
 8000d0c:	fb02 f203 	mul.w	r2, r2, r3
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d16:	4a15      	ldr	r2, [pc, #84]	; (8000d6c <SystemCoreClockUpdate+0x144>)
 8000d18:	6013      	str	r3, [r2, #0]
      }
      break;
 8000d1a:	e00f      	b.n	8000d3c <SystemCoreClockUpdate+0x114>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <SystemCoreClockUpdate+0x140>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000d24:	0b5b      	lsrs	r3, r3, #13
 8000d26:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <SystemCoreClockUpdate+0x144>)
 8000d38:	601a      	str	r2, [r3, #0]
      break;
 8000d3a:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <SystemCoreClockUpdate+0x140>)
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d44:	091b      	lsrs	r3, r3, #4
 8000d46:	4a0d      	ldr	r2, [pc, #52]	; (8000d7c <SystemCoreClockUpdate+0x154>)
 8000d48:	5cd3      	ldrb	r3, [r2, r3]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000d4e:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <SystemCoreClockUpdate+0x144>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	fa22 f303 	lsr.w	r3, r2, r3
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <SystemCoreClockUpdate+0x144>)
 8000d5a:	6013      	str	r3, [r2, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	371c      	adds	r7, #28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	00f42400 	.word	0x00f42400
 8000d74:	007a1200 	.word	0x007a1200
 8000d78:	20000004 	.word	0x20000004
 8000d7c:	20000010 	.word	0x20000010

08000d80 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	607b      	str	r3, [r7, #4]
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000d8e:	4a41      	ldr	r2, [pc, #260]	; (8000e94 <SetSysClock+0x114>)
 8000d90:	4b40      	ldr	r3, [pc, #256]	; (8000e94 <SetSysClock+0x114>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d98:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000d9a:	4b3e      	ldr	r3, [pc, #248]	; (8000e94 <SetSysClock+0x114>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3301      	adds	r3, #1
 8000da8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d103      	bne.n	8000db8 <SetSysClock+0x38>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000db6:	d1f0      	bne.n	8000d9a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000db8:	4b36      	ldr	r3, [pc, #216]	; (8000e94 <SetSysClock+0x114>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d002      	beq.n	8000dca <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	e001      	b.n	8000dce <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d15a      	bne.n	8000e8a <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8000dd4:	4a30      	ldr	r2, [pc, #192]	; (8000e98 <SetSysClock+0x118>)
 8000dd6:	4b30      	ldr	r3, [pc, #192]	; (8000e98 <SetSysClock+0x118>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f043 0304 	orr.w	r3, r3, #4
 8000dde:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8000de0:	4a2d      	ldr	r2, [pc, #180]	; (8000e98 <SetSysClock+0x118>)
 8000de2:	4b2d      	ldr	r3, [pc, #180]	; (8000e98 <SetSysClock+0x118>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f043 0302 	orr.w	r3, r3, #2
 8000dea:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8000dec:	4a2a      	ldr	r2, [pc, #168]	; (8000e98 <SetSysClock+0x118>)
 8000dee:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <SetSysClock+0x118>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000df8:	4a26      	ldr	r2, [pc, #152]	; (8000e94 <SetSysClock+0x114>)
 8000dfa:	4b26      	ldr	r3, [pc, #152]	; (8000e94 <SetSysClock+0x114>)
 8000dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e02:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8000e04:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <SetSysClock+0x11c>)
 8000e06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e0a:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8000e0c:	bf00      	nop
 8000e0e:	4b23      	ldr	r3, [pc, #140]	; (8000e9c <SetSysClock+0x11c>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 0310 	and.w	r3, r3, #16
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d1f9      	bne.n	8000e0e <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000e1a:	4a1e      	ldr	r2, [pc, #120]	; (8000e94 <SetSysClock+0x114>)
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <SetSysClock+0x114>)
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000e22:	4a1c      	ldr	r2, [pc, #112]	; (8000e94 <SetSysClock+0x114>)
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <SetSysClock+0x114>)
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8000e2a:	4a1a      	ldr	r2, [pc, #104]	; (8000e94 <SetSysClock+0x114>)
 8000e2c:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <SetSysClock+0x114>)
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 8000e32:	4a18      	ldr	r2, [pc, #96]	; (8000e94 <SetSysClock+0x114>)
 8000e34:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <SetSysClock+0x114>)
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000e3c:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 8000e3e:	4a15      	ldr	r2, [pc, #84]	; (8000e94 <SetSysClock+0x114>)
 8000e40:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <SetSysClock+0x114>)
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8000e48:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000e4a:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <SetSysClock+0x114>)
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <SetSysClock+0x114>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e54:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000e56:	bf00      	nop
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <SetSysClock+0x114>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d0f9      	beq.n	8000e58 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000e64:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <SetSysClock+0x114>)
 8000e66:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <SetSysClock+0x114>)
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	f023 0303 	bic.w	r3, r3, #3
 8000e6e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8000e70:	4a08      	ldr	r2, [pc, #32]	; (8000e94 <SetSysClock+0x114>)
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <SetSysClock+0x114>)
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	f043 0303 	orr.w	r3, r3, #3
 8000e7a:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8000e7c:	bf00      	nop
 8000e7e:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <SetSysClock+0x114>)
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f003 030c 	and.w	r3, r3, #12
 8000e86:	2b0c      	cmp	r3, #12
 8000e88:	d1f9      	bne.n	8000e7e <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40023c00 	.word	0x40023c00
 8000e9c:	40007000 	.word	0x40007000

08000ea0 <__libc_init_array>:
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <__libc_init_array+0x3c>)
 8000ea2:	b570      	push	{r4, r5, r6, lr}
 8000ea4:	461e      	mov	r6, r3
 8000ea6:	4c0e      	ldr	r4, [pc, #56]	; (8000ee0 <__libc_init_array+0x40>)
 8000ea8:	2500      	movs	r5, #0
 8000eaa:	1ae4      	subs	r4, r4, r3
 8000eac:	10a4      	asrs	r4, r4, #2
 8000eae:	42a5      	cmp	r5, r4
 8000eb0:	d004      	beq.n	8000ebc <__libc_init_array+0x1c>
 8000eb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000eb6:	4798      	blx	r3
 8000eb8:	3501      	adds	r5, #1
 8000eba:	e7f8      	b.n	8000eae <__libc_init_array+0xe>
 8000ebc:	f000 f816 	bl	8000eec <_init>
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <__libc_init_array+0x44>)
 8000ec2:	4c09      	ldr	r4, [pc, #36]	; (8000ee8 <__libc_init_array+0x48>)
 8000ec4:	461e      	mov	r6, r3
 8000ec6:	1ae4      	subs	r4, r4, r3
 8000ec8:	10a4      	asrs	r4, r4, #2
 8000eca:	2500      	movs	r5, #0
 8000ecc:	42a5      	cmp	r5, r4
 8000ece:	d004      	beq.n	8000eda <__libc_init_array+0x3a>
 8000ed0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ed4:	4798      	blx	r3
 8000ed6:	3501      	adds	r5, #1
 8000ed8:	e7f8      	b.n	8000ecc <__libc_init_array+0x2c>
 8000eda:	bd70      	pop	{r4, r5, r6, pc}
 8000edc:	08000f04 	.word	0x08000f04
 8000ee0:	08000f04 	.word	0x08000f04
 8000ee4:	08000f04 	.word	0x08000f04
 8000ee8:	08000f08 	.word	0x08000f08

08000eec <_init>:
 8000eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eee:	bf00      	nop
 8000ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ef2:	bc08      	pop	{r3}
 8000ef4:	469e      	mov	lr, r3
 8000ef6:	4770      	bx	lr

08000ef8 <_fini>:
 8000ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000efa:	bf00      	nop
 8000efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000efe:	bc08      	pop	{r3}
 8000f00:	469e      	mov	lr, r3
 8000f02:	4770      	bx	lr
