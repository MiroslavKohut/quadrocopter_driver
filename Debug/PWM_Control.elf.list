
PWM_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c10  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d1c  08000d1c  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000d1c  08000d1c  00010d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000d20  08000d20  00010d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000003c  20000000  08000d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  2000003c  08000d60  0002003c  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20000060  08000d60  00020060  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00004110  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000aa2  00000000  00000000  00024175  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000005e0  00000000  00000000  00024c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000558  00000000  00000000  000251f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001c42  00000000  00000000  00025750  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001a21  00000000  00000000  00027392  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  00028db3  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001898  00000000  00000000  00028e34  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002a6cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	08000d04 	.word	0x08000d04

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	08000d04 	.word	0x08000d04

0800014c <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800014c:	b480      	push	{r7}
 800014e:	b087      	sub	sp, #28
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000156:	2300      	movs	r3, #0
 8000158:	617b      	str	r3, [r7, #20]
 800015a:	2300      	movs	r3, #0
 800015c:	613b      	str	r3, [r7, #16]
 800015e:	2300      	movs	r3, #0
 8000160:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000162:	2300      	movs	r3, #0
 8000164:	617b      	str	r3, [r7, #20]
 8000166:	e07e      	b.n	8000266 <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000168:	2201      	movs	r2, #1
 800016a:	697b      	ldr	r3, [r7, #20]
 800016c:	fa02 f303 	lsl.w	r3, r2, r3
 8000170:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000172:	683b      	ldr	r3, [r7, #0]
 8000174:	681a      	ldr	r2, [r3, #0]
 8000176:	693b      	ldr	r3, [r7, #16]
 8000178:	4013      	ands	r3, r2
 800017a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800017c:	68fa      	ldr	r2, [r7, #12]
 800017e:	693b      	ldr	r3, [r7, #16]
 8000180:	429a      	cmp	r2, r3
 8000182:	d16d      	bne.n	8000260 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	681a      	ldr	r2, [r3, #0]
 8000188:	697b      	ldr	r3, [r7, #20]
 800018a:	005b      	lsls	r3, r3, #1
 800018c:	2103      	movs	r1, #3
 800018e:	fa01 f303 	lsl.w	r3, r1, r3
 8000192:	43db      	mvns	r3, r3
 8000194:	401a      	ands	r2, r3
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	681a      	ldr	r2, [r3, #0]
 800019e:	683b      	ldr	r3, [r7, #0]
 80001a0:	791b      	ldrb	r3, [r3, #4]
 80001a2:	4619      	mov	r1, r3
 80001a4:	697b      	ldr	r3, [r7, #20]
 80001a6:	005b      	lsls	r3, r3, #1
 80001a8:	fa01 f303 	lsl.w	r3, r1, r3
 80001ac:	431a      	orrs	r2, r3
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80001b2:	683b      	ldr	r3, [r7, #0]
 80001b4:	791b      	ldrb	r3, [r3, #4]
 80001b6:	2b01      	cmp	r3, #1
 80001b8:	d003      	beq.n	80001c2 <GPIO_Init+0x76>
 80001ba:	683b      	ldr	r3, [r7, #0]
 80001bc:	791b      	ldrb	r3, [r3, #4]
 80001be:	2b02      	cmp	r3, #2
 80001c0:	d136      	bne.n	8000230 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	689a      	ldr	r2, [r3, #8]
 80001c6:	697b      	ldr	r3, [r7, #20]
 80001c8:	005b      	lsls	r3, r3, #1
 80001ca:	2103      	movs	r1, #3
 80001cc:	fa01 f303 	lsl.w	r3, r1, r3
 80001d0:	43db      	mvns	r3, r3
 80001d2:	401a      	ands	r2, r3
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	689a      	ldr	r2, [r3, #8]
 80001dc:	683b      	ldr	r3, [r7, #0]
 80001de:	795b      	ldrb	r3, [r3, #5]
 80001e0:	4619      	mov	r1, r3
 80001e2:	697b      	ldr	r3, [r7, #20]
 80001e4:	005b      	lsls	r3, r3, #1
 80001e6:	fa01 f303 	lsl.w	r3, r1, r3
 80001ea:	431a      	orrs	r2, r3
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	889b      	ldrh	r3, [r3, #4]
 80001f4:	b29a      	uxth	r2, r3
 80001f6:	697b      	ldr	r3, [r7, #20]
 80001f8:	b29b      	uxth	r3, r3
 80001fa:	2101      	movs	r1, #1
 80001fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000200:	b29b      	uxth	r3, r3
 8000202:	43db      	mvns	r3, r3
 8000204:	b29b      	uxth	r3, r3
 8000206:	4013      	ands	r3, r2
 8000208:	b29a      	uxth	r2, r3
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	889b      	ldrh	r3, [r3, #4]
 8000212:	b29b      	uxth	r3, r3
 8000214:	b21a      	sxth	r2, r3
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	799b      	ldrb	r3, [r3, #6]
 800021a:	4619      	mov	r1, r3
 800021c:	697b      	ldr	r3, [r7, #20]
 800021e:	b29b      	uxth	r3, r3
 8000220:	fa01 f303 	lsl.w	r3, r1, r3
 8000224:	b21b      	sxth	r3, r3
 8000226:	4313      	orrs	r3, r2
 8000228:	b21b      	sxth	r3, r3
 800022a:	b29a      	uxth	r2, r3
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	68da      	ldr	r2, [r3, #12]
 8000234:	697b      	ldr	r3, [r7, #20]
 8000236:	b29b      	uxth	r3, r3
 8000238:	005b      	lsls	r3, r3, #1
 800023a:	2103      	movs	r1, #3
 800023c:	fa01 f303 	lsl.w	r3, r1, r3
 8000240:	43db      	mvns	r3, r3
 8000242:	401a      	ands	r2, r3
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	68da      	ldr	r2, [r3, #12]
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	79db      	ldrb	r3, [r3, #7]
 8000250:	4619      	mov	r1, r3
 8000252:	697b      	ldr	r3, [r7, #20]
 8000254:	005b      	lsls	r3, r3, #1
 8000256:	fa01 f303 	lsl.w	r3, r1, r3
 800025a:	431a      	orrs	r2, r3
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000260:	697b      	ldr	r3, [r7, #20]
 8000262:	3301      	adds	r3, #1
 8000264:	617b      	str	r3, [r7, #20]
 8000266:	697b      	ldr	r3, [r7, #20]
 8000268:	2b0f      	cmp	r3, #15
 800026a:	f67f af7d 	bls.w	8000168 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800026e:	bf00      	nop
 8000270:	371c      	adds	r7, #28
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr

08000278 <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000278:	b480      	push	{r7}
 800027a:	b085      	sub	sp, #20
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
 8000280:	460b      	mov	r3, r1
 8000282:	807b      	strh	r3, [r7, #2]
 8000284:	4613      	mov	r3, r2
 8000286:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800028c:	2300      	movs	r3, #0
 800028e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000290:	787a      	ldrb	r2, [r7, #1]
 8000292:	887b      	ldrh	r3, [r7, #2]
 8000294:	f003 0307 	and.w	r3, r3, #7
 8000298:	009b      	lsls	r3, r3, #2
 800029a:	fa02 f303 	lsl.w	r3, r2, r3
 800029e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80002a0:	887b      	ldrh	r3, [r7, #2]
 80002a2:	08db      	lsrs	r3, r3, #3
 80002a4:	b29b      	uxth	r3, r3
 80002a6:	4618      	mov	r0, r3
 80002a8:	887b      	ldrh	r3, [r7, #2]
 80002aa:	08db      	lsrs	r3, r3, #3
 80002ac:	b29b      	uxth	r3, r3
 80002ae:	461a      	mov	r2, r3
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	3208      	adds	r2, #8
 80002b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80002b8:	887b      	ldrh	r3, [r7, #2]
 80002ba:	f003 0307 	and.w	r3, r3, #7
 80002be:	009b      	lsls	r3, r3, #2
 80002c0:	210f      	movs	r1, #15
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	43db      	mvns	r3, r3
 80002c8:	ea02 0103 	and.w	r1, r2, r3
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f100 0208 	add.w	r2, r0, #8
 80002d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80002d6:	887b      	ldrh	r3, [r7, #2]
 80002d8:	08db      	lsrs	r3, r3, #3
 80002da:	b29b      	uxth	r3, r3
 80002dc:	461a      	mov	r2, r3
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	3208      	adds	r2, #8
 80002e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	4313      	orrs	r3, r2
 80002ea:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80002ec:	887b      	ldrh	r3, [r7, #2]
 80002ee:	08db      	lsrs	r3, r3, #3
 80002f0:	b29b      	uxth	r3, r3
 80002f2:	461a      	mov	r2, r3
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	3208      	adds	r2, #8
 80002f8:	68b9      	ldr	r1, [r7, #8]
 80002fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80002fe:	bf00      	nop
 8000300:	3714      	adds	r7, #20
 8000302:	46bd      	mov	sp, r7
 8000304:	bc80      	pop	{r7}
 8000306:	4770      	bx	lr

08000308 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000308:	b480      	push	{r7}
 800030a:	b089      	sub	sp, #36	; 0x24
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, presc = 0, msirange = 0;
 8000310:	2300      	movs	r3, #0
 8000312:	61fb      	str	r3, [r7, #28]
 8000314:	2300      	movs	r3, #0
 8000316:	61bb      	str	r3, [r7, #24]
 8000318:	2300      	movs	r3, #0
 800031a:	617b      	str	r3, [r7, #20]
 800031c:	2300      	movs	r3, #0
 800031e:	613b      	str	r3, [r7, #16]
 8000320:	2300      	movs	r3, #0
 8000322:	60fb      	str	r3, [r7, #12]
 8000324:	2300      	movs	r3, #0
 8000326:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000328:	4b5f      	ldr	r3, [pc, #380]	; (80004a8 <RCC_GetClocksFreq+0x1a0>)
 800032a:	689b      	ldr	r3, [r3, #8]
 800032c:	f003 030c 	and.w	r3, r3, #12
 8000330:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 8000332:	69fb      	ldr	r3, [r7, #28]
 8000334:	2b0c      	cmp	r3, #12
 8000336:	d865      	bhi.n	8000404 <RCC_GetClocksFreq+0xfc>
 8000338:	a201      	add	r2, pc, #4	; (adr r2, 8000340 <RCC_GetClocksFreq+0x38>)
 800033a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800033e:	bf00      	nop
 8000340:	08000375 	.word	0x08000375
 8000344:	08000405 	.word	0x08000405
 8000348:	08000405 	.word	0x08000405
 800034c:	08000405 	.word	0x08000405
 8000350:	08000395 	.word	0x08000395
 8000354:	08000405 	.word	0x08000405
 8000358:	08000405 	.word	0x08000405
 800035c:	08000405 	.word	0x08000405
 8000360:	0800039d 	.word	0x0800039d
 8000364:	08000405 	.word	0x08000405
 8000368:	08000405 	.word	0x08000405
 800036c:	08000405 	.word	0x08000405
 8000370:	080003a5 	.word	0x080003a5
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8000374:	4b4c      	ldr	r3, [pc, #304]	; (80004a8 <RCC_GetClocksFreq+0x1a0>)
 8000376:	685b      	ldr	r3, [r3, #4]
 8000378:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800037c:	0b5b      	lsrs	r3, r3, #13
 800037e:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	3301      	adds	r3, #1
 8000384:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000388:	fa02 f303 	lsl.w	r3, r2, r3
 800038c:	461a      	mov	r2, r3
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	601a      	str	r2, [r3, #0]
      break;
 8000392:	e047      	b.n	8000424 <RCC_GetClocksFreq+0x11c>
    case 0x04:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a45      	ldr	r2, [pc, #276]	; (80004ac <RCC_GetClocksFreq+0x1a4>)
 8000398:	601a      	str	r2, [r3, #0]
      break;
 800039a:	e043      	b.n	8000424 <RCC_GetClocksFreq+0x11c>
    case 0x08:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a44      	ldr	r2, [pc, #272]	; (80004b0 <RCC_GetClocksFreq+0x1a8>)
 80003a0:	601a      	str	r2, [r3, #0]
      break;
 80003a2:	e03f      	b.n	8000424 <RCC_GetClocksFreq+0x11c>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80003a4:	4b40      	ldr	r3, [pc, #256]	; (80004a8 <RCC_GetClocksFreq+0x1a0>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80003ac:	61bb      	str	r3, [r7, #24]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 80003ae:	4b3e      	ldr	r3, [pc, #248]	; (80004a8 <RCC_GetClocksFreq+0x1a0>)
 80003b0:	689b      	ldr	r3, [r3, #8]
 80003b2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80003b6:	617b      	str	r3, [r7, #20]
      pllmul = PLLMulTable[(pllmul >> 18)];
 80003b8:	69bb      	ldr	r3, [r7, #24]
 80003ba:	0c9b      	lsrs	r3, r3, #18
 80003bc:	4a3d      	ldr	r2, [pc, #244]	; (80004b4 <RCC_GetClocksFreq+0x1ac>)
 80003be:	5cd3      	ldrb	r3, [r2, r3]
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	61bb      	str	r3, [r7, #24]
      plldiv = (plldiv >> 22) + 1;
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	0d9b      	lsrs	r3, r3, #22
 80003c8:	3301      	adds	r3, #1
 80003ca:	617b      	str	r3, [r7, #20]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80003cc:	4b36      	ldr	r3, [pc, #216]	; (80004a8 <RCC_GetClocksFreq+0x1a0>)
 80003ce:	689b      	ldr	r3, [r3, #8]
 80003d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003d4:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
 80003d6:	693b      	ldr	r3, [r7, #16]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d109      	bne.n	80003f0 <RCC_GetClocksFreq+0xe8>
      {
        /* HSI oscillator clock selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
 80003dc:	69bb      	ldr	r3, [r7, #24]
 80003de:	4a33      	ldr	r2, [pc, #204]	; (80004ac <RCC_GetClocksFreq+0x1a4>)
 80003e0:	fb02 f203 	mul.w	r2, r2, r3
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 80003ee:	e019      	b.n	8000424 <RCC_GetClocksFreq+0x11c>
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 80003f0:	69bb      	ldr	r3, [r7, #24]
 80003f2:	4a2f      	ldr	r2, [pc, #188]	; (80004b0 <RCC_GetClocksFreq+0x1a8>)
 80003f4:	fb02 f203 	mul.w	r2, r2, r3
 80003f8:	697b      	ldr	r3, [r7, #20]
 80003fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	601a      	str	r2, [r3, #0]
      }
      break;
 8000402:	e00f      	b.n	8000424 <RCC_GetClocksFreq+0x11c>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8000404:	4b28      	ldr	r3, [pc, #160]	; (80004a8 <RCC_GetClocksFreq+0x1a0>)
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800040c:	0b5b      	lsrs	r3, r3, #13
 800040e:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	3301      	adds	r3, #1
 8000414:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000418:	fa02 f303 	lsl.w	r3, r2, r3
 800041c:	461a      	mov	r2, r3
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	601a      	str	r2, [r3, #0]
      break;
 8000422:	bf00      	nop
  }
  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000424:	4b20      	ldr	r3, [pc, #128]	; (80004a8 <RCC_GetClocksFreq+0x1a0>)
 8000426:	689b      	ldr	r3, [r3, #8]
 8000428:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800042c:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 800042e:	69fb      	ldr	r3, [r7, #28]
 8000430:	091b      	lsrs	r3, r3, #4
 8000432:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp]; 
 8000434:	4a20      	ldr	r2, [pc, #128]	; (80004b8 <RCC_GetClocksFreq+0x1b0>)
 8000436:	69fb      	ldr	r3, [r7, #28]
 8000438:	4413      	add	r3, r2
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	b2db      	uxtb	r3, r3
 800043e:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	40da      	lsrs	r2, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800044c:	4b16      	ldr	r3, [pc, #88]	; (80004a8 <RCC_GetClocksFreq+0x1a0>)
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000454:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 8000456:	69fb      	ldr	r3, [r7, #28]
 8000458:	0a1b      	lsrs	r3, r3, #8
 800045a:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 800045c:	4a16      	ldr	r2, [pc, #88]	; (80004b8 <RCC_GetClocksFreq+0x1b0>)
 800045e:	69fb      	ldr	r3, [r7, #28]
 8000460:	4413      	add	r3, r2
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	b2db      	uxtb	r3, r3
 8000466:	60fb      	str	r3, [r7, #12]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	685a      	ldr	r2, [r3, #4]
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	40da      	lsrs	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <RCC_GetClocksFreq+0x1a0>)
 8000476:	689b      	ldr	r3, [r3, #8]
 8000478:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800047c:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 800047e:	69fb      	ldr	r3, [r7, #28]
 8000480:	0adb      	lsrs	r3, r3, #11
 8000482:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8000484:	4a0c      	ldr	r2, [pc, #48]	; (80004b8 <RCC_GetClocksFreq+0x1b0>)
 8000486:	69fb      	ldr	r3, [r7, #28]
 8000488:	4413      	add	r3, r2
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	b2db      	uxtb	r3, r3
 800048e:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	685a      	ldr	r2, [r3, #4]
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	40da      	lsrs	r2, r3
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	60da      	str	r2, [r3, #12]
}
 800049c:	bf00      	nop
 800049e:	3724      	adds	r7, #36	; 0x24
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	40023800 	.word	0x40023800
 80004ac:	00f42400 	.word	0x00f42400
 80004b0:	007a1200 	.word	0x007a1200
 80004b4:	20000000 	.word	0x20000000
 80004b8:	2000000c 	.word	0x2000000c

080004bc <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	460b      	mov	r3, r1
 80004c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80004c8:	78fb      	ldrb	r3, [r7, #3]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d006      	beq.n	80004dc <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80004ce:	4909      	ldr	r1, [pc, #36]	; (80004f4 <RCC_AHBPeriphClockCmd+0x38>)
 80004d0:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <RCC_AHBPeriphClockCmd+0x38>)
 80004d2:	69da      	ldr	r2, [r3, #28]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4313      	orrs	r3, r2
 80004d8:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 80004da:	e006      	b.n	80004ea <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80004dc:	4905      	ldr	r1, [pc, #20]	; (80004f4 <RCC_AHBPeriphClockCmd+0x38>)
 80004de:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <RCC_AHBPeriphClockCmd+0x38>)
 80004e0:	69da      	ldr	r2, [r3, #28]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	43db      	mvns	r3, r3
 80004e6:	4013      	ands	r3, r2
 80004e8:	61cb      	str	r3, [r1, #28]
  }
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr
 80004f4:	40023800 	.word	0x40023800

080004f8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	460b      	mov	r3, r1
 8000502:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000504:	78fb      	ldrb	r3, [r7, #3]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d006      	beq.n	8000518 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800050a:	4909      	ldr	r1, [pc, #36]	; (8000530 <RCC_APB1PeriphClockCmd+0x38>)
 800050c:	4b08      	ldr	r3, [pc, #32]	; (8000530 <RCC_APB1PeriphClockCmd+0x38>)
 800050e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4313      	orrs	r3, r2
 8000514:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000516:	e006      	b.n	8000526 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000518:	4905      	ldr	r1, [pc, #20]	; (8000530 <RCC_APB1PeriphClockCmd+0x38>)
 800051a:	4b05      	ldr	r3, [pc, #20]	; (8000530 <RCC_APB1PeriphClockCmd+0x38>)
 800051c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	43db      	mvns	r3, r3
 8000522:	4013      	ands	r3, r2
 8000524:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	40023800 	.word	0x40023800

08000534 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	881b      	ldrh	r3, [r3, #0]
 8000546:	81fb      	strh	r3, [r7, #14]

  if(((TIMx) == TIM2) || ((TIMx) == TIM3) || ((TIMx) == TIM4) || ((TIMx) == TIM5))
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800054e:	d00b      	beq.n	8000568 <TIM_TimeBaseInit+0x34>
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4a1c      	ldr	r2, [pc, #112]	; (80005c4 <TIM_TimeBaseInit+0x90>)
 8000554:	4293      	cmp	r3, r2
 8000556:	d007      	beq.n	8000568 <TIM_TimeBaseInit+0x34>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4a1b      	ldr	r2, [pc, #108]	; (80005c8 <TIM_TimeBaseInit+0x94>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d003      	beq.n	8000568 <TIM_TimeBaseInit+0x34>
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4a1a      	ldr	r2, [pc, #104]	; (80005cc <TIM_TimeBaseInit+0x98>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d108      	bne.n	800057a <TIM_TimeBaseInit+0x46>
  {											
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8000568:	89fb      	ldrh	r3, [r7, #14]
 800056a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800056e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	885a      	ldrh	r2, [r3, #2]
 8000574:	89fb      	ldrh	r3, [r7, #14]
 8000576:	4313      	orrs	r3, r2
 8000578:	81fb      	strh	r3, [r7, #14]
  }
 
  if(((TIMx) != TIM6) && ((TIMx) != TIM7))
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4a14      	ldr	r2, [pc, #80]	; (80005d0 <TIM_TimeBaseInit+0x9c>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d00c      	beq.n	800059c <TIM_TimeBaseInit+0x68>
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4a13      	ldr	r2, [pc, #76]	; (80005d4 <TIM_TimeBaseInit+0xa0>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d008      	beq.n	800059c <TIM_TimeBaseInit+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 800058a:	89fb      	ldrh	r3, [r7, #14]
 800058c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000590:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	891a      	ldrh	r2, [r3, #8]
 8000596:	89fb      	ldrh	r3, [r7, #14]
 8000598:	4313      	orrs	r3, r2
 800059a:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	89fa      	ldrh	r2, [r7, #14]
 80005a0:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	685a      	ldr	r2, [r3, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	881a      	ldrh	r2, [r3, #0]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	851a      	strh	r2, [r3, #40]	; 0x28
    
  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2201      	movs	r2, #1
 80005b6:	829a      	strh	r2, [r3, #20]
}
 80005b8:	bf00      	nop
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40000400 	.word	0x40000400
 80005c8:	40000800 	.word	0x40000800
 80005cc:	40000c00 	.word	0x40000c00
 80005d0:	40001000 	.word	0x40001000
 80005d4:	40001400 	.word	0x40001400

080005d8 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	460b      	mov	r3, r1
 80005e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80005e4:	78fb      	ldrb	r3, [r7, #3]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d008      	beq.n	80005fc <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 80005fa:	e007      	b.n	800060c <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	b29b      	uxth	r3, r3
 8000602:	f023 0301 	bic.w	r3, r3, #1
 8000606:	b29a      	uxth	r2, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	801a      	strh	r2, [r3, #0]
  }
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <TIM_OC2Init>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	81fb      	strh	r3, [r7, #14]
 8000626:	2300      	movs	r3, #0
 8000628:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST2_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	8c1b      	ldrh	r3, [r3, #32]
 800062e:	b29b      	uxth	r3, r3
 8000630:	f023 0310 	bic.w	r3, r3, #16
 8000634:	b29a      	uxth	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	8c1b      	ldrh	r3, [r3, #32]
 800063e:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	8b1b      	ldrh	r3, [r3, #24]
 8000644:	81fb      	strh	r3, [r7, #14]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
 8000646:	89fb      	ldrh	r3, [r7, #14]
 8000648:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800064c:	81fb      	strh	r3, [r7, #14]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	881b      	ldrh	r3, [r3, #0]
 8000652:	021b      	lsls	r3, r3, #8
 8000654:	b29a      	uxth	r2, r3
 8000656:	89fb      	ldrh	r3, [r7, #14]
 8000658:	4313      	orrs	r3, r2
 800065a:	81fb      	strh	r3, [r7, #14]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 800065c:	89bb      	ldrh	r3, [r7, #12]
 800065e:	f023 0320 	bic.w	r3, r3, #32
 8000662:	81bb      	strh	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	891b      	ldrh	r3, [r3, #8]
 8000668:	011b      	lsls	r3, r3, #4
 800066a:	b29a      	uxth	r2, r3
 800066c:	89bb      	ldrh	r3, [r7, #12]
 800066e:	4313      	orrs	r3, r2
 8000670:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	885b      	ldrh	r3, [r3, #2]
 8000676:	011b      	lsls	r3, r3, #4
 8000678:	b29a      	uxth	r2, r3
 800067a:	89bb      	ldrh	r3, [r7, #12]
 800067c:	4313      	orrs	r3, r2
 800067e:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	685a      	ldr	r2, [r3, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	639a      	str	r2, [r3, #56]	; 0x38
    
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	89fa      	ldrh	r2, [r7, #14]
 800068c:	831a      	strh	r2, [r3, #24]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	89ba      	ldrh	r2, [r7, #12]
 8000692:	841a      	strh	r2, [r3, #32]
}
 8000694:	bf00      	nop
 8000696:	3714      	adds	r7, #20
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable: Enable TIM output compare Preload
  *     @arg TIM_OCPreload_Disable: Disable TIM output compare Preload
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr1 = TIMx->CCMR1;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	8b1b      	ldrh	r3, [r3, #24]
 80006b4:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 80006b6:	89fb      	ldrh	r3, [r7, #14]
 80006b8:	f023 0308 	bic.w	r3, r3, #8
 80006bc:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80006be:	89fa      	ldrh	r2, [r7, #14]
 80006c0:	887b      	ldrh	r3, [r7, #2]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	89fa      	ldrh	r2, [r7, #14]
 80006ca:	831a      	strh	r2, [r3, #24]
}
 80006cc:	bf00      	nop
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop

080006d8 <delay_decrement>:
#include "stm32l1xx.h"

__IO static uint32_t time_ms = 0;

void delay_decrement (void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
	  if (time_ms > 0x00)
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <delay_decrement+0x20>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d004      	beq.n	80006ee <delay_decrement+0x16>
	  {
		  time_ms--;
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <delay_decrement+0x20>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	3b01      	subs	r3, #1
 80006ea:	4a03      	ldr	r2, [pc, #12]	; (80006f8 <delay_decrement+0x20>)
 80006ec:	6013      	str	r3, [r2, #0]
	  }
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	20000058 	.word	0x20000058

080006fc <delay_ms>:

void delay_ms(uint32_t t)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	time_ms = t;
 8000704:	4a06      	ldr	r2, [pc, #24]	; (8000720 <delay_ms+0x24>)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6013      	str	r3, [r2, #0]
	while(time_ms > 0)
 800070a:	bf00      	nop
 800070c:	4b04      	ldr	r3, [pc, #16]	; (8000720 <delay_ms+0x24>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d1fb      	bne.n	800070c <delay_ms+0x10>
	{
		// decrement from hero to zero
	}
}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	20000058 	.word	0x20000058

08000724 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	6039      	str	r1, [r7, #0]
 800072e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000734:	2b00      	cmp	r3, #0
 8000736:	da0b      	bge.n	8000750 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000738:	490d      	ldr	r1, [pc, #52]	; (8000770 <NVIC_SetPriority+0x4c>)
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	f003 030f 	and.w	r3, r3, #15
 8000740:	3b04      	subs	r3, #4
 8000742:	683a      	ldr	r2, [r7, #0]
 8000744:	b2d2      	uxtb	r2, r2
 8000746:	0112      	lsls	r2, r2, #4
 8000748:	b2d2      	uxtb	r2, r2
 800074a:	440b      	add	r3, r1
 800074c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800074e:	e009      	b.n	8000764 <NVIC_SetPriority+0x40>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000750:	4908      	ldr	r1, [pc, #32]	; (8000774 <NVIC_SetPriority+0x50>)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	683a      	ldr	r2, [r7, #0]
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	0112      	lsls	r2, r2, #4
 800075c:	b2d2      	uxtb	r2, r2
 800075e:	440b      	add	r3, r1
 8000760:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00
 8000774:	e000e100 	.word	0xe000e100

08000778 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000786:	d301      	bcc.n	800078c <SysTick_Config+0x14>
 8000788:	2301      	movs	r3, #1
 800078a:	e011      	b.n	80007b0 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800078c:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <SysTick_Config+0x40>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000794:	3b01      	subs	r3, #1
 8000796:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8000798:	210f      	movs	r1, #15
 800079a:	f04f 30ff 	mov.w	r0, #4294967295
 800079e:	f7ff ffc1 	bl	8000724 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80007a2:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <SysTick_Config+0x40>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007a8:	4b03      	ldr	r3, [pc, #12]	; (80007b8 <SysTick_Config+0x40>)
 80007aa:	2207      	movs	r2, #7
 80007ac:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80007ae:	2300      	movs	r3, #0
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	e000e010 	.word	0xe000e010

080007bc <main>:

/* Private define  */
//#define Kalibruj //nie je potrebne pri Opto regulatororch od DJI

int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	SystemInit();
 80007c0:	f000 f90a 	bl	80009d8 <SystemInit>
	SystemCoreClockUpdate();
 80007c4:	f000 f93c 	bl	8000a40 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock /1000);
 80007c8:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <main+0x78>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a1a      	ldr	r2, [pc, #104]	; (8000838 <main+0x7c>)
 80007ce:	fba2 2303 	umull	r2, r3, r2, r3
 80007d2:	099b      	lsrs	r3, r3, #6
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ffcf 	bl	8000778 <SysTick_Config>

	GPIO_init();
 80007da:	f000 f875 	bl	80008c8 <GPIO_init>
	Timer_init();
 80007de:	f000 f82f 	bl	8000840 <Timer_init>
	PWM_init(0);
 80007e2:	2000      	movs	r0, #0
 80007e4:	f000 f850 	bl	8000888 <PWM_init>
		BLDC_Regulator_calibration(); //kalibracia regulatora otacok
	#endif

	while(1)
	{
		if(i < 10)
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <main+0x80>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b09      	cmp	r3, #9
 80007ee:	d81c      	bhi.n	800082a <main+0x6e>
		{
			if(i == 9)
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <main+0x80>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b09      	cmp	r3, #9
 80007f6:	d107      	bne.n	8000808 <main+0x4c>
			{
				TIM2->CCR2 = 100;
 80007f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007fc:	2264      	movs	r2, #100	; 0x64
 80007fe:	639a      	str	r2, [r3, #56]	; 0x38
				i = 0;
 8000800:	4b0e      	ldr	r3, [pc, #56]	; (800083c <main+0x80>)
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
 8000806:	e010      	b.n	800082a <main+0x6e>
			}
			else
			{
				TIM2->CCR2 = 100+10*i;
 8000808:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800080c:	4b0b      	ldr	r3, [pc, #44]	; (800083c <main+0x80>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	4619      	mov	r1, r3
 8000812:	460b      	mov	r3, r1
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	440b      	add	r3, r1
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	3364      	adds	r3, #100	; 0x64
 800081c:	6393      	str	r3, [r2, #56]	; 0x38
				i++;
 800081e:	4b07      	ldr	r3, [pc, #28]	; (800083c <main+0x80>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	3301      	adds	r3, #1
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4b05      	ldr	r3, [pc, #20]	; (800083c <main+0x80>)
 8000828:	701a      	strb	r2, [r3, #0]
			}
		}
		delay_ms(500);
 800082a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800082e:	f7ff ff65 	bl	80006fc <delay_ms>
	}
 8000832:	e7d9      	b.n	80007e8 <main+0x2c>
 8000834:	2000001c 	.word	0x2000001c
 8000838:	10624dd3 	.word	0x10624dd3
 800083c:	2000005c 	.word	0x2000005c

08000840 <Timer_init>:
#include "stm32l1xx.h"
#include <stdio.h>
#include "delay.h"

void Timer_init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0

	TIM_TimeBaseInitTypeDef TIM_BaseStruct;
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000846:	2101      	movs	r1, #1
 8000848:	2001      	movs	r0, #1
 800084a:	f7ff fe55 	bl	80004f8 <RCC_APB1PeriphClockCmd>

	TIM_BaseStruct.TIM_Prescaler = 20;
 800084e:	2314      	movs	r3, #20
 8000850:	82bb      	strh	r3, [r7, #20]
	TIM_BaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
 8000852:	2300      	movs	r3, #0
 8000854:	82fb      	strh	r3, [r7, #22]
    TIM_BaseStruct.TIM_Period = 1999; // f[Hz] PWM bude 50hz, nastavenie periody casovaca
 8000856:	f240 73cf 	movw	r3, #1999	; 0x7cf
 800085a:	61bb      	str	r3, [r7, #24]
    TIM_BaseStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	83bb      	strh	r3, [r7, #28]

    TIM_TimeBaseInit(TIM2, &TIM_BaseStruct);
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4619      	mov	r1, r3
 8000866:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800086a:	f7ff fe63 	bl	8000534 <TIM_TimeBaseInit>
    TIM_Cmd(TIM2, ENABLE);
 800086e:	2101      	movs	r1, #1
 8000870:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000874:	f7ff feb0 	bl	80005d8 <TIM_Cmd>

    RCC_ClocksTypeDef RCC_Clocks;
    RCC_GetClocksFreq(&RCC_Clocks);
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff fd44 	bl	8000308 <RCC_GetClocksFreq>
}
 8000880:	bf00      	nop
 8000882:	3720      	adds	r7, #32
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <PWM_init>:

void PWM_init(uint8_t duty_cycle)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
	TIM_OCInitTypeDef TIM_OCStruct;
	//uint16_t pulse_length = ((2000 * duty_cycle) / 100) - 1;
	uint16_t pulse_length = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	82fb      	strh	r3, [r7, #22]

    TIM_OCStruct.TIM_OCMode = TIM_OCMode_PWM2;
 8000896:	2370      	movs	r3, #112	; 0x70
 8000898:	813b      	strh	r3, [r7, #8]
    TIM_OCStruct.TIM_OutputState = TIM_OutputState_Enable;
 800089a:	2301      	movs	r3, #1
 800089c:	817b      	strh	r3, [r7, #10]
    TIM_OCStruct.TIM_OCPolarity = TIM_OCPolarity_Low;
 800089e:	2302      	movs	r3, #2
 80008a0:	823b      	strh	r3, [r7, #16]
    TIM_OCStruct.TIM_Pulse = pulse_length;
 80008a2:	8afb      	ldrh	r3, [r7, #22]
 80008a4:	60fb      	str	r3, [r7, #12]
    TIM_OC2Init(TIM2, &TIM_OCStruct);
 80008a6:	f107 0308 	add.w	r3, r7, #8
 80008aa:	4619      	mov	r1, r3
 80008ac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80008b0:	f7ff feb2 	bl	8000618 <TIM_OC2Init>
    TIM_OC1PreloadConfig(TIM2, TIM_OCPreload_Enable);
 80008b4:	2108      	movs	r1, #8
 80008b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80008ba:	f7ff fef1 	bl	80006a0 <TIM_OC1PreloadConfig>

}
 80008be:	bf00      	nop
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop

080008c8 <GPIO_init>:

void GPIO_init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct, GPIO_Button;

    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80008ce:	2101      	movs	r1, #1
 80008d0:	2001      	movs	r0, #1
 80008d2:	f7ff fdf3 	bl	80004bc <RCC_AHBPeriphClockCmd>

	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_1;
 80008d6:	2302      	movs	r3, #2
 80008d8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80008da:	2300      	movs	r3, #0
 80008dc:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	73fb      	strb	r3, [r7, #15]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 80008e2:	2302      	movs	r3, #2
 80008e4:	733b      	strb	r3, [r7, #12]
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_40MHz;
 80008e6:	2303      	movs	r3, #3
 80008e8:	737b      	strb	r3, [r7, #13]

    GPIO_Button.GPIO_Pin = GPIO_Pin_0;
 80008ea:	2301      	movs	r3, #1
 80008ec:	603b      	str	r3, [r7, #0]
    GPIO_Button.GPIO_OType = GPIO_OType_PP;
 80008ee:	2300      	movs	r3, #0
 80008f0:	71bb      	strb	r3, [r7, #6]
    GPIO_Button.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	71fb      	strb	r3, [r7, #7]
    GPIO_Button.GPIO_Mode = GPIO_Mode_IN;
 80008f6:	2300      	movs	r3, #0
 80008f8:	713b      	strb	r3, [r7, #4]

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_TIM2);
 80008fa:	2201      	movs	r2, #1
 80008fc:	2101      	movs	r1, #1
 80008fe:	4809      	ldr	r0, [pc, #36]	; (8000924 <GPIO_init+0x5c>)
 8000900:	f7ff fcba 	bl	8000278 <GPIO_PinAFConfig>
    GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	f107 0308 	add.w	r3, r7, #8
 8000908:	4619      	mov	r1, r3
 800090a:	4806      	ldr	r0, [pc, #24]	; (8000924 <GPIO_init+0x5c>)
 800090c:	f7ff fc1e 	bl	800014c <GPIO_Init>
    GPIO_Init(GPIOA, &GPIO_Button);
 8000910:	463b      	mov	r3, r7
 8000912:	4619      	mov	r1, r3
 8000914:	4803      	ldr	r0, [pc, #12]	; (8000924 <GPIO_init+0x5c>)
 8000916:	f7ff fc19 	bl	800014c <GPIO_Init>
}
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40020000 	.word	0x40020000

08000928 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000960 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800092c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800092e:	e003      	b.n	8000938 <LoopCopyDataInit>

08000930 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 8000932:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000934:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000936:	3104      	adds	r1, #4

08000938 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000938:	480b      	ldr	r0, [pc, #44]	; (8000968 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 800093c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800093e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000940:	d3f6      	bcc.n	8000930 <CopyDataInit>
  ldr r2, =_sbss
 8000942:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8000944:	e002      	b.n	800094c <LoopFillZerobss>

08000946 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000948:	f842 3b04 	str.w	r3, [r2], #4

0800094c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <LoopFillZerobss+0x28>)
  cmp r2, r3
 800094e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000950:	d3f9      	bcc.n	8000946 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000952:	f000 f841 	bl	80009d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000956:	f000 f9af 	bl	8000cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800095a:	f7ff ff2f 	bl	80007bc <main>
  bx lr
 800095e:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000960:	20004000 	.word	0x20004000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8000964:	08000d24 	.word	0x08000d24
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8000968:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800096c:	2000003c 	.word	0x2000003c
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8000970:	2000003c 	.word	0x2000003c
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8000974:	20000060 	.word	0x20000060

08000978 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC1_IRQHandler>
	...

0800097c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr

08000988 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 800098c:	e7fe      	b.n	800098c <HardFault_Handler+0x4>
 800098e:	bf00      	nop

08000990 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000994:	e7fe      	b.n	8000994 <MemManage_Handler+0x4>
 8000996:	bf00      	nop

08000998 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 800099c:	e7fe      	b.n	800099c <BusFault_Handler+0x4>
 800099e:	bf00      	nop

080009a0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80009a4:	e7fe      	b.n	80009a4 <UsageFault_Handler+0x4>
 80009a6:	bf00      	nop

080009a8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr

080009c0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr

080009cc <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	delay_decrement();
 80009d0:	f7ff fe82 	bl	80006d8 <delay_decrement>
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80009dc:	4a15      	ldr	r2, [pc, #84]	; (8000a34 <SystemInit+0x5c>)
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <SystemInit+0x5c>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009e6:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80009e8:	4912      	ldr	r1, [pc, #72]	; (8000a34 <SystemInit+0x5c>)
 80009ea:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <SystemInit+0x5c>)
 80009ec:	689a      	ldr	r2, [r3, #8]
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <SystemInit+0x60>)
 80009f0:	4013      	ands	r3, r2
 80009f2:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80009f4:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <SystemInit+0x5c>)
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <SystemInit+0x5c>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80009fe:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000a02:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a04:	4a0b      	ldr	r2, [pc, #44]	; (8000a34 <SystemInit+0x5c>)
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <SystemInit+0x5c>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a0e:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000a10:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <SystemInit+0x5c>)
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <SystemInit+0x5c>)
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000a1a:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <SystemInit+0x5c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8000a22:	f000 f8b9 	bl	8000b98 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <SystemInit+0x64>)
 8000a28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a2c:	609a      	str	r2, [r3, #8]
#endif
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	88ffc00c 	.word	0x88ffc00c
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b087      	sub	sp, #28
 8000a44:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, msirange = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	2300      	movs	r3, #0
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000a5a:	4b49      	ldr	r3, [pc, #292]	; (8000b80 <SystemCoreClockUpdate+0x140>)
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	f003 030c 	and.w	r3, r3, #12
 8000a62:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	2b0c      	cmp	r3, #12
 8000a68:	d864      	bhi.n	8000b34 <SystemCoreClockUpdate+0xf4>
 8000a6a:	a201      	add	r2, pc, #4	; (adr r2, 8000a70 <SystemCoreClockUpdate+0x30>)
 8000a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a70:	08000aa5 	.word	0x08000aa5
 8000a74:	08000b35 	.word	0x08000b35
 8000a78:	08000b35 	.word	0x08000b35
 8000a7c:	08000b35 	.word	0x08000b35
 8000a80:	08000ac5 	.word	0x08000ac5
 8000a84:	08000b35 	.word	0x08000b35
 8000a88:	08000b35 	.word	0x08000b35
 8000a8c:	08000b35 	.word	0x08000b35
 8000a90:	08000acd 	.word	0x08000acd
 8000a94:	08000b35 	.word	0x08000b35
 8000a98:	08000b35 	.word	0x08000b35
 8000a9c:	08000b35 	.word	0x08000b35
 8000aa0:	08000ad5 	.word	0x08000ad5
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8000aa4:	4b36      	ldr	r3, [pc, #216]	; (8000b80 <SystemCoreClockUpdate+0x140>)
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000aac:	0b5b      	lsrs	r3, r3, #13
 8000aae:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b31      	ldr	r3, [pc, #196]	; (8000b84 <SystemCoreClockUpdate+0x144>)
 8000ac0:	601a      	str	r2, [r3, #0]
      break;
 8000ac2:	e047      	b.n	8000b54 <SystemCoreClockUpdate+0x114>
    case 0x04:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000ac4:	4b2f      	ldr	r3, [pc, #188]	; (8000b84 <SystemCoreClockUpdate+0x144>)
 8000ac6:	4a30      	ldr	r2, [pc, #192]	; (8000b88 <SystemCoreClockUpdate+0x148>)
 8000ac8:	601a      	str	r2, [r3, #0]
      break;
 8000aca:	e043      	b.n	8000b54 <SystemCoreClockUpdate+0x114>
    case 0x08:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000acc:	4b2d      	ldr	r3, [pc, #180]	; (8000b84 <SystemCoreClockUpdate+0x144>)
 8000ace:	4a2f      	ldr	r2, [pc, #188]	; (8000b8c <SystemCoreClockUpdate+0x14c>)
 8000ad0:	601a      	str	r2, [r3, #0]
      break;
 8000ad2:	e03f      	b.n	8000b54 <SystemCoreClockUpdate+0x114>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000ad4:	4b2a      	ldr	r3, [pc, #168]	; (8000b80 <SystemCoreClockUpdate+0x140>)
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000adc:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8000ade:	4b28      	ldr	r3, [pc, #160]	; (8000b80 <SystemCoreClockUpdate+0x140>)
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000ae6:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> 18)];
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	0c9b      	lsrs	r3, r3, #18
 8000aec:	4a28      	ldr	r2, [pc, #160]	; (8000b90 <SystemCoreClockUpdate+0x150>)
 8000aee:	5cd3      	ldrb	r3, [r2, r3]
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> 22) + 1;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	0d9b      	lsrs	r3, r3, #22
 8000af8:	3301      	adds	r3, #1
 8000afa:	60fb      	str	r3, [r7, #12]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000afc:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <SystemCoreClockUpdate+0x140>)
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b04:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d109      	bne.n	8000b20 <SystemCoreClockUpdate+0xe0>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	4a1e      	ldr	r2, [pc, #120]	; (8000b88 <SystemCoreClockUpdate+0x148>)
 8000b10:	fb02 f203 	mul.w	r2, r2, r3
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1a:	4a1a      	ldr	r2, [pc, #104]	; (8000b84 <SystemCoreClockUpdate+0x144>)
 8000b1c:	6013      	str	r3, [r2, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8000b1e:	e019      	b.n	8000b54 <SystemCoreClockUpdate+0x114>
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	4a1a      	ldr	r2, [pc, #104]	; (8000b8c <SystemCoreClockUpdate+0x14c>)
 8000b24:	fb02 f203 	mul.w	r2, r2, r3
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2e:	4a15      	ldr	r2, [pc, #84]	; (8000b84 <SystemCoreClockUpdate+0x144>)
 8000b30:	6013      	str	r3, [r2, #0]
      }
      break;
 8000b32:	e00f      	b.n	8000b54 <SystemCoreClockUpdate+0x114>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <SystemCoreClockUpdate+0x140>)
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000b3c:	0b5b      	lsrs	r3, r3, #13
 8000b3e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3301      	adds	r3, #1
 8000b44:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <SystemCoreClockUpdate+0x144>)
 8000b50:	601a      	str	r2, [r3, #0]
      break;
 8000b52:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <SystemCoreClockUpdate+0x140>)
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b5c:	091b      	lsrs	r3, r3, #4
 8000b5e:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <SystemCoreClockUpdate+0x154>)
 8000b60:	5cd3      	ldrb	r3, [r2, r3]
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000b66:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <SystemCoreClockUpdate+0x144>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b70:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <SystemCoreClockUpdate+0x144>)
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	bf00      	nop
 8000b76:	371c      	adds	r7, #28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800
 8000b84:	2000001c 	.word	0x2000001c
 8000b88:	00f42400 	.word	0x00f42400
 8000b8c:	007a1200 	.word	0x007a1200
 8000b90:	20000020 	.word	0x20000020
 8000b94:	2000002c 	.word	0x2000002c

08000b98 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000ba6:	4a41      	ldr	r2, [pc, #260]	; (8000cac <SetSysClock+0x114>)
 8000ba8:	4b40      	ldr	r3, [pc, #256]	; (8000cac <SetSysClock+0x114>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000bb2:	4b3e      	ldr	r3, [pc, #248]	; (8000cac <SetSysClock+0x114>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bba:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d103      	bne.n	8000bd0 <SetSysClock+0x38>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000bce:	d1f0      	bne.n	8000bb2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000bd0:	4b36      	ldr	r3, [pc, #216]	; (8000cac <SetSysClock+0x114>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d002      	beq.n	8000be2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	e001      	b.n	8000be6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000be2:	2300      	movs	r3, #0
 8000be4:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d15a      	bne.n	8000ca2 <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8000bec:	4a30      	ldr	r2, [pc, #192]	; (8000cb0 <SetSysClock+0x118>)
 8000bee:	4b30      	ldr	r3, [pc, #192]	; (8000cb0 <SetSysClock+0x118>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f043 0304 	orr.w	r3, r3, #4
 8000bf6:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8000bf8:	4a2d      	ldr	r2, [pc, #180]	; (8000cb0 <SetSysClock+0x118>)
 8000bfa:	4b2d      	ldr	r3, [pc, #180]	; (8000cb0 <SetSysClock+0x118>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f043 0302 	orr.w	r3, r3, #2
 8000c02:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8000c04:	4a2a      	ldr	r2, [pc, #168]	; (8000cb0 <SetSysClock+0x118>)
 8000c06:	4b2a      	ldr	r3, [pc, #168]	; (8000cb0 <SetSysClock+0x118>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000c10:	4a26      	ldr	r2, [pc, #152]	; (8000cac <SetSysClock+0x114>)
 8000c12:	4b26      	ldr	r3, [pc, #152]	; (8000cac <SetSysClock+0x114>)
 8000c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8000c1c:	4b25      	ldr	r3, [pc, #148]	; (8000cb4 <SetSysClock+0x11c>)
 8000c1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c22:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8000c24:	bf00      	nop
 8000c26:	4b23      	ldr	r3, [pc, #140]	; (8000cb4 <SetSysClock+0x11c>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 0310 	and.w	r3, r3, #16
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d1f9      	bne.n	8000c26 <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000c32:	4a1e      	ldr	r2, [pc, #120]	; (8000cac <SetSysClock+0x114>)
 8000c34:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <SetSysClock+0x114>)
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000c3a:	4a1c      	ldr	r2, [pc, #112]	; (8000cac <SetSysClock+0x114>)
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <SetSysClock+0x114>)
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8000c42:	4a1a      	ldr	r2, [pc, #104]	; (8000cac <SetSysClock+0x114>)
 8000c44:	4b19      	ldr	r3, [pc, #100]	; (8000cac <SetSysClock+0x114>)
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 8000c4a:	4a18      	ldr	r2, [pc, #96]	; (8000cac <SetSysClock+0x114>)
 8000c4c:	4b17      	ldr	r3, [pc, #92]	; (8000cac <SetSysClock+0x114>)
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000c54:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 8000c56:	4a15      	ldr	r2, [pc, #84]	; (8000cac <SetSysClock+0x114>)
 8000c58:	4b14      	ldr	r3, [pc, #80]	; (8000cac <SetSysClock+0x114>)
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8000c60:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000c62:	4a12      	ldr	r2, [pc, #72]	; (8000cac <SetSysClock+0x114>)
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <SetSysClock+0x114>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c6c:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000c6e:	bf00      	nop
 8000c70:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <SetSysClock+0x114>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d0f9      	beq.n	8000c70 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000c7c:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <SetSysClock+0x114>)
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <SetSysClock+0x114>)
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	f023 0303 	bic.w	r3, r3, #3
 8000c86:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8000c88:	4a08      	ldr	r2, [pc, #32]	; (8000cac <SetSysClock+0x114>)
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <SetSysClock+0x114>)
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	f043 0303 	orr.w	r3, r3, #3
 8000c92:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8000c94:	bf00      	nop
 8000c96:	4b05      	ldr	r3, [pc, #20]	; (8000cac <SetSysClock+0x114>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	f003 030c 	and.w	r3, r3, #12
 8000c9e:	2b0c      	cmp	r3, #12
 8000ca0:	d1f9      	bne.n	8000c96 <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40023c00 	.word	0x40023c00
 8000cb4:	40007000 	.word	0x40007000

08000cb8 <__libc_init_array>:
 8000cb8:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <__libc_init_array+0x3c>)
 8000cba:	b570      	push	{r4, r5, r6, lr}
 8000cbc:	461e      	mov	r6, r3
 8000cbe:	4c0e      	ldr	r4, [pc, #56]	; (8000cf8 <__libc_init_array+0x40>)
 8000cc0:	2500      	movs	r5, #0
 8000cc2:	1ae4      	subs	r4, r4, r3
 8000cc4:	10a4      	asrs	r4, r4, #2
 8000cc6:	42a5      	cmp	r5, r4
 8000cc8:	d004      	beq.n	8000cd4 <__libc_init_array+0x1c>
 8000cca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cce:	4798      	blx	r3
 8000cd0:	3501      	adds	r5, #1
 8000cd2:	e7f8      	b.n	8000cc6 <__libc_init_array+0xe>
 8000cd4:	f000 f816 	bl	8000d04 <_init>
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <__libc_init_array+0x44>)
 8000cda:	4c09      	ldr	r4, [pc, #36]	; (8000d00 <__libc_init_array+0x48>)
 8000cdc:	461e      	mov	r6, r3
 8000cde:	1ae4      	subs	r4, r4, r3
 8000ce0:	10a4      	asrs	r4, r4, #2
 8000ce2:	2500      	movs	r5, #0
 8000ce4:	42a5      	cmp	r5, r4
 8000ce6:	d004      	beq.n	8000cf2 <__libc_init_array+0x3a>
 8000ce8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cec:	4798      	blx	r3
 8000cee:	3501      	adds	r5, #1
 8000cf0:	e7f8      	b.n	8000ce4 <__libc_init_array+0x2c>
 8000cf2:	bd70      	pop	{r4, r5, r6, pc}
 8000cf4:	08000d1c 	.word	0x08000d1c
 8000cf8:	08000d1c 	.word	0x08000d1c
 8000cfc:	08000d1c 	.word	0x08000d1c
 8000d00:	08000d20 	.word	0x08000d20

08000d04 <_init>:
 8000d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d06:	bf00      	nop
 8000d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d0a:	bc08      	pop	{r3}
 8000d0c:	469e      	mov	lr, r3
 8000d0e:	4770      	bx	lr

08000d10 <_fini>:
 8000d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d12:	bf00      	nop
 8000d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d16:	bc08      	pop	{r3}
 8000d18:	469e      	mov	lr, r3
 8000d1a:	4770      	bx	lr
