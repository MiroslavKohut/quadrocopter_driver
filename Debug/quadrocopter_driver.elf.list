
quadrocopter_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027c0  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002900  08002900  00012900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002958  08002958  00012958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800295c  0800295c  0001295c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  20000000  08002960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000007c  2000001c  0800297c  0002001c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000098  0800297c  00020098  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00006814  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001121  00000000  00000000  00026859  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000008b8  00000000  00000000  00027980  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007f0  00000000  00000000  00028238  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002c48  00000000  00000000  00028a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002a0a  00000000  00000000  0002b670  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0002e07a  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000251c  00000000  00000000  0002e0f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00030614  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000001c 	.word	0x2000001c
 800015c:	00000000 	.word	0x00000000
 8000160:	080028e8 	.word	0x080028e8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000020 	.word	0x20000020
 800017c:	080028e8 	.word	0x080028e8

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f092 0f00 	teq	r2, #0
 800046a:	bf14      	ite	ne
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e720      	b.n	80002c4 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_ul2d>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	b530      	push	{r4, r5, lr}
 800048e:	f04f 0500 	mov.w	r5, #0
 8000492:	e00a      	b.n	80004aa <__aeabi_l2d+0x16>

08000494 <__aeabi_l2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a2:	d502      	bpl.n	80004aa <__aeabi_l2d+0x16>
 80004a4:	4240      	negs	r0, r0
 80004a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b6:	f43f aedc 	beq.w	8000272 <__adddf3+0xe6>
 80004ba:	f04f 0203 	mov.w	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d2:	f1c2 0320 	rsb	r3, r2, #32
 80004d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004da:	fa20 f002 	lsr.w	r0, r0, r2
 80004de:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e2:	ea40 000e 	orr.w	r0, r0, lr
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	4414      	add	r4, r2
 80004ec:	e6c1      	b.n	8000272 <__adddf3+0xe6>
 80004ee:	bf00      	nop

080004f0 <__aeabi_dmul>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fe:	bf1d      	ittte	ne
 8000500:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000504:	ea94 0f0c 	teqne	r4, ip
 8000508:	ea95 0f0c 	teqne	r5, ip
 800050c:	f000 f8de 	bleq	80006cc <__aeabi_dmul+0x1dc>
 8000510:	442c      	add	r4, r5
 8000512:	ea81 0603 	eor.w	r6, r1, r3
 8000516:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000522:	bf18      	it	ne
 8000524:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000528:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800052c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000530:	d038      	beq.n	80005a4 <__aeabi_dmul+0xb4>
 8000532:	fba0 ce02 	umull	ip, lr, r0, r2
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000542:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000546:	f04f 0600 	mov.w	r6, #0
 800054a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054e:	f09c 0f00 	teq	ip, #0
 8000552:	bf18      	it	ne
 8000554:	f04e 0e01 	orrne.w	lr, lr, #1
 8000558:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800055c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000560:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000564:	d204      	bcs.n	8000570 <__aeabi_dmul+0x80>
 8000566:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056a:	416d      	adcs	r5, r5
 800056c:	eb46 0606 	adc.w	r6, r6, r6
 8000570:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000574:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000578:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800057c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000580:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000584:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000588:	bf88      	it	hi
 800058a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058e:	d81e      	bhi.n	80005ce <__aeabi_dmul+0xde>
 8000590:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000594:	bf08      	it	eq
 8000596:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059a:	f150 0000 	adcs.w	r0, r0, #0
 800059e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a8:	ea46 0101 	orr.w	r1, r6, r1
 80005ac:	ea40 0002 	orr.w	r0, r0, r2
 80005b0:	ea81 0103 	eor.w	r1, r1, r3
 80005b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b8:	bfc2      	ittt	gt
 80005ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c2:	bd70      	popgt	{r4, r5, r6, pc}
 80005c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c8:	f04f 0e00 	mov.w	lr, #0
 80005cc:	3c01      	subs	r4, #1
 80005ce:	f300 80ab 	bgt.w	8000728 <__aeabi_dmul+0x238>
 80005d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d6:	bfde      	ittt	le
 80005d8:	2000      	movle	r0, #0
 80005da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd70      	pople	{r4, r5, r6, pc}
 80005e0:	f1c4 0400 	rsb	r4, r4, #0
 80005e4:	3c20      	subs	r4, #32
 80005e6:	da35      	bge.n	8000654 <__aeabi_dmul+0x164>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc1b      	bgt.n	8000624 <__aeabi_dmul+0x134>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0520 	rsb	r5, r4, #32
 80005f4:	fa00 f305 	lsl.w	r3, r0, r5
 80005f8:	fa20 f004 	lsr.w	r0, r0, r4
 80005fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000608:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800060c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000610:	fa21 f604 	lsr.w	r6, r1, r4
 8000614:	eb42 0106 	adc.w	r1, r2, r6
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 040c 	rsb	r4, r4, #12
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f304 	lsl.w	r3, r0, r4
 8000630:	fa20 f005 	lsr.w	r0, r0, r5
 8000634:	fa01 f204 	lsl.w	r2, r1, r4
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000640:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000644:	f141 0100 	adc.w	r1, r1, #0
 8000648:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800064c:	bf08      	it	eq
 800064e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f205 	lsl.w	r2, r0, r5
 800065c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000660:	fa20 f304 	lsr.w	r3, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea43 0302 	orr.w	r3, r3, r2
 800066c:	fa21 f004 	lsr.w	r0, r1, r4
 8000670:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000674:	fa21 f204 	lsr.w	r2, r1, r4
 8000678:	ea20 0002 	bic.w	r0, r0, r2
 800067c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f094 0f00 	teq	r4, #0
 8000690:	d10f      	bne.n	80006b2 <__aeabi_dmul+0x1c2>
 8000692:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000696:	0040      	lsls	r0, r0, #1
 8000698:	eb41 0101 	adc.w	r1, r1, r1
 800069c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3c01      	subeq	r4, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1a6>
 80006a6:	ea41 0106 	orr.w	r1, r1, r6
 80006aa:	f095 0f00 	teq	r5, #0
 80006ae:	bf18      	it	ne
 80006b0:	4770      	bxne	lr
 80006b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b6:	0052      	lsls	r2, r2, #1
 80006b8:	eb43 0303 	adc.w	r3, r3, r3
 80006bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c0:	bf08      	it	eq
 80006c2:	3d01      	subeq	r5, #1
 80006c4:	d0f7      	beq.n	80006b6 <__aeabi_dmul+0x1c6>
 80006c6:	ea43 0306 	orr.w	r3, r3, r6
 80006ca:	4770      	bx	lr
 80006cc:	ea94 0f0c 	teq	r4, ip
 80006d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d4:	bf18      	it	ne
 80006d6:	ea95 0f0c 	teqne	r5, ip
 80006da:	d00c      	beq.n	80006f6 <__aeabi_dmul+0x206>
 80006dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e0:	bf18      	it	ne
 80006e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e6:	d1d1      	bne.n	800068c <__aeabi_dmul+0x19c>
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	f04f 0000 	mov.w	r0, #0
 80006f4:	bd70      	pop	{r4, r5, r6, pc}
 80006f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fa:	bf06      	itte	eq
 80006fc:	4610      	moveq	r0, r2
 80006fe:	4619      	moveq	r1, r3
 8000700:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000704:	d019      	beq.n	800073a <__aeabi_dmul+0x24a>
 8000706:	ea94 0f0c 	teq	r4, ip
 800070a:	d102      	bne.n	8000712 <__aeabi_dmul+0x222>
 800070c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000710:	d113      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000712:	ea95 0f0c 	teq	r5, ip
 8000716:	d105      	bne.n	8000724 <__aeabi_dmul+0x234>
 8000718:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800071c:	bf1c      	itt	ne
 800071e:	4610      	movne	r0, r2
 8000720:	4619      	movne	r1, r3
 8000722:	d10a      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000724:	ea81 0103 	eor.w	r1, r1, r3
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000730:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000734:	f04f 0000 	mov.w	r0, #0
 8000738:	bd70      	pop	{r4, r5, r6, pc}
 800073a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000742:	bd70      	pop	{r4, r5, r6, pc}

08000744 <__aeabi_ddiv>:
 8000744:	b570      	push	{r4, r5, r6, lr}
 8000746:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800074a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000752:	bf1d      	ittte	ne
 8000754:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000758:	ea94 0f0c 	teqne	r4, ip
 800075c:	ea95 0f0c 	teqne	r5, ip
 8000760:	f000 f8a7 	bleq	80008b2 <__aeabi_ddiv+0x16e>
 8000764:	eba4 0405 	sub.w	r4, r4, r5
 8000768:	ea81 0e03 	eor.w	lr, r1, r3
 800076c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000770:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000774:	f000 8088 	beq.w	8000888 <__aeabi_ddiv+0x144>
 8000778:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800077c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000780:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000784:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000788:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800078c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000790:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000794:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000798:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800079c:	429d      	cmp	r5, r3
 800079e:	bf08      	it	eq
 80007a0:	4296      	cmpeq	r6, r2
 80007a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007aa:	d202      	bcs.n	80007b2 <__aeabi_ddiv+0x6e>
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	1ab6      	subs	r6, r6, r2
 80007b4:	eb65 0503 	sbc.w	r5, r5, r3
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000820:	ea55 0e06 	orrs.w	lr, r5, r6
 8000824:	d018      	beq.n	8000858 <__aeabi_ddiv+0x114>
 8000826:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000832:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000836:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000842:	d1c0      	bne.n	80007c6 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	d10b      	bne.n	8000862 <__aeabi_ddiv+0x11e>
 800084a:	ea41 0100 	orr.w	r1, r1, r0
 800084e:	f04f 0000 	mov.w	r0, #0
 8000852:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000856:	e7b6      	b.n	80007c6 <__aeabi_ddiv+0x82>
 8000858:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800085c:	bf04      	itt	eq
 800085e:	4301      	orreq	r1, r0
 8000860:	2000      	moveq	r0, #0
 8000862:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000866:	bf88      	it	hi
 8000868:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800086c:	f63f aeaf 	bhi.w	80005ce <__aeabi_dmul+0xde>
 8000870:	ebb5 0c03 	subs.w	ip, r5, r3
 8000874:	bf04      	itt	eq
 8000876:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087e:	f150 0000 	adcs.w	r0, r0, #0
 8000882:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800088c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000890:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000894:	bfc2      	ittt	gt
 8000896:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089e:	bd70      	popgt	{r4, r5, r6, pc}
 80008a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a4:	f04f 0e00 	mov.w	lr, #0
 80008a8:	3c01      	subs	r4, #1
 80008aa:	e690      	b.n	80005ce <__aeabi_dmul+0xde>
 80008ac:	ea45 0e06 	orr.w	lr, r5, r6
 80008b0:	e68d      	b.n	80005ce <__aeabi_dmul+0xde>
 80008b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b6:	ea94 0f0c 	teq	r4, ip
 80008ba:	bf08      	it	eq
 80008bc:	ea95 0f0c 	teqeq	r5, ip
 80008c0:	f43f af3b 	beq.w	800073a <__aeabi_dmul+0x24a>
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	d10a      	bne.n	80008e0 <__aeabi_ddiv+0x19c>
 80008ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ce:	f47f af34 	bne.w	800073a <__aeabi_dmul+0x24a>
 80008d2:	ea95 0f0c 	teq	r5, ip
 80008d6:	f47f af25 	bne.w	8000724 <__aeabi_dmul+0x234>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e72c      	b.n	800073a <__aeabi_dmul+0x24a>
 80008e0:	ea95 0f0c 	teq	r5, ip
 80008e4:	d106      	bne.n	80008f4 <__aeabi_ddiv+0x1b0>
 80008e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ea:	f43f aefd 	beq.w	80006e8 <__aeabi_dmul+0x1f8>
 80008ee:	4610      	mov	r0, r2
 80008f0:	4619      	mov	r1, r3
 80008f2:	e722      	b.n	800073a <__aeabi_dmul+0x24a>
 80008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f8:	bf18      	it	ne
 80008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fe:	f47f aec5 	bne.w	800068c <__aeabi_dmul+0x19c>
 8000902:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000906:	f47f af0d 	bne.w	8000724 <__aeabi_dmul+0x234>
 800090a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090e:	f47f aeeb 	bne.w	80006e8 <__aeabi_dmul+0x1f8>
 8000912:	e712      	b.n	800073a <__aeabi_dmul+0x24a>

08000914 <__aeabi_d2f>:
 8000914:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000918:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800091c:	bf24      	itt	cs
 800091e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000922:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000926:	d90d      	bls.n	8000944 <__aeabi_d2f+0x30>
 8000928:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800092c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000930:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000934:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000938:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800093c:	bf08      	it	eq
 800093e:	f020 0001 	biceq.w	r0, r0, #1
 8000942:	4770      	bx	lr
 8000944:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000948:	d121      	bne.n	800098e <__aeabi_d2f+0x7a>
 800094a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800094e:	bfbc      	itt	lt
 8000950:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000954:	4770      	bxlt	lr
 8000956:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800095e:	f1c2 0218 	rsb	r2, r2, #24
 8000962:	f1c2 0c20 	rsb	ip, r2, #32
 8000966:	fa10 f30c 	lsls.w	r3, r0, ip
 800096a:	fa20 f002 	lsr.w	r0, r0, r2
 800096e:	bf18      	it	ne
 8000970:	f040 0001 	orrne.w	r0, r0, #1
 8000974:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000978:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800097c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000980:	ea40 000c 	orr.w	r0, r0, ip
 8000984:	fa23 f302 	lsr.w	r3, r3, r2
 8000988:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800098c:	e7cc      	b.n	8000928 <__aeabi_d2f+0x14>
 800098e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000992:	d107      	bne.n	80009a4 <__aeabi_d2f+0x90>
 8000994:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000998:	bf1e      	ittt	ne
 800099a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800099e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009a2:	4770      	bxne	lr
 80009a4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009a8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_frsub>:
 80009b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009b8:	e002      	b.n	80009c0 <__addsf3>
 80009ba:	bf00      	nop

080009bc <__aeabi_fsub>:
 80009bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009c0 <__addsf3>:
 80009c0:	0042      	lsls	r2, r0, #1
 80009c2:	bf1f      	itttt	ne
 80009c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009c8:	ea92 0f03 	teqne	r2, r3
 80009cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009d4:	d06a      	beq.n	8000aac <__addsf3+0xec>
 80009d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009de:	bfc1      	itttt	gt
 80009e0:	18d2      	addgt	r2, r2, r3
 80009e2:	4041      	eorgt	r1, r0
 80009e4:	4048      	eorgt	r0, r1
 80009e6:	4041      	eorgt	r1, r0
 80009e8:	bfb8      	it	lt
 80009ea:	425b      	neglt	r3, r3
 80009ec:	2b19      	cmp	r3, #25
 80009ee:	bf88      	it	hi
 80009f0:	4770      	bxhi	lr
 80009f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009fe:	bf18      	it	ne
 8000a00:	4240      	negne	r0, r0
 8000a02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a06:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a0a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a0e:	bf18      	it	ne
 8000a10:	4249      	negne	r1, r1
 8000a12:	ea92 0f03 	teq	r2, r3
 8000a16:	d03f      	beq.n	8000a98 <__addsf3+0xd8>
 8000a18:	f1a2 0201 	sub.w	r2, r2, #1
 8000a1c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a20:	eb10 000c 	adds.w	r0, r0, ip
 8000a24:	f1c3 0320 	rsb	r3, r3, #32
 8000a28:	fa01 f103 	lsl.w	r1, r1, r3
 8000a2c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a30:	d502      	bpl.n	8000a38 <__addsf3+0x78>
 8000a32:	4249      	negs	r1, r1
 8000a34:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a38:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a3c:	d313      	bcc.n	8000a66 <__addsf3+0xa6>
 8000a3e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a42:	d306      	bcc.n	8000a52 <__addsf3+0x92>
 8000a44:	0840      	lsrs	r0, r0, #1
 8000a46:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a4a:	f102 0201 	add.w	r2, r2, #1
 8000a4e:	2afe      	cmp	r2, #254	; 0xfe
 8000a50:	d251      	bcs.n	8000af6 <__addsf3+0x136>
 8000a52:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a5a:	bf08      	it	eq
 8000a5c:	f020 0001 	biceq.w	r0, r0, #1
 8000a60:	ea40 0003 	orr.w	r0, r0, r3
 8000a64:	4770      	bx	lr
 8000a66:	0049      	lsls	r1, r1, #1
 8000a68:	eb40 0000 	adc.w	r0, r0, r0
 8000a6c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a70:	f1a2 0201 	sub.w	r2, r2, #1
 8000a74:	d1ed      	bne.n	8000a52 <__addsf3+0x92>
 8000a76:	fab0 fc80 	clz	ip, r0
 8000a7a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a7e:	ebb2 020c 	subs.w	r2, r2, ip
 8000a82:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a86:	bfaa      	itet	ge
 8000a88:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a8c:	4252      	neglt	r2, r2
 8000a8e:	4318      	orrge	r0, r3
 8000a90:	bfbc      	itt	lt
 8000a92:	40d0      	lsrlt	r0, r2
 8000a94:	4318      	orrlt	r0, r3
 8000a96:	4770      	bx	lr
 8000a98:	f092 0f00 	teq	r2, #0
 8000a9c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000aa0:	bf06      	itte	eq
 8000aa2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000aa6:	3201      	addeq	r2, #1
 8000aa8:	3b01      	subne	r3, #1
 8000aaa:	e7b5      	b.n	8000a18 <__addsf3+0x58>
 8000aac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ab0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ab4:	bf18      	it	ne
 8000ab6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aba:	d021      	beq.n	8000b00 <__addsf3+0x140>
 8000abc:	ea92 0f03 	teq	r2, r3
 8000ac0:	d004      	beq.n	8000acc <__addsf3+0x10c>
 8000ac2:	f092 0f00 	teq	r2, #0
 8000ac6:	bf08      	it	eq
 8000ac8:	4608      	moveq	r0, r1
 8000aca:	4770      	bx	lr
 8000acc:	ea90 0f01 	teq	r0, r1
 8000ad0:	bf1c      	itt	ne
 8000ad2:	2000      	movne	r0, #0
 8000ad4:	4770      	bxne	lr
 8000ad6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ada:	d104      	bne.n	8000ae6 <__addsf3+0x126>
 8000adc:	0040      	lsls	r0, r0, #1
 8000ade:	bf28      	it	cs
 8000ae0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ae4:	4770      	bx	lr
 8000ae6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000aea:	bf3c      	itt	cc
 8000aec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000af0:	4770      	bxcc	lr
 8000af2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000af6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000afa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afe:	4770      	bx	lr
 8000b00:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b04:	bf16      	itet	ne
 8000b06:	4608      	movne	r0, r1
 8000b08:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b0c:	4601      	movne	r1, r0
 8000b0e:	0242      	lsls	r2, r0, #9
 8000b10:	bf06      	itte	eq
 8000b12:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b16:	ea90 0f01 	teqeq	r0, r1
 8000b1a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_ui2f>:
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e004      	b.n	8000b30 <__aeabi_i2f+0x8>
 8000b26:	bf00      	nop

08000b28 <__aeabi_i2f>:
 8000b28:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b2c:	bf48      	it	mi
 8000b2e:	4240      	negmi	r0, r0
 8000b30:	ea5f 0c00 	movs.w	ip, r0
 8000b34:	bf08      	it	eq
 8000b36:	4770      	bxeq	lr
 8000b38:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b3c:	4601      	mov	r1, r0
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	e01c      	b.n	8000b7e <__aeabi_l2f+0x2a>

08000b44 <__aeabi_ul2f>:
 8000b44:	ea50 0201 	orrs.w	r2, r0, r1
 8000b48:	bf08      	it	eq
 8000b4a:	4770      	bxeq	lr
 8000b4c:	f04f 0300 	mov.w	r3, #0
 8000b50:	e00a      	b.n	8000b68 <__aeabi_l2f+0x14>
 8000b52:	bf00      	nop

08000b54 <__aeabi_l2f>:
 8000b54:	ea50 0201 	orrs.w	r2, r0, r1
 8000b58:	bf08      	it	eq
 8000b5a:	4770      	bxeq	lr
 8000b5c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b60:	d502      	bpl.n	8000b68 <__aeabi_l2f+0x14>
 8000b62:	4240      	negs	r0, r0
 8000b64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b68:	ea5f 0c01 	movs.w	ip, r1
 8000b6c:	bf02      	ittt	eq
 8000b6e:	4684      	moveq	ip, r0
 8000b70:	4601      	moveq	r1, r0
 8000b72:	2000      	moveq	r0, #0
 8000b74:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b78:	bf08      	it	eq
 8000b7a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b82:	fabc f28c 	clz	r2, ip
 8000b86:	3a08      	subs	r2, #8
 8000b88:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b8c:	db10      	blt.n	8000bb0 <__aeabi_l2f+0x5c>
 8000b8e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b92:	4463      	add	r3, ip
 8000b94:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b98:	f1c2 0220 	rsb	r2, r2, #32
 8000b9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ba0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ba4:	eb43 0002 	adc.w	r0, r3, r2
 8000ba8:	bf08      	it	eq
 8000baa:	f020 0001 	biceq.w	r0, r0, #1
 8000bae:	4770      	bx	lr
 8000bb0:	f102 0220 	add.w	r2, r2, #32
 8000bb4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bb8:	f1c2 0220 	rsb	r2, r2, #32
 8000bbc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bc0:	fa21 f202 	lsr.w	r2, r1, r2
 8000bc4:	eb43 0002 	adc.w	r0, r3, r2
 8000bc8:	bf08      	it	eq
 8000bca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bce:	4770      	bx	lr

08000bd0 <__aeabi_fmul>:
 8000bd0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bd8:	bf1e      	ittt	ne
 8000bda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bde:	ea92 0f0c 	teqne	r2, ip
 8000be2:	ea93 0f0c 	teqne	r3, ip
 8000be6:	d06f      	beq.n	8000cc8 <__aeabi_fmul+0xf8>
 8000be8:	441a      	add	r2, r3
 8000bea:	ea80 0c01 	eor.w	ip, r0, r1
 8000bee:	0240      	lsls	r0, r0, #9
 8000bf0:	bf18      	it	ne
 8000bf2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bf6:	d01e      	beq.n	8000c36 <__aeabi_fmul+0x66>
 8000bf8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bfc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c00:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c04:	fba0 3101 	umull	r3, r1, r0, r1
 8000c08:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c0c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c10:	bf3e      	ittt	cc
 8000c12:	0049      	lslcc	r1, r1, #1
 8000c14:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c18:	005b      	lslcc	r3, r3, #1
 8000c1a:	ea40 0001 	orr.w	r0, r0, r1
 8000c1e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c22:	2afd      	cmp	r2, #253	; 0xfd
 8000c24:	d81d      	bhi.n	8000c62 <__aeabi_fmul+0x92>
 8000c26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c2e:	bf08      	it	eq
 8000c30:	f020 0001 	biceq.w	r0, r0, #1
 8000c34:	4770      	bx	lr
 8000c36:	f090 0f00 	teq	r0, #0
 8000c3a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c3e:	bf08      	it	eq
 8000c40:	0249      	lsleq	r1, r1, #9
 8000c42:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c46:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c4a:	3a7f      	subs	r2, #127	; 0x7f
 8000c4c:	bfc2      	ittt	gt
 8000c4e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c52:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c56:	4770      	bxgt	lr
 8000c58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c5c:	f04f 0300 	mov.w	r3, #0
 8000c60:	3a01      	subs	r2, #1
 8000c62:	dc5d      	bgt.n	8000d20 <__aeabi_fmul+0x150>
 8000c64:	f112 0f19 	cmn.w	r2, #25
 8000c68:	bfdc      	itt	le
 8000c6a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c6e:	4770      	bxle	lr
 8000c70:	f1c2 0200 	rsb	r2, r2, #0
 8000c74:	0041      	lsls	r1, r0, #1
 8000c76:	fa21 f102 	lsr.w	r1, r1, r2
 8000c7a:	f1c2 0220 	rsb	r2, r2, #32
 8000c7e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c82:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c86:	f140 0000 	adc.w	r0, r0, #0
 8000c8a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c8e:	bf08      	it	eq
 8000c90:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c94:	4770      	bx	lr
 8000c96:	f092 0f00 	teq	r2, #0
 8000c9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c9e:	bf02      	ittt	eq
 8000ca0:	0040      	lsleq	r0, r0, #1
 8000ca2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ca6:	3a01      	subeq	r2, #1
 8000ca8:	d0f9      	beq.n	8000c9e <__aeabi_fmul+0xce>
 8000caa:	ea40 000c 	orr.w	r0, r0, ip
 8000cae:	f093 0f00 	teq	r3, #0
 8000cb2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cb6:	bf02      	ittt	eq
 8000cb8:	0049      	lsleq	r1, r1, #1
 8000cba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cbe:	3b01      	subeq	r3, #1
 8000cc0:	d0f9      	beq.n	8000cb6 <__aeabi_fmul+0xe6>
 8000cc2:	ea41 010c 	orr.w	r1, r1, ip
 8000cc6:	e78f      	b.n	8000be8 <__aeabi_fmul+0x18>
 8000cc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ccc:	ea92 0f0c 	teq	r2, ip
 8000cd0:	bf18      	it	ne
 8000cd2:	ea93 0f0c 	teqne	r3, ip
 8000cd6:	d00a      	beq.n	8000cee <__aeabi_fmul+0x11e>
 8000cd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cdc:	bf18      	it	ne
 8000cde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ce2:	d1d8      	bne.n	8000c96 <__aeabi_fmul+0xc6>
 8000ce4:	ea80 0001 	eor.w	r0, r0, r1
 8000ce8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cec:	4770      	bx	lr
 8000cee:	f090 0f00 	teq	r0, #0
 8000cf2:	bf17      	itett	ne
 8000cf4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cf8:	4608      	moveq	r0, r1
 8000cfa:	f091 0f00 	teqne	r1, #0
 8000cfe:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d02:	d014      	beq.n	8000d2e <__aeabi_fmul+0x15e>
 8000d04:	ea92 0f0c 	teq	r2, ip
 8000d08:	d101      	bne.n	8000d0e <__aeabi_fmul+0x13e>
 8000d0a:	0242      	lsls	r2, r0, #9
 8000d0c:	d10f      	bne.n	8000d2e <__aeabi_fmul+0x15e>
 8000d0e:	ea93 0f0c 	teq	r3, ip
 8000d12:	d103      	bne.n	8000d1c <__aeabi_fmul+0x14c>
 8000d14:	024b      	lsls	r3, r1, #9
 8000d16:	bf18      	it	ne
 8000d18:	4608      	movne	r0, r1
 8000d1a:	d108      	bne.n	8000d2e <__aeabi_fmul+0x15e>
 8000d1c:	ea80 0001 	eor.w	r0, r0, r1
 8000d20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d24:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d2c:	4770      	bx	lr
 8000d2e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d32:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_fdiv>:
 8000d38:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d40:	bf1e      	ittt	ne
 8000d42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d46:	ea92 0f0c 	teqne	r2, ip
 8000d4a:	ea93 0f0c 	teqne	r3, ip
 8000d4e:	d069      	beq.n	8000e24 <__aeabi_fdiv+0xec>
 8000d50:	eba2 0203 	sub.w	r2, r2, r3
 8000d54:	ea80 0c01 	eor.w	ip, r0, r1
 8000d58:	0249      	lsls	r1, r1, #9
 8000d5a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d5e:	d037      	beq.n	8000dd0 <__aeabi_fdiv+0x98>
 8000d60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d64:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d68:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	428b      	cmp	r3, r1
 8000d72:	bf38      	it	cc
 8000d74:	005b      	lslcc	r3, r3, #1
 8000d76:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d7a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	bf24      	itt	cs
 8000d82:	1a5b      	subcs	r3, r3, r1
 8000d84:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d88:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d8c:	bf24      	itt	cs
 8000d8e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d92:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d96:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d9a:	bf24      	itt	cs
 8000d9c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000da0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000da4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000da8:	bf24      	itt	cs
 8000daa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dae:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000db2:	011b      	lsls	r3, r3, #4
 8000db4:	bf18      	it	ne
 8000db6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dba:	d1e0      	bne.n	8000d7e <__aeabi_fdiv+0x46>
 8000dbc:	2afd      	cmp	r2, #253	; 0xfd
 8000dbe:	f63f af50 	bhi.w	8000c62 <__aeabi_fmul+0x92>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc8:	bf08      	it	eq
 8000dca:	f020 0001 	biceq.w	r0, r0, #1
 8000dce:	4770      	bx	lr
 8000dd0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dd4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dd8:	327f      	adds	r2, #127	; 0x7f
 8000dda:	bfc2      	ittt	gt
 8000ddc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000de0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000de4:	4770      	bxgt	lr
 8000de6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dea:	f04f 0300 	mov.w	r3, #0
 8000dee:	3a01      	subs	r2, #1
 8000df0:	e737      	b.n	8000c62 <__aeabi_fmul+0x92>
 8000df2:	f092 0f00 	teq	r2, #0
 8000df6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0040      	lsleq	r0, r0, #1
 8000dfe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e02:	3a01      	subeq	r2, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fdiv+0xc2>
 8000e06:	ea40 000c 	orr.w	r0, r0, ip
 8000e0a:	f093 0f00 	teq	r3, #0
 8000e0e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0049      	lsleq	r1, r1, #1
 8000e16:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e1a:	3b01      	subeq	r3, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fdiv+0xda>
 8000e1e:	ea41 010c 	orr.w	r1, r1, ip
 8000e22:	e795      	b.n	8000d50 <__aeabi_fdiv+0x18>
 8000e24:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e28:	ea92 0f0c 	teq	r2, ip
 8000e2c:	d108      	bne.n	8000e40 <__aeabi_fdiv+0x108>
 8000e2e:	0242      	lsls	r2, r0, #9
 8000e30:	f47f af7d 	bne.w	8000d2e <__aeabi_fmul+0x15e>
 8000e34:	ea93 0f0c 	teq	r3, ip
 8000e38:	f47f af70 	bne.w	8000d1c <__aeabi_fmul+0x14c>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	e776      	b.n	8000d2e <__aeabi_fmul+0x15e>
 8000e40:	ea93 0f0c 	teq	r3, ip
 8000e44:	d104      	bne.n	8000e50 <__aeabi_fdiv+0x118>
 8000e46:	024b      	lsls	r3, r1, #9
 8000e48:	f43f af4c 	beq.w	8000ce4 <__aeabi_fmul+0x114>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	e76e      	b.n	8000d2e <__aeabi_fmul+0x15e>
 8000e50:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e54:	bf18      	it	ne
 8000e56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	d1ca      	bne.n	8000df2 <__aeabi_fdiv+0xba>
 8000e5c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e60:	f47f af5c 	bne.w	8000d1c <__aeabi_fmul+0x14c>
 8000e64:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e68:	f47f af3c 	bne.w	8000ce4 <__aeabi_fmul+0x114>
 8000e6c:	e75f      	b.n	8000d2e <__aeabi_fmul+0x15e>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_f2iz>:
 8000e70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e74:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e78:	d30f      	bcc.n	8000e9a <__aeabi_f2iz+0x2a>
 8000e7a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e7e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e82:	d90d      	bls.n	8000ea0 <__aeabi_f2iz+0x30>
 8000e84:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e8c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e90:	fa23 f002 	lsr.w	r0, r3, r2
 8000e94:	bf18      	it	ne
 8000e96:	4240      	negne	r0, r0
 8000e98:	4770      	bx	lr
 8000e9a:	f04f 0000 	mov.w	r0, #0
 8000e9e:	4770      	bx	lr
 8000ea0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ea4:	d101      	bne.n	8000eaa <__aeabi_f2iz+0x3a>
 8000ea6:	0242      	lsls	r2, r0, #9
 8000ea8:	d105      	bne.n	8000eb6 <__aeabi_f2iz+0x46>
 8000eaa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000eae:	bf08      	it	eq
 8000eb0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f04f 0000 	mov.w	r0, #0
 8000eba:	4770      	bx	lr

08000ebc <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73bb      	strb	r3, [r7, #14]
 8000ecc:	230f      	movs	r3, #15
 8000ece:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	78db      	ldrb	r3, [r3, #3]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d038      	beq.n	8000f4a <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000ed8:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <NVIC_Init+0xb8>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	43db      	mvns	r3, r3
 8000ede:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000ee2:	0a1b      	lsrs	r3, r3, #8
 8000ee4:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	f1c3 0304 	rsb	r3, r3, #4
 8000eec:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000eee:	7b7a      	ldrb	r2, [r7, #13]
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	fa42 f303 	asr.w	r3, r2, r3
 8000ef6:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	785b      	ldrb	r3, [r3, #1]
 8000efc:	461a      	mov	r2, r3
 8000efe:	7bbb      	ldrb	r3, [r7, #14]
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	789a      	ldrb	r2, [r3, #2]
 8000f0a:	7b7b      	ldrb	r3, [r7, #13]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	011b      	lsls	r3, r3, #4
 8000f1a:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000f1c:	4a16      	ldr	r2, [pc, #88]	; (8000f78 <NVIC_Init+0xbc>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	7bfa      	ldrb	r2, [r7, #15]
 8000f26:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f2a:	4a13      	ldr	r2, [pc, #76]	; (8000f78 <NVIC_Init+0xbc>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	095b      	lsrs	r3, r3, #5
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	f003 031f 	and.w	r3, r3, #31
 8000f3e:	2101      	movs	r1, #1
 8000f40:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f44:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000f48:	e00f      	b.n	8000f6a <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f4a:	490b      	ldr	r1, [pc, #44]	; (8000f78 <NVIC_Init+0xbc>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	095b      	lsrs	r3, r3, #5
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	f003 031f 	and.w	r3, r3, #31
 8000f5e:	2201      	movs	r2, #1
 8000f60:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f62:	f100 0320 	add.w	r3, r0, #32
 8000f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00
 8000f78:	e000e100 	.word	0xe000e100

08000f7c <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b087      	sub	sp, #28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
 8000f96:	e07e      	b.n	8001096 <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d16d      	bne.n	8001090 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	2103      	movs	r1, #3
 8000fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	401a      	ands	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	791b      	ldrb	r3, [r3, #4]
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	791b      	ldrb	r3, [r3, #4]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d003      	beq.n	8000ff2 <GPIO_Init+0x76>
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	791b      	ldrb	r3, [r3, #4]
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d136      	bne.n	8001060 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	2103      	movs	r1, #3
 8000ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	401a      	ands	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	795b      	ldrb	r3, [r3, #5]
 8001010:	4619      	mov	r1, r3
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	431a      	orrs	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	889b      	ldrh	r3, [r3, #4]
 8001024:	b29a      	uxth	r2, r3
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	b29b      	uxth	r3, r3
 800102a:	2101      	movs	r1, #1
 800102c:	fa01 f303 	lsl.w	r3, r1, r3
 8001030:	b29b      	uxth	r3, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	b29b      	uxth	r3, r3
 8001036:	4013      	ands	r3, r2
 8001038:	b29a      	uxth	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	889b      	ldrh	r3, [r3, #4]
 8001042:	b29b      	uxth	r3, r3
 8001044:	b21a      	sxth	r2, r3
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	799b      	ldrb	r3, [r3, #6]
 800104a:	4619      	mov	r1, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	b29b      	uxth	r3, r3
 8001050:	fa01 f303 	lsl.w	r3, r1, r3
 8001054:	b21b      	sxth	r3, r3
 8001056:	4313      	orrs	r3, r2
 8001058:	b21b      	sxth	r3, r3
 800105a:	b29a      	uxth	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68da      	ldr	r2, [r3, #12]
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	b29b      	uxth	r3, r3
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2103      	movs	r1, #3
 800106c:	fa01 f303 	lsl.w	r3, r1, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	401a      	ands	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68da      	ldr	r2, [r3, #12]
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	79db      	ldrb	r3, [r3, #7]
 8001080:	4619      	mov	r1, r3
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	fa01 f303 	lsl.w	r3, r1, r3
 800108a:	431a      	orrs	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	3301      	adds	r3, #1
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	2b0f      	cmp	r3, #15
 800109a:	f67f af7d 	bls.w	8000f98 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800109e:	bf00      	nop
 80010a0:	371c      	adds	r7, #28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr

080010a8 <GPIO_SetBits>:
  *        accesses. In this way, there is no risk of an IRQ occurring between
  *        the read and the modify access.
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRRL = GPIO_Pin;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	887a      	ldrh	r2, [r7, #2]
 80010b8:	831a      	strh	r2, [r3, #24]
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <GPIO_ResetBits>:
  *        accesses. In this way, there is no risk of an IRQ occurring between
  *        the read and the modify access.
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRRH = GPIO_Pin;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	887a      	ldrh	r2, [r7, #2]
 80010d4:	835a      	strh	r2, [r3, #26]
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr

080010e0 <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	807b      	strh	r3, [r7, #2]
 80010ec:	4613      	mov	r3, r2
 80010ee:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80010f8:	787a      	ldrb	r2, [r7, #1]
 80010fa:	887b      	ldrh	r3, [r7, #2]
 80010fc:	f003 0307 	and.w	r3, r3, #7
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001108:	887b      	ldrh	r3, [r7, #2]
 800110a:	08db      	lsrs	r3, r3, #3
 800110c:	b29b      	uxth	r3, r3
 800110e:	4618      	mov	r0, r3
 8001110:	887b      	ldrh	r3, [r7, #2]
 8001112:	08db      	lsrs	r3, r3, #3
 8001114:	b29b      	uxth	r3, r3
 8001116:	461a      	mov	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3208      	adds	r2, #8
 800111c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001120:	887b      	ldrh	r3, [r7, #2]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	210f      	movs	r1, #15
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	ea02 0103 	and.w	r1, r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f100 0208 	add.w	r2, r0, #8
 800113a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800113e:	887b      	ldrh	r3, [r7, #2]
 8001140:	08db      	lsrs	r3, r3, #3
 8001142:	b29b      	uxth	r3, r3
 8001144:	461a      	mov	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3208      	adds	r2, #8
 800114a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4313      	orrs	r3, r2
 8001152:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001154:	887b      	ldrh	r3, [r7, #2]
 8001156:	08db      	lsrs	r3, r3, #3
 8001158:	b29b      	uxth	r3, r3
 800115a:	461a      	mov	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3208      	adds	r2, #8
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001166:	bf00      	nop
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr

08001170 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	; 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, presc = 0, msirange = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
 800117c:	2300      	movs	r3, #0
 800117e:	61bb      	str	r3, [r7, #24]
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001190:	4b5f      	ldr	r3, [pc, #380]	; (8001310 <RCC_GetClocksFreq+0x1a0>)
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f003 030c 	and.w	r3, r3, #12
 8001198:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	2b0c      	cmp	r3, #12
 800119e:	d865      	bhi.n	800126c <RCC_GetClocksFreq+0xfc>
 80011a0:	a201      	add	r2, pc, #4	; (adr r2, 80011a8 <RCC_GetClocksFreq+0x38>)
 80011a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a6:	bf00      	nop
 80011a8:	080011dd 	.word	0x080011dd
 80011ac:	0800126d 	.word	0x0800126d
 80011b0:	0800126d 	.word	0x0800126d
 80011b4:	0800126d 	.word	0x0800126d
 80011b8:	080011fd 	.word	0x080011fd
 80011bc:	0800126d 	.word	0x0800126d
 80011c0:	0800126d 	.word	0x0800126d
 80011c4:	0800126d 	.word	0x0800126d
 80011c8:	08001205 	.word	0x08001205
 80011cc:	0800126d 	.word	0x0800126d
 80011d0:	0800126d 	.word	0x0800126d
 80011d4:	0800126d 	.word	0x0800126d
 80011d8:	0800120d 	.word	0x0800120d
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 80011dc:	4b4c      	ldr	r3, [pc, #304]	; (8001310 <RCC_GetClocksFreq+0x1a0>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80011e4:	0b5b      	lsrs	r3, r3, #13
 80011e6:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	3301      	adds	r3, #1
 80011ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	461a      	mov	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	601a      	str	r2, [r3, #0]
      break;
 80011fa:	e047      	b.n	800128c <RCC_GetClocksFreq+0x11c>
    case 0x04:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a45      	ldr	r2, [pc, #276]	; (8001314 <RCC_GetClocksFreq+0x1a4>)
 8001200:	601a      	str	r2, [r3, #0]
      break;
 8001202:	e043      	b.n	800128c <RCC_GetClocksFreq+0x11c>
    case 0x08:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a44      	ldr	r2, [pc, #272]	; (8001318 <RCC_GetClocksFreq+0x1a8>)
 8001208:	601a      	str	r2, [r3, #0]
      break;
 800120a:	e03f      	b.n	800128c <RCC_GetClocksFreq+0x11c>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 800120c:	4b40      	ldr	r3, [pc, #256]	; (8001310 <RCC_GetClocksFreq+0x1a0>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001214:	61bb      	str	r3, [r7, #24]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8001216:	4b3e      	ldr	r3, [pc, #248]	; (8001310 <RCC_GetClocksFreq+0x1a0>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800121e:	617b      	str	r3, [r7, #20]
      pllmul = PLLMulTable[(pllmul >> 18)];
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	0c9b      	lsrs	r3, r3, #18
 8001224:	4a3d      	ldr	r2, [pc, #244]	; (800131c <RCC_GetClocksFreq+0x1ac>)
 8001226:	5cd3      	ldrb	r3, [r2, r3]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	61bb      	str	r3, [r7, #24]
      plldiv = (plldiv >> 22) + 1;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	0d9b      	lsrs	r3, r3, #22
 8001230:	3301      	adds	r3, #1
 8001232:	617b      	str	r3, [r7, #20]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001234:	4b36      	ldr	r3, [pc, #216]	; (8001310 <RCC_GetClocksFreq+0x1a0>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800123c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d109      	bne.n	8001258 <RCC_GetClocksFreq+0xe8>
      {
        /* HSI oscillator clock selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	4a33      	ldr	r2, [pc, #204]	; (8001314 <RCC_GetClocksFreq+0x1a4>)
 8001248:	fb02 f203 	mul.w	r2, r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8001256:	e019      	b.n	800128c <RCC_GetClocksFreq+0x11c>
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	4a2f      	ldr	r2, [pc, #188]	; (8001318 <RCC_GetClocksFreq+0x1a8>)
 800125c:	fb02 f203 	mul.w	r2, r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fbb2 f2f3 	udiv	r2, r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	601a      	str	r2, [r3, #0]
      }
      break;
 800126a:	e00f      	b.n	800128c <RCC_GetClocksFreq+0x11c>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 800126c:	4b28      	ldr	r3, [pc, #160]	; (8001310 <RCC_GetClocksFreq+0x1a0>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001274:	0b5b      	lsrs	r3, r3, #13
 8001276:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	3301      	adds	r3, #1
 800127c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	461a      	mov	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	601a      	str	r2, [r3, #0]
      break;
 800128a:	bf00      	nop
  }
  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800128c:	4b20      	ldr	r3, [pc, #128]	; (8001310 <RCC_GetClocksFreq+0x1a0>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001294:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	091b      	lsrs	r3, r3, #4
 800129a:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp]; 
 800129c:	4a20      	ldr	r2, [pc, #128]	; (8001320 <RCC_GetClocksFreq+0x1b0>)
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	4413      	add	r3, r2
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	40da      	lsrs	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80012b4:	4b16      	ldr	r3, [pc, #88]	; (8001310 <RCC_GetClocksFreq+0x1a0>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80012bc:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	0a1b      	lsrs	r3, r3, #8
 80012c2:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80012c4:	4a16      	ldr	r2, [pc, #88]	; (8001320 <RCC_GetClocksFreq+0x1b0>)
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	4413      	add	r3, r2
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	60fb      	str	r3, [r7, #12]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	40da      	lsrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <RCC_GetClocksFreq+0x1a0>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80012e4:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	0adb      	lsrs	r3, r3, #11
 80012ea:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80012ec:	4a0c      	ldr	r2, [pc, #48]	; (8001320 <RCC_GetClocksFreq+0x1b0>)
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	4413      	add	r3, r2
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	40da      	lsrs	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	60da      	str	r2, [r3, #12]
}
 8001304:	bf00      	nop
 8001306:	3724      	adds	r7, #36	; 0x24
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800
 8001314:	00f42400 	.word	0x00f42400
 8001318:	007a1200 	.word	0x007a1200
 800131c:	20000000 	.word	0x20000000
 8001320:	2000000c 	.word	0x2000000c

08001324 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001330:	78fb      	ldrb	r3, [r7, #3]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d006      	beq.n	8001344 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001336:	4909      	ldr	r1, [pc, #36]	; (800135c <RCC_AHBPeriphClockCmd+0x38>)
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <RCC_AHBPeriphClockCmd+0x38>)
 800133a:	69da      	ldr	r2, [r3, #28]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4313      	orrs	r3, r2
 8001340:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8001342:	e006      	b.n	8001352 <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001344:	4905      	ldr	r1, [pc, #20]	; (800135c <RCC_AHBPeriphClockCmd+0x38>)
 8001346:	4b05      	ldr	r3, [pc, #20]	; (800135c <RCC_AHBPeriphClockCmd+0x38>)
 8001348:	69da      	ldr	r2, [r3, #28]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	43db      	mvns	r3, r3
 800134e:	4013      	ands	r3, r2
 8001350:	61cb      	str	r3, [r1, #28]
  }
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	40023800 	.word	0x40023800

08001360 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800136c:	78fb      	ldrb	r3, [r7, #3]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d006      	beq.n	8001380 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001372:	4909      	ldr	r1, [pc, #36]	; (8001398 <RCC_APB2PeriphClockCmd+0x38>)
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <RCC_APB2PeriphClockCmd+0x38>)
 8001376:	6a1a      	ldr	r2, [r3, #32]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4313      	orrs	r3, r2
 800137c:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800137e:	e006      	b.n	800138e <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001380:	4905      	ldr	r1, [pc, #20]	; (8001398 <RCC_APB2PeriphClockCmd+0x38>)
 8001382:	4b05      	ldr	r3, [pc, #20]	; (8001398 <RCC_APB2PeriphClockCmd+0x38>)
 8001384:	6a1a      	ldr	r2, [r3, #32]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	43db      	mvns	r3, r3
 800138a:	4013      	ands	r3, r2
 800138c:	620b      	str	r3, [r1, #32]
  }
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	40023800 	.word	0x40023800

0800139c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80013a8:	78fb      	ldrb	r3, [r7, #3]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d006      	beq.n	80013bc <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80013ae:	4909      	ldr	r1, [pc, #36]	; (80013d4 <RCC_APB1PeriphClockCmd+0x38>)
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <RCC_APB1PeriphClockCmd+0x38>)
 80013b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80013ba:	e006      	b.n	80013ca <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80013bc:	4905      	ldr	r1, [pc, #20]	; (80013d4 <RCC_APB1PeriphClockCmd+0x38>)
 80013be:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <RCC_APB1PeriphClockCmd+0x38>)
 80013c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	4013      	ands	r3, r2
 80013c8:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	40023800 	.word	0x40023800

080013d8 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 80013ec:	89fb      	ldrh	r3, [r7, #14]
 80013ee:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80013f2:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	881a      	ldrh	r2, [r3, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	885b      	ldrh	r3, [r3, #2]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001404:	4313      	orrs	r3, r2
 8001406:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800140c:	4313      	orrs	r3, r2
 800140e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001414:	4313      	orrs	r3, r2
 8001416:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800141c:	4313      	orrs	r3, r2
 800141e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001424:	4313      	orrs	r3, r2
 8001426:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800142c:	4313      	orrs	r3, r2
 800142e:	b29a      	uxth	r2, r3
 8001430:	89fb      	ldrh	r3, [r7, #14]
 8001432:	4313      	orrs	r3, r2
 8001434:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	89fa      	ldrh	r2, [r7, #14]
 800143a:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	8b9b      	ldrh	r3, [r3, #28]
 8001440:	b29b      	uxth	r3, r3
 8001442:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001446:	b29a      	uxth	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	8a1a      	ldrh	r2, [r3, #16]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	821a      	strh	r2, [r3, #16]
}
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop

08001460 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d008      	beq.n	8001484 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	b29b      	uxth	r3, r3
 8001478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800147c:	b29a      	uxth	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 8001482:	e007      	b.n	8001494 <SPI_Cmd+0x34>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	b29b      	uxth	r3, r3
 800148a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800148e:	b29a      	uxth	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	801a      	strh	r2, [r3, #0]
  }
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop

080014a0 <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3
  *         in SPI mode or 2 or 3 in I2S mode.
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	899b      	ldrh	r3, [r3, #12]
 80014ac:	b29b      	uxth	r3, r3
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	887a      	ldrh	r2, [r7, #2]
 80014c8:	819a      	strh	r2, [r3, #12]
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80014e0:	2300      	movs	r3, #0
 80014e2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	891b      	ldrh	r3, [r3, #8]
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	887b      	ldrh	r3, [r7, #2]
 80014ec:	4013      	ands	r3, r2
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d002      	beq.n	80014fa <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80014f4:	2301      	movs	r3, #1
 80014f6:	73fb      	strb	r3, [r7, #15]
 80014f8:	e001      	b.n	80014fe <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop

0800150c <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	81fb      	strh	r3, [r7, #14]

  if(((TIMx) == TIM2) || ((TIMx) == TIM3) || ((TIMx) == TIM4) || ((TIMx) == TIM5))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001526:	d00b      	beq.n	8001540 <TIM_TimeBaseInit+0x34>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a1c      	ldr	r2, [pc, #112]	; (800159c <TIM_TimeBaseInit+0x90>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d007      	beq.n	8001540 <TIM_TimeBaseInit+0x34>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a1b      	ldr	r2, [pc, #108]	; (80015a0 <TIM_TimeBaseInit+0x94>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d003      	beq.n	8001540 <TIM_TimeBaseInit+0x34>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a1a      	ldr	r2, [pc, #104]	; (80015a4 <TIM_TimeBaseInit+0x98>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d108      	bne.n	8001552 <TIM_TimeBaseInit+0x46>
  {											
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8001540:	89fb      	ldrh	r3, [r7, #14]
 8001542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001546:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	885a      	ldrh	r2, [r3, #2]
 800154c:	89fb      	ldrh	r3, [r7, #14]
 800154e:	4313      	orrs	r3, r2
 8001550:	81fb      	strh	r3, [r7, #14]
  }
 
  if(((TIMx) != TIM6) && ((TIMx) != TIM7))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a14      	ldr	r2, [pc, #80]	; (80015a8 <TIM_TimeBaseInit+0x9c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d00c      	beq.n	8001574 <TIM_TimeBaseInit+0x68>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a13      	ldr	r2, [pc, #76]	; (80015ac <TIM_TimeBaseInit+0xa0>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d008      	beq.n	8001574 <TIM_TimeBaseInit+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8001562:	89fb      	ldrh	r3, [r7, #14]
 8001564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001568:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	891a      	ldrh	r2, [r3, #8]
 800156e:	89fb      	ldrh	r3, [r7, #14]
 8001570:	4313      	orrs	r3, r2
 8001572:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	89fa      	ldrh	r2, [r7, #14]
 8001578:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	881a      	ldrh	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	851a      	strh	r2, [r3, #40]	; 0x28
    
  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	829a      	strh	r2, [r3, #20]
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40000400 	.word	0x40000400
 80015a0:	40000800 	.word	0x40000800
 80015a4:	40000c00 	.word	0x40000c00
 80015a8:	40001000 	.word	0x40001000
 80015ac:	40001400 	.word	0x40001400

080015b0 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80015bc:	78fb      	ldrb	r3, [r7, #3]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d008      	beq.n	80015d4 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 80015d2:	e007      	b.n	80015e4 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	b29b      	uxth	r3, r3
 80015da:	f023 0301 	bic.w	r3, r3, #1
 80015de:	b29a      	uxth	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	801a      	strh	r2, [r3, #0]
  }
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop

080015f0 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	807b      	strh	r3, [r7, #2]
 80015fc:	4613      	mov	r3, r2
 80015fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001600:	787b      	ldrb	r3, [r7, #1]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d008      	beq.n	8001618 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	899b      	ldrh	r3, [r3, #12]
 800160a:	b29a      	uxth	r2, r3
 800160c:	887b      	ldrh	r3, [r7, #2]
 800160e:	4313      	orrs	r3, r2
 8001610:	b29a      	uxth	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8001616:	e009      	b.n	800162c <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	899b      	ldrh	r3, [r3, #12]
 800161c:	b29a      	uxth	r2, r3
 800161e:	887b      	ldrh	r3, [r7, #2]
 8001620:	43db      	mvns	r3, r3
 8001622:	b29b      	uxth	r3, r3
 8001624:	4013      	ands	r3, r2
 8001626:	b29a      	uxth	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	819a      	strh	r2, [r3, #12]
  }
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop

08001638 <TIM_GetITStatus>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_FLAG_CC1
  *     interrupt      
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8001644:	2300      	movs	r3, #0
 8001646:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8001648:	2300      	movs	r3, #0
 800164a:	81bb      	strh	r3, [r7, #12]
 800164c:	2300      	movs	r3, #0
 800164e:	817b      	strh	r3, [r7, #10]
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	8a1b      	ldrh	r3, [r3, #16]
 8001654:	b29a      	uxth	r2, r3
 8001656:	887b      	ldrh	r3, [r7, #2]
 8001658:	4013      	ands	r3, r2
 800165a:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	899b      	ldrh	r3, [r3, #12]
 8001660:	b29a      	uxth	r2, r3
 8001662:	887b      	ldrh	r3, [r7, #2]
 8001664:	4013      	ands	r3, r2
 8001666:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8001668:	89bb      	ldrh	r3, [r7, #12]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d005      	beq.n	800167a <TIM_GetITStatus+0x42>
 800166e:	897b      	ldrh	r3, [r7, #10]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d002      	beq.n	800167a <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8001674:	2301      	movs	r3, #1
 8001676:	73fb      	strb	r3, [r7, #15]
 8001678:	e001      	b.n	800167e <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800167a:	2300      	movs	r3, #0
 800167c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800167e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop

0800168c <TIM_ClearITPendingBit>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_IT_CC1
  *     interrupt        
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001698:	887b      	ldrh	r3, [r7, #2]
 800169a:	43db      	mvns	r3, r3
 800169c:	b29a      	uxth	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	821a      	strh	r2, [r3, #16]
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr

080016ac <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that 
  *        contains the configuration information for the specified USART peripheral.
  * @retval None.
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	; 0x28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80016b6:	2300      	movs	r3, #0
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
 80016ba:	2300      	movs	r3, #0
 80016bc:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }
   
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	8a1b      	ldrh	r3, [r3, #16]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	88db      	ldrh	r3, [r3, #6]
 80016da:	461a      	mov	r2, r3
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	4313      	orrs	r3, r2
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	899b      	ldrh	r3, [r3, #12]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80016f8:	f023 030c 	bic.w	r3, r3, #12
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	889a      	ldrh	r2, [r3, #4]
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	891b      	ldrh	r3, [r3, #8]
 8001706:	4313      	orrs	r3, r2
 8001708:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800170e:	4313      	orrs	r3, r2
 8001710:	b29b      	uxth	r3, r3
 8001712:	461a      	mov	r2, r3
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	4313      	orrs	r3, r2
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	b29a      	uxth	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	8a9b      	ldrh	r3, [r3, #20]
 8001726:	b29b      	uxth	r3, r3
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001730:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	899b      	ldrh	r3, [r3, #12]
 8001736:	461a      	mov	r2, r3
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	4313      	orrs	r3, r2
 800173c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	b29a      	uxth	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001746:	f107 0308 	add.w	r3, r7, #8
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fd10 	bl	8001170 <RCC_GetClocksFreq>
  if (USARTx == USART1) 
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a2e      	ldr	r2, [pc, #184]	; (800180c <USART_Init+0x160>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d102      	bne.n	800175e <USART_Init+0xb2>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	623b      	str	r3, [r7, #32]
 800175c:	e001      	b.n	8001762 <USART_Init+0xb6>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	623b      	str	r3, [r7, #32]
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	899b      	ldrh	r3, [r3, #12]
 8001766:	b29b      	uxth	r3, r3
 8001768:	b21b      	sxth	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	da0c      	bge.n	8001788 <USART_Init+0xdc>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800176e:	6a3a      	ldr	r2, [r7, #32]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	009a      	lsls	r2, r3, #2
 8001778:	441a      	add	r2, r3
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	fbb2 f3f3 	udiv	r3, r2, r3
 8001784:	61fb      	str	r3, [r7, #28]
 8001786:	e00b      	b.n	80017a0 <USART_Init+0xf4>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001788:	6a3a      	ldr	r2, [r7, #32]
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	009a      	lsls	r2, r3, #2
 8001792:	441a      	add	r2, r3
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	fbb2 f3f3 	udiv	r3, r2, r3
 800179e:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	4a1b      	ldr	r2, [pc, #108]	; (8001810 <USART_Init+0x164>)
 80017a4:	fba2 2303 	umull	r2, r3, r2, r3
 80017a8:	095b      	lsrs	r3, r3, #5
 80017aa:	011b      	lsls	r3, r3, #4
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	2264      	movs	r2, #100	; 0x64
 80017b4:	fb02 f303 	mul.w	r3, r2, r3
 80017b8:	69fa      	ldr	r2, [r7, #28]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	899b      	ldrh	r3, [r3, #12]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	b21b      	sxth	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	da0c      	bge.n	80017e4 <USART_Init+0x138>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	3332      	adds	r3, #50	; 0x32
 80017d0:	4a0f      	ldr	r2, [pc, #60]	; (8001810 <USART_Init+0x164>)
 80017d2:	fba2 2303 	umull	r2, r3, r2, r3
 80017d6:	095b      	lsrs	r3, r3, #5
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017de:	4313      	orrs	r3, r2
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
 80017e2:	e00b      	b.n	80017fc <USART_Init+0x150>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	011b      	lsls	r3, r3, #4
 80017e8:	3332      	adds	r3, #50	; 0x32
 80017ea:	4a09      	ldr	r2, [pc, #36]	; (8001810 <USART_Init+0x164>)
 80017ec:	fba2 2303 	umull	r2, r3, r2, r3
 80017f0:	095b      	lsrs	r3, r3, #5
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f8:	4313      	orrs	r3, r2
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  }
 
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	b29a      	uxth	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	811a      	strh	r2, [r3, #8]
}
 8001804:	bf00      	nop
 8001806:	3728      	adds	r7, #40	; 0x28
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40013800 	.word	0x40013800
 8001810:	51eb851f 	.word	0x51eb851f

08001814 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001820:	78fb      	ldrb	r3, [r7, #3]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d008      	beq.n	8001838 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	899b      	ldrh	r3, [r3, #12]
 800182a:	b29b      	uxth	r3, r3
 800182c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001830:	b29a      	uxth	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8001836:	e007      	b.n	8001848 <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	899b      	ldrh	r3, [r3, #12]
 800183c:	b29b      	uxth	r3, r3
 800183e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001842:	b29a      	uxth	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	819a      	strh	r2, [r3, #12]
  }
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop

08001854 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None.
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001860:	887b      	ldrh	r3, [r7, #2]
 8001862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001866:	b29a      	uxth	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	809a      	strh	r2, [r3, #4]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop

08001878 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag.
  *     @arg USART_FLAG_PE:   Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001884:	2300      	movs	r3, #0
 8001886:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	b29a      	uxth	r2, r3
 800188e:	887b      	ldrh	r3, [r7, #2]
 8001890:	4013      	ands	r3, r2
 8001892:	b29b      	uxth	r3, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	d002      	beq.n	800189e <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8001898:	2301      	movs	r3, #1
 800189a:	73fb      	strb	r3, [r7, #15]
 800189c:	e001      	b.n	80018a2 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 800189e:	2300      	movs	r3, #0
 80018a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop

080018b0 <mpu9250_init>:
 */
#include <MPU_9250.h>

#define MPU_InitRegNum 17

uint8_t  mpu9250_init(int sample_rate_div,int low_pass_filter){
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08c      	sub	sp, #48	; 0x30
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
    uint8_t i = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    init_SPI1();
 80018c0:	f000 fbb2 	bl	8002028 <init_SPI1>
    sleep(SLEEP_500_ms);
 80018c4:	484e      	ldr	r0, [pc, #312]	; (8001a00 <mpu9250_init+0x150>)
 80018c6:	f04f 0100 	mov.w	r1, #0
 80018ca:	f000 fcd3 	bl	8002274 <sleep>
    uint8_t MPU_Init_Data[MPU_InitRegNum][2] = {
 80018ce:	2380      	movs	r3, #128	; 0x80
 80018d0:	733b      	strb	r3, [r7, #12]
 80018d2:	236b      	movs	r3, #107	; 0x6b
 80018d4:	737b      	strb	r3, [r7, #13]
 80018d6:	2301      	movs	r3, #1
 80018d8:	73bb      	strb	r3, [r7, #14]
 80018da:	236b      	movs	r3, #107	; 0x6b
 80018dc:	73fb      	strb	r3, [r7, #15]
 80018de:	2300      	movs	r3, #0
 80018e0:	743b      	strb	r3, [r7, #16]
 80018e2:	236c      	movs	r3, #108	; 0x6c
 80018e4:	747b      	strb	r3, [r7, #17]
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	74bb      	strb	r3, [r7, #18]
 80018ec:	231a      	movs	r3, #26
 80018ee:	74fb      	strb	r3, [r7, #19]
 80018f0:	2318      	movs	r3, #24
 80018f2:	753b      	strb	r3, [r7, #20]
 80018f4:	231b      	movs	r3, #27
 80018f6:	757b      	strb	r3, [r7, #21]
 80018f8:	2308      	movs	r3, #8
 80018fa:	75bb      	strb	r3, [r7, #22]
 80018fc:	231c      	movs	r3, #28
 80018fe:	75fb      	strb	r3, [r7, #23]
 8001900:	2309      	movs	r3, #9
 8001902:	763b      	strb	r3, [r7, #24]
 8001904:	231d      	movs	r3, #29
 8001906:	767b      	strb	r3, [r7, #25]
 8001908:	2330      	movs	r3, #48	; 0x30
 800190a:	76bb      	strb	r3, [r7, #26]
 800190c:	2337      	movs	r3, #55	; 0x37
 800190e:	76fb      	strb	r3, [r7, #27]
 8001910:	2320      	movs	r3, #32
 8001912:	773b      	strb	r3, [r7, #28]
 8001914:	236a      	movs	r3, #106	; 0x6a
 8001916:	777b      	strb	r3, [r7, #29]
 8001918:	230d      	movs	r3, #13
 800191a:	77bb      	strb	r3, [r7, #30]
 800191c:	2324      	movs	r3, #36	; 0x24
 800191e:	77fb      	strb	r3, [r7, #31]
 8001920:	230c      	movs	r3, #12
 8001922:	f887 3020 	strb.w	r3, [r7, #32]
 8001926:	2325      	movs	r3, #37	; 0x25
 8001928:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800192c:	230b      	movs	r3, #11
 800192e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001932:	2326      	movs	r3, #38	; 0x26
 8001934:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001938:	2301      	movs	r3, #1
 800193a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800193e:	2363      	movs	r3, #99	; 0x63
 8001940:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001944:	2381      	movs	r3, #129	; 0x81
 8001946:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800194a:	2327      	movs	r3, #39	; 0x27
 800194c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001950:	230a      	movs	r3, #10
 8001952:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001956:	2326      	movs	r3, #38	; 0x26
 8001958:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800195c:	2312      	movs	r3, #18
 800195e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8001962:	2363      	movs	r3, #99	; 0x63
 8001964:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001968:	2381      	movs	r3, #129	; 0x81
 800196a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800196e:	2327      	movs	r3, #39	; 0x27
 8001970:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        {AK8963_CNTL1, MPUREG_I2C_SLV0_REG}, //I2C slave 0 register address from where to begin data transfer
        {0x12, MPUREG_I2C_SLV0_DO}, // Register value to continuous measurement in 16bit
        {0x81, MPUREG_I2C_SLV0_CTRL}  //Enable I2C and set 1 byte

    };
    for(i=0; i<MPU_InitRegNum; i++) {
 8001974:	2300      	movs	r3, #0
 8001976:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800197a:	e01e      	b.n	80019ba <mpu9250_init+0x10a>
    	write_reg(MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
 800197c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001986:	4413      	add	r3, r2
 8001988:	f813 2c23 	ldrb.w	r2, [r3, #-35]
 800198c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001996:	440b      	add	r3, r1
 8001998:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800199c:	4619      	mov	r1, r3
 800199e:	4610      	mov	r0, r2
 80019a0:	f000 fba2 	bl	80020e8 <write_reg>
        sleep(SLEEP_2_ms);  //I2C must slow down the write speed, otherwise it won't work
 80019a4:	f44f 60b9 	mov.w	r0, #1480	; 0x5c8
 80019a8:	f04f 0100 	mov.w	r1, #0
 80019ac:	f000 fc62 	bl	8002274 <sleep>
        {AK8963_CNTL1, MPUREG_I2C_SLV0_REG}, //I2C slave 0 register address from where to begin data transfer
        {0x12, MPUREG_I2C_SLV0_DO}, // Register value to continuous measurement in 16bit
        {0x81, MPUREG_I2C_SLV0_CTRL}  //Enable I2C and set 1 byte

    };
    for(i=0; i<MPU_InitRegNum; i++) {
 80019b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019b4:	3301      	adds	r3, #1
 80019b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80019ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019be:	2b10      	cmp	r3, #16
 80019c0:	d9dc      	bls.n	800197c <mpu9250_init+0xcc>
    	write_reg(MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
        sleep(SLEEP_2_ms);  //I2C must slow down the write speed, otherwise it won't work
    }

    set_gyro_scale(BITS_FS_2000DPS);    //Set full scale range for gyroscope
 80019c2:	2018      	movs	r0, #24
 80019c4:	f000 f8c8 	bl	8001b58 <set_gyro_scale>
    set_acc_scale(BITS_FS_4G);
 80019c8:	2008      	movs	r0, #8
 80019ca:	f000 f81d 	bl	8001a08 <set_acc_scale>
    for(i=0; i<3; i++) {
 80019ce:	2300      	movs	r3, #0
 80019d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80019d4:	e00b      	b.n	80019ee <mpu9250_init+0x13e>
    	gyroscope_data_avg[i] = 0;
 80019d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <mpu9250_init+0x154>)
 80019dc:	f04f 0100 	mov.w	r1, #0
 80019e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        sleep(SLEEP_2_ms);  //I2C must slow down the write speed, otherwise it won't work
    }

    set_gyro_scale(BITS_FS_2000DPS);    //Set full scale range for gyroscope
    set_acc_scale(BITS_FS_4G);
    for(i=0; i<3; i++) {
 80019e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019e8:	3301      	adds	r3, #1
 80019ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80019ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d9ef      	bls.n	80019d6 <mpu9250_init+0x126>
    	gyroscope_data_avg[i] = 0;
    }
    return 0;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3730      	adds	r7, #48	; 0x30
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	0005a550 	.word	0x0005a550
 8001a04:	20000054 	.word	0x20000054

08001a08 <set_acc_scale>:

uint32_t  set_acc_scale(int scale){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
    unsigned int temp_scale;
    write_reg(MPUREG_ACCEL_CONFIG, scale);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	4619      	mov	r1, r3
 8001a16:	201c      	movs	r0, #28
 8001a18:	f000 fb66 	bl	80020e8 <write_reg>

    switch (scale){
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b18      	cmp	r3, #24
 8001a20:	d848      	bhi.n	8001ab4 <set_acc_scale+0xac>
 8001a22:	a201      	add	r2, pc, #4	; (adr r2, 8001a28 <set_acc_scale+0x20>)
 8001a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a28:	08001a8d 	.word	0x08001a8d
 8001a2c:	08001ab5 	.word	0x08001ab5
 8001a30:	08001ab5 	.word	0x08001ab5
 8001a34:	08001ab5 	.word	0x08001ab5
 8001a38:	08001ab5 	.word	0x08001ab5
 8001a3c:	08001ab5 	.word	0x08001ab5
 8001a40:	08001ab5 	.word	0x08001ab5
 8001a44:	08001ab5 	.word	0x08001ab5
 8001a48:	08001a97 	.word	0x08001a97
 8001a4c:	08001ab5 	.word	0x08001ab5
 8001a50:	08001ab5 	.word	0x08001ab5
 8001a54:	08001ab5 	.word	0x08001ab5
 8001a58:	08001ab5 	.word	0x08001ab5
 8001a5c:	08001ab5 	.word	0x08001ab5
 8001a60:	08001ab5 	.word	0x08001ab5
 8001a64:	08001ab5 	.word	0x08001ab5
 8001a68:	08001aa1 	.word	0x08001aa1
 8001a6c:	08001ab5 	.word	0x08001ab5
 8001a70:	08001ab5 	.word	0x08001ab5
 8001a74:	08001ab5 	.word	0x08001ab5
 8001a78:	08001ab5 	.word	0x08001ab5
 8001a7c:	08001ab5 	.word	0x08001ab5
 8001a80:	08001ab5 	.word	0x08001ab5
 8001a84:	08001ab5 	.word	0x08001ab5
 8001a88:	08001aab 	.word	0x08001aab
        case BITS_FS_2G:
            acc_divider=16384;
 8001a8c:	4b31      	ldr	r3, [pc, #196]	; (8001b54 <set_acc_scale+0x14c>)
 8001a8e:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8001a92:	601a      	str	r2, [r3, #0]
        break;
 8001a94:	e00e      	b.n	8001ab4 <set_acc_scale+0xac>
        case BITS_FS_4G:
            acc_divider=8192;
 8001a96:	4b2f      	ldr	r3, [pc, #188]	; (8001b54 <set_acc_scale+0x14c>)
 8001a98:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8001a9c:	601a      	str	r2, [r3, #0]
        break;
 8001a9e:	e009      	b.n	8001ab4 <set_acc_scale+0xac>
        case BITS_FS_8G:
            acc_divider=4096;
 8001aa0:	4b2c      	ldr	r3, [pc, #176]	; (8001b54 <set_acc_scale+0x14c>)
 8001aa2:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8001aa6:	601a      	str	r2, [r3, #0]
        break;
 8001aa8:	e004      	b.n	8001ab4 <set_acc_scale+0xac>
        case BITS_FS_16G:
            acc_divider=2048;
 8001aaa:	4b2a      	ldr	r3, [pc, #168]	; (8001b54 <set_acc_scale+0x14c>)
 8001aac:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8001ab0:	601a      	str	r2, [r3, #0]
        break;
 8001ab2:	bf00      	nop
    }
    temp_scale=read_reg(MPUREG_ACCEL_CONFIG);
 8001ab4:	201c      	movs	r0, #28
 8001ab6:	f000 fb5b 	bl	8002170 <read_reg>
 8001aba:	4603      	mov	r3, r0
 8001abc:	60fb      	str	r3, [r7, #12]

    switch (temp_scale){
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2b18      	cmp	r3, #24
 8001ac2:	d841      	bhi.n	8001b48 <set_acc_scale+0x140>
 8001ac4:	a201      	add	r2, pc, #4	; (adr r2, 8001acc <set_acc_scale+0xc4>)
 8001ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aca:	bf00      	nop
 8001acc:	08001b31 	.word	0x08001b31
 8001ad0:	08001b49 	.word	0x08001b49
 8001ad4:	08001b49 	.word	0x08001b49
 8001ad8:	08001b49 	.word	0x08001b49
 8001adc:	08001b49 	.word	0x08001b49
 8001ae0:	08001b49 	.word	0x08001b49
 8001ae4:	08001b49 	.word	0x08001b49
 8001ae8:	08001b49 	.word	0x08001b49
 8001aec:	08001b37 	.word	0x08001b37
 8001af0:	08001b49 	.word	0x08001b49
 8001af4:	08001b49 	.word	0x08001b49
 8001af8:	08001b49 	.word	0x08001b49
 8001afc:	08001b49 	.word	0x08001b49
 8001b00:	08001b49 	.word	0x08001b49
 8001b04:	08001b49 	.word	0x08001b49
 8001b08:	08001b49 	.word	0x08001b49
 8001b0c:	08001b3d 	.word	0x08001b3d
 8001b10:	08001b49 	.word	0x08001b49
 8001b14:	08001b49 	.word	0x08001b49
 8001b18:	08001b49 	.word	0x08001b49
 8001b1c:	08001b49 	.word	0x08001b49
 8001b20:	08001b49 	.word	0x08001b49
 8001b24:	08001b49 	.word	0x08001b49
 8001b28:	08001b49 	.word	0x08001b49
 8001b2c:	08001b43 	.word	0x08001b43
        case BITS_FS_2G:
            temp_scale=2;
 8001b30:	2302      	movs	r3, #2
 8001b32:	60fb      	str	r3, [r7, #12]
        break;
 8001b34:	e008      	b.n	8001b48 <set_acc_scale+0x140>
        case BITS_FS_4G:
            temp_scale=4;
 8001b36:	2304      	movs	r3, #4
 8001b38:	60fb      	str	r3, [r7, #12]
        break;
 8001b3a:	e005      	b.n	8001b48 <set_acc_scale+0x140>
        case BITS_FS_8G:
            temp_scale=8;
 8001b3c:	2308      	movs	r3, #8
 8001b3e:	60fb      	str	r3, [r7, #12]
        break;
 8001b40:	e002      	b.n	8001b48 <set_acc_scale+0x140>
        case BITS_FS_16G:
            temp_scale=16;
 8001b42:	2310      	movs	r3, #16
 8001b44:	60fb      	str	r3, [r7, #12]
        break;
 8001b46:	bf00      	nop
    }
    return temp_scale;
 8001b48:	68fb      	ldr	r3, [r7, #12]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000088 	.word	0x20000088

08001b58 <set_gyro_scale>:

uint32_t set_gyro_scale(int scale){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
    unsigned int temp_scale;
    write_reg(MPUREG_GYRO_CONFIG, scale);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	4619      	mov	r1, r3
 8001b66:	201b      	movs	r0, #27
 8001b68:	f000 fabe 	bl	80020e8 <write_reg>
    switch (scale){
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b18      	cmp	r3, #24
 8001b70:	d844      	bhi.n	8001bfc <set_gyro_scale+0xa4>
 8001b72:	a201      	add	r2, pc, #4	; (adr r2, 8001b78 <set_gyro_scale+0x20>)
 8001b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b78:	08001bdd 	.word	0x08001bdd
 8001b7c:	08001bfd 	.word	0x08001bfd
 8001b80:	08001bfd 	.word	0x08001bfd
 8001b84:	08001bfd 	.word	0x08001bfd
 8001b88:	08001bfd 	.word	0x08001bfd
 8001b8c:	08001bfd 	.word	0x08001bfd
 8001b90:	08001bfd 	.word	0x08001bfd
 8001b94:	08001bfd 	.word	0x08001bfd
 8001b98:	08001be5 	.word	0x08001be5
 8001b9c:	08001bfd 	.word	0x08001bfd
 8001ba0:	08001bfd 	.word	0x08001bfd
 8001ba4:	08001bfd 	.word	0x08001bfd
 8001ba8:	08001bfd 	.word	0x08001bfd
 8001bac:	08001bfd 	.word	0x08001bfd
 8001bb0:	08001bfd 	.word	0x08001bfd
 8001bb4:	08001bfd 	.word	0x08001bfd
 8001bb8:	08001bed 	.word	0x08001bed
 8001bbc:	08001bfd 	.word	0x08001bfd
 8001bc0:	08001bfd 	.word	0x08001bfd
 8001bc4:	08001bfd 	.word	0x08001bfd
 8001bc8:	08001bfd 	.word	0x08001bfd
 8001bcc:	08001bfd 	.word	0x08001bfd
 8001bd0:	08001bfd 	.word	0x08001bfd
 8001bd4:	08001bfd 	.word	0x08001bfd
 8001bd8:	08001bf5 	.word	0x08001bf5
        case BITS_FS_250DPS:
            gyro_divider=131;
 8001bdc:	4b30      	ldr	r3, [pc, #192]	; (8001ca0 <set_gyro_scale+0x148>)
 8001bde:	4a31      	ldr	r2, [pc, #196]	; (8001ca4 <set_gyro_scale+0x14c>)
 8001be0:	601a      	str	r2, [r3, #0]
        break;
 8001be2:	e00b      	b.n	8001bfc <set_gyro_scale+0xa4>
        case BITS_FS_500DPS:
            gyro_divider=65.5;
 8001be4:	4b2e      	ldr	r3, [pc, #184]	; (8001ca0 <set_gyro_scale+0x148>)
 8001be6:	4a30      	ldr	r2, [pc, #192]	; (8001ca8 <set_gyro_scale+0x150>)
 8001be8:	601a      	str	r2, [r3, #0]
        break;
 8001bea:	e007      	b.n	8001bfc <set_gyro_scale+0xa4>
        case BITS_FS_1000DPS:
            gyro_divider=32.8;
 8001bec:	4b2c      	ldr	r3, [pc, #176]	; (8001ca0 <set_gyro_scale+0x148>)
 8001bee:	4a2f      	ldr	r2, [pc, #188]	; (8001cac <set_gyro_scale+0x154>)
 8001bf0:	601a      	str	r2, [r3, #0]
        break;
 8001bf2:	e003      	b.n	8001bfc <set_gyro_scale+0xa4>
        case BITS_FS_2000DPS:
            gyro_divider=16.4;
 8001bf4:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <set_gyro_scale+0x148>)
 8001bf6:	4a2e      	ldr	r2, [pc, #184]	; (8001cb0 <set_gyro_scale+0x158>)
 8001bf8:	601a      	str	r2, [r3, #0]
        break;
 8001bfa:	bf00      	nop
    }
    temp_scale=read_reg(MPUREG_GYRO_CONFIG);
 8001bfc:	201b      	movs	r0, #27
 8001bfe:	f000 fab7 	bl	8002170 <read_reg>
 8001c02:	4603      	mov	r3, r0
 8001c04:	60fb      	str	r3, [r7, #12]
    switch (temp_scale){
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2b18      	cmp	r3, #24
 8001c0a:	d844      	bhi.n	8001c96 <set_gyro_scale+0x13e>
 8001c0c:	a201      	add	r2, pc, #4	; (adr r2, 8001c14 <set_gyro_scale+0xbc>)
 8001c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c12:	bf00      	nop
 8001c14:	08001c79 	.word	0x08001c79
 8001c18:	08001c97 	.word	0x08001c97
 8001c1c:	08001c97 	.word	0x08001c97
 8001c20:	08001c97 	.word	0x08001c97
 8001c24:	08001c97 	.word	0x08001c97
 8001c28:	08001c97 	.word	0x08001c97
 8001c2c:	08001c97 	.word	0x08001c97
 8001c30:	08001c97 	.word	0x08001c97
 8001c34:	08001c7f 	.word	0x08001c7f
 8001c38:	08001c97 	.word	0x08001c97
 8001c3c:	08001c97 	.word	0x08001c97
 8001c40:	08001c97 	.word	0x08001c97
 8001c44:	08001c97 	.word	0x08001c97
 8001c48:	08001c97 	.word	0x08001c97
 8001c4c:	08001c97 	.word	0x08001c97
 8001c50:	08001c97 	.word	0x08001c97
 8001c54:	08001c87 	.word	0x08001c87
 8001c58:	08001c97 	.word	0x08001c97
 8001c5c:	08001c97 	.word	0x08001c97
 8001c60:	08001c97 	.word	0x08001c97
 8001c64:	08001c97 	.word	0x08001c97
 8001c68:	08001c97 	.word	0x08001c97
 8001c6c:	08001c97 	.word	0x08001c97
 8001c70:	08001c97 	.word	0x08001c97
 8001c74:	08001c8f 	.word	0x08001c8f
        case BITS_FS_250DPS:
            temp_scale=250;
 8001c78:	23fa      	movs	r3, #250	; 0xfa
 8001c7a:	60fb      	str	r3, [r7, #12]
        break;
 8001c7c:	e00b      	b.n	8001c96 <set_gyro_scale+0x13e>
        case BITS_FS_500DPS:
            temp_scale=500;
 8001c7e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c82:	60fb      	str	r3, [r7, #12]
        break;
 8001c84:	e007      	b.n	8001c96 <set_gyro_scale+0x13e>
        case BITS_FS_1000DPS:
            temp_scale=1000;
 8001c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c8a:	60fb      	str	r3, [r7, #12]
        break;
 8001c8c:	e003      	b.n	8001c96 <set_gyro_scale+0x13e>
        case BITS_FS_2000DPS:
            temp_scale=2000;
 8001c8e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c92:	60fb      	str	r3, [r7, #12]
        break;
 8001c94:	bf00      	nop
    }
    return temp_scale;
 8001c96:	68fb      	ldr	r3, [r7, #12]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20000078 	.word	0x20000078
 8001ca4:	43030000 	.word	0x43030000
 8001ca8:	42830000 	.word	0x42830000
 8001cac:	42033333 	.word	0x42033333
 8001cb0:	41833333 	.word	0x41833333

08001cb4 <calib_acc>:

void calib_acc()
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
    uint8_t response[4];
    int temp_scale;
    //READ CURRENT ACC SCALE
    temp_scale=read_reg(MPUREG_ACCEL_CONFIG);
 8001cba:	201c      	movs	r0, #28
 8001cbc:	f000 fa58 	bl	8002170 <read_reg>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	607b      	str	r3, [r7, #4]
    set_acc_scale(BITS_FS_8G);
 8001cc4:	2010      	movs	r0, #16
 8001cc6:	f7ff fe9f 	bl	8001a08 <set_acc_scale>
    //ENABLE SELF TEST need modify
    //temp_scale=WriteReg(MPUREG_ACCEL_CONFIG, 0x80>>axis);

    read_regs(MPUREG_SELF_TEST_X,response,4);
 8001cca:	463b      	mov	r3, r7
 8001ccc:	2204      	movs	r2, #4
 8001cce:	4619      	mov	r1, r3
 8001cd0:	200d      	movs	r0, #13
 8001cd2:	f000 fa93 	bl	80021fc <read_regs>
    calib_data[0]=((response[0]&11100000)>>3)|((response[3]&00110000)>>4);
 8001cd6:	783b      	ldrb	r3, [r7, #0]
 8001cd8:	10da      	asrs	r2, r3, #3
 8001cda:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <calib_acc+0x70>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	78fa      	ldrb	r2, [r7, #3]
 8001ce0:	1112      	asrs	r2, r2, #4
 8001ce2:	f402 6210 	and.w	r2, r2, #2304	; 0x900
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	4a0f      	ldr	r2, [pc, #60]	; (8001d28 <calib_acc+0x74>)
 8001cea:	6013      	str	r3, [r2, #0]
    calib_data[1]=((response[1]&11100000)>>3)|((response[3]&00001100)>>2);
 8001cec:	787b      	ldrb	r3, [r7, #1]
 8001cee:	10da      	asrs	r2, r3, #3
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <calib_acc+0x70>)
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	78fa      	ldrb	r2, [r7, #3]
 8001cf6:	1092      	asrs	r2, r2, #2
 8001cf8:	f002 0290 	and.w	r2, r2, #144	; 0x90
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <calib_acc+0x74>)
 8001d00:	6053      	str	r3, [r2, #4]
    calib_data[2]=((response[2]&11100000)>>3)|((response[3]&00000011));
 8001d02:	78bb      	ldrb	r3, [r7, #2]
 8001d04:	10da      	asrs	r2, r3, #3
 8001d06:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <calib_acc+0x70>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	78fa      	ldrb	r2, [r7, #3]
 8001d0c:	f002 0209 	and.w	r2, r2, #9
 8001d10:	4313      	orrs	r3, r2
 8001d12:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <calib_acc+0x74>)
 8001d14:	6093      	str	r3, [r2, #8]

    set_acc_scale(temp_scale);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff fe76 	bl	8001a08 <set_acc_scale>
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	00152bec 	.word	0x00152bec
 8001d28:	20000060 	.word	0x20000060

08001d2c <read_rot>:
        accelerometer_data[i]=data/acc_divider;
    }
}

void read_rot()
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
    uint8_t response[6];
    int16_t bit_data;
    float data;
    int i;
    read_regs(MPUREG_GYRO_XOUT_H,response,6);
 8001d32:	1d3b      	adds	r3, r7, #4
 8001d34:	2206      	movs	r2, #6
 8001d36:	4619      	mov	r1, r3
 8001d38:	2043      	movs	r0, #67	; 0x43
 8001d3a:	f000 fa5f 	bl	80021fc <read_regs>
    for(i=0; i<3; i++) {
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	e046      	b.n	8001dd2 <read_rot+0xa6>
        bit_data=((int16_t)response[i*2]<<8)|response[i*2+1];
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	f107 0218 	add.w	r2, r7, #24
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001d52:	021b      	lsls	r3, r3, #8
 8001d54:	b21a      	sxth	r2, r3
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	f107 0118 	add.w	r1, r7, #24
 8001d60:	440b      	add	r3, r1
 8001d62:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001d66:	b21b      	sxth	r3, r3
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	827b      	strh	r3, [r7, #18]
        data=(float)bit_data;
 8001d6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fed9 	bl	8000b28 <__aeabi_i2f>
 8001d76:	4603      	mov	r3, r0
 8001d78:	60fb      	str	r3, [r7, #12]
        gyroscope_data[i]=data/gyro_divider;
 8001d7a:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <read_rot+0xb4>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4619      	mov	r1, r3
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f7fe ffd9 	bl	8000d38 <__aeabi_fdiv>
 8001d86:	4603      	mov	r3, r0
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4a16      	ldr	r2, [pc, #88]	; (8001de4 <read_rot+0xb8>)
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        gyroscope_data_avg[i]= (gyroscope_data_avg[i]*4 + gyroscope_data[i])/5;
 8001d92:	4a15      	ldr	r2, [pc, #84]	; (8001de8 <read_rot+0xbc>)
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe ff16 	bl	8000bd0 <__aeabi_fmul>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4618      	mov	r0, r3
 8001da8:	4a0e      	ldr	r2, [pc, #56]	; (8001de4 <read_rot+0xb8>)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db0:	4619      	mov	r1, r3
 8001db2:	f7fe fe05 	bl	80009c0 <__addsf3>
 8001db6:	4603      	mov	r3, r0
 8001db8:	490c      	ldr	r1, [pc, #48]	; (8001dec <read_rot+0xc0>)
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe ffbc 	bl	8000d38 <__aeabi_fdiv>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4a08      	ldr	r2, [pc, #32]	; (8001de8 <read_rot+0xbc>)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    uint8_t response[6];
    int16_t bit_data;
    float data;
    int i;
    read_regs(MPUREG_GYRO_XOUT_H,response,6);
    for(i=0; i<3; i++) {
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	ddb5      	ble.n	8001d44 <read_rot+0x18>
        bit_data=((int16_t)response[i*2]<<8)|response[i*2+1];
        data=(float)bit_data;
        gyroscope_data[i]=data/gyro_divider;
        gyroscope_data_avg[i]= (gyroscope_data_avg[i]*4 + gyroscope_data[i])/5;
    }
}
 8001dd8:	bf00      	nop
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000078 	.word	0x20000078
 8001de4:	2000006c 	.word	0x2000006c
 8001de8:	20000054 	.word	0x20000054
 8001dec:	40a00000 	.word	0x40a00000

08001df0 <calculate_angle>:

void calculate_angle()
{
 8001df0:	b5b0      	push	{r4, r5, r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
	int i;
	for (i=0; i<3 ; i++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	607b      	str	r3, [r7, #4]
 8001dfa:	e028      	b.n	8001e4e <calculate_angle+0x5e>
	{
		gyroscope_angle[i] = gyroscope_angle[i] + gyroscope_data_avg[i]*0.05;		// *dt
 8001dfc:	4a1a      	ldr	r2, [pc, #104]	; (8001e68 <calculate_angle+0x78>)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fb1f 	bl	8000448 <__aeabi_f2d>
 8001e0a:	4604      	mov	r4, r0
 8001e0c:	460d      	mov	r5, r1
 8001e0e:	4a17      	ldr	r2, [pc, #92]	; (8001e6c <calculate_angle+0x7c>)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fb16 	bl	8000448 <__aeabi_f2d>
 8001e1c:	a310      	add	r3, pc, #64	; (adr r3, 8001e60 <calculate_angle+0x70>)
 8001e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e22:	f7fe fb65 	bl	80004f0 <__aeabi_dmul>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	4629      	mov	r1, r5
 8001e2e:	f7fe f9ad 	bl	800018c <__adddf3>
 8001e32:	4603      	mov	r3, r0
 8001e34:	460c      	mov	r4, r1
 8001e36:	4618      	mov	r0, r3
 8001e38:	4621      	mov	r1, r4
 8001e3a:	f7fe fd6b 	bl	8000914 <__aeabi_d2f>
 8001e3e:	4601      	mov	r1, r0
 8001e40:	4a09      	ldr	r2, [pc, #36]	; (8001e68 <calculate_angle+0x78>)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}

void calculate_angle()
{
	int i;
	for (i=0; i<3 ; i++)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	607b      	str	r3, [r7, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	ddd3      	ble.n	8001dfc <calculate_angle+0xc>
	{
		gyroscope_angle[i] = gyroscope_angle[i] + gyroscope_data_avg[i]*0.05;		// *dt
	}
}
 8001e54:	bf00      	nop
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e5c:	f3af 8000 	nop.w
 8001e60:	9999999a 	.word	0x9999999a
 8001e64:	3fa99999 	.word	0x3fa99999
 8001e68:	2000008c 	.word	0x2000008c
 8001e6c:	20000054 	.word	0x20000054

08001e70 <usart_init>:
 *      Author: Asus
 */
/* Includes */
#include <functions.h>

void usart_init(){
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001e76:	2101      	movs	r1, #1
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f7ff fa53 	bl	8001324 <RCC_AHBPeriphClockCmd>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 8001e7e:	2207      	movs	r2, #7
 8001e80:	2102      	movs	r1, #2
 8001e82:	481b      	ldr	r0, [pc, #108]	; (8001ef0 <usart_init+0x80>)
 8001e84:	f7ff f92c 	bl	80010e0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 8001e88:	2207      	movs	r2, #7
 8001e8a:	2103      	movs	r1, #3
 8001e8c:	4818      	ldr	r0, [pc, #96]	; (8001ef0 <usart_init+0x80>)
 8001e8e:	f7ff f927 	bl	80010e0 <GPIO_PinAFConfig>

	GPIO_InitTypeDef GPIO_usart;

	GPIO_usart.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8001e92:	230c      	movs	r3, #12
 8001e94:	613b      	str	r3, [r7, #16]
	GPIO_usart.GPIO_Mode = GPIO_Mode_AF;
 8001e96:	2302      	movs	r3, #2
 8001e98:	753b      	strb	r3, [r7, #20]
	GPIO_usart.GPIO_OType = GPIO_OType_PP;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	75bb      	strb	r3, [r7, #22]
	GPIO_usart.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	75fb      	strb	r3, [r7, #23]
	GPIO_usart.GPIO_Speed = GPIO_Speed_40MHz;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	757b      	strb	r3, [r7, #21]

	GPIO_Init(GPIOA,&GPIO_usart);
 8001ea6:	f107 0310 	add.w	r3, r7, #16
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4810      	ldr	r0, [pc, #64]	; (8001ef0 <usart_init+0x80>)
 8001eae:	f7ff f865 	bl	8000f7c <GPIO_Init>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001eb8:	f7ff fa70 	bl	800139c <RCC_APB1PeriphClockCmd>

	USART_InitTypeDef USART_InitStructure;
	USART_InitStructure.USART_BaudRate = 9600;
 8001ebc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001ec0:	603b      	str	r3, [r7, #0]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	80bb      	strh	r3, [r7, #4]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	80fb      	strh	r3, [r7, #6]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	813b      	strh	r3, [r7, #8]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001ed2:	230c      	movs	r3, #12
 8001ed4:	817b      	strh	r3, [r7, #10]
	USART_Init(USART2, &USART_InitStructure);
 8001ed6:	463b      	mov	r3, r7
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4806      	ldr	r0, [pc, #24]	; (8001ef4 <usart_init+0x84>)
 8001edc:	f7ff fbe6 	bl	80016ac <USART_Init>
	USART_Cmd(USART2, ENABLE);
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	4804      	ldr	r0, [pc, #16]	; (8001ef4 <usart_init+0x84>)
 8001ee4:	f7ff fc96 	bl	8001814 <USART_Cmd>
}
 8001ee8:	bf00      	nop
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40020000 	.word	0x40020000
 8001ef4:	40004400 	.word	0x40004400

08001ef8 <USART_send_function>:

void USART_send_function(char text[]){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]

	uint16_t i = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	81fb      	strh	r3, [r7, #14]
	while(text[i] != '\0'){
 8001f04:	e013      	b.n	8001f2e <USART_send_function+0x36>
		USART_SendData(USART2, text[i]);
 8001f06:	89fb      	ldrh	r3, [r7, #14]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	4619      	mov	r1, r3
 8001f12:	4810      	ldr	r0, [pc, #64]	; (8001f54 <USART_send_function+0x5c>)
 8001f14:	f7ff fc9e 	bl	8001854 <USART_SendData>
		while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);
 8001f18:	bf00      	nop
 8001f1a:	2140      	movs	r1, #64	; 0x40
 8001f1c:	480d      	ldr	r0, [pc, #52]	; (8001f54 <USART_send_function+0x5c>)
 8001f1e:	f7ff fcab 	bl	8001878 <USART_GetFlagStatus>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0f8      	beq.n	8001f1a <USART_send_function+0x22>
		i++;
 8001f28:	89fb      	ldrh	r3, [r7, #14]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	81fb      	strh	r3, [r7, #14]
}

void USART_send_function(char text[]){

	uint16_t i = 0;
	while(text[i] != '\0'){
 8001f2e:	89fb      	ldrh	r3, [r7, #14]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	4413      	add	r3, r2
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1e5      	bne.n	8001f06 <USART_send_function+0xe>
		USART_SendData(USART2, text[i]);
		while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);
		i++;
	}
	//USART_SendData(USART2,'\r');
	while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);
 8001f3a:	bf00      	nop
 8001f3c:	2140      	movs	r1, #64	; 0x40
 8001f3e:	4805      	ldr	r0, [pc, #20]	; (8001f54 <USART_send_function+0x5c>)
 8001f40:	f7ff fc9a 	bl	8001878 <USART_GetFlagStatus>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0f8      	beq.n	8001f3c <USART_send_function+0x44>

}
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40004400 	.word	0x40004400

08001f58 <USART_send_function_number>:

void USART_send_function_number(float number){
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	; 0x28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]

	uint16_t i = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	84fb      	strh	r3, [r7, #38]	; 0x26
	char text[20];
	int num1 = (int)number;
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7fe ff83 	bl	8000e70 <__aeabi_f2iz>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	623b      	str	r3, [r7, #32]
	int num2 = (int)((number-num1)*1000);
 8001f6e:	6a38      	ldr	r0, [r7, #32]
 8001f70:	f7fe fdda 	bl	8000b28 <__aeabi_i2f>
 8001f74:	4603      	mov	r3, r0
 8001f76:	4619      	mov	r1, r3
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7fe fd1f 	bl	80009bc <__aeabi_fsub>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	4926      	ldr	r1, [pc, #152]	; (800201c <USART_send_function_number+0xc4>)
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe fe24 	bl	8000bd0 <__aeabi_fmul>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe ff70 	bl	8000e70 <__aeabi_f2iz>
 8001f90:	4603      	mov	r3, r0
 8001f92:	61fb      	str	r3, [r7, #28]
	if (num2 > 0)
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	dd07      	ble.n	8001faa <USART_send_function_number+0x52>
		sprintf(text,"%d.%d", num1, num2);
 8001f9a:	f107 0008 	add.w	r0, r7, #8
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	6a3a      	ldr	r2, [r7, #32]
 8001fa2:	491f      	ldr	r1, [pc, #124]	; (8002020 <USART_send_function_number+0xc8>)
 8001fa4:	f000 fc64 	bl	8002870 <siprintf>
 8001fa8:	e020      	b.n	8001fec <USART_send_function_number+0x94>
	else{
		num2=num2*-1;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	425b      	negs	r3, r3
 8001fae:	61fb      	str	r3, [r7, #28]
		sprintf(text,"%d.%d", num1, num2);
 8001fb0:	f107 0008 	add.w	r0, r7, #8
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	6a3a      	ldr	r2, [r7, #32]
 8001fb8:	4919      	ldr	r1, [pc, #100]	; (8002020 <USART_send_function_number+0xc8>)
 8001fba:	f000 fc59 	bl	8002870 <siprintf>
	}
	while(text[i] != '\0'){
 8001fbe:	e015      	b.n	8001fec <USART_send_function_number+0x94>
		USART_SendData(USART2, text[i]);
 8001fc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001fc2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4814      	ldr	r0, [pc, #80]	; (8002024 <USART_send_function_number+0xcc>)
 8001fd2:	f7ff fc3f 	bl	8001854 <USART_SendData>
		while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);
 8001fd6:	bf00      	nop
 8001fd8:	2140      	movs	r1, #64	; 0x40
 8001fda:	4812      	ldr	r0, [pc, #72]	; (8002024 <USART_send_function_number+0xcc>)
 8001fdc:	f7ff fc4c 	bl	8001878 <USART_GetFlagStatus>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f8      	beq.n	8001fd8 <USART_send_function_number+0x80>
		i++;
 8001fe6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001fe8:	3301      	adds	r3, #1
 8001fea:	84fb      	strh	r3, [r7, #38]	; 0x26
		sprintf(text,"%d.%d", num1, num2);
	else{
		num2=num2*-1;
		sprintf(text,"%d.%d", num1, num2);
	}
	while(text[i] != '\0'){
 8001fec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001fee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1e1      	bne.n	8001fc0 <USART_send_function_number+0x68>
		USART_SendData(USART2, text[i]);
		while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);
		i++;
	}
	USART_SendData(USART2,'\r');
 8001ffc:	210d      	movs	r1, #13
 8001ffe:	4809      	ldr	r0, [pc, #36]	; (8002024 <USART_send_function_number+0xcc>)
 8002000:	f7ff fc28 	bl	8001854 <USART_SendData>
	while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);
 8002004:	bf00      	nop
 8002006:	2140      	movs	r1, #64	; 0x40
 8002008:	4806      	ldr	r0, [pc, #24]	; (8002024 <USART_send_function_number+0xcc>)
 800200a:	f7ff fc35 	bl	8001878 <USART_GetFlagStatus>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0f8      	beq.n	8002006 <USART_send_function_number+0xae>

}
 8002014:	bf00      	nop
 8002016:	3728      	adds	r7, #40	; 0x28
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	447a0000 	.word	0x447a0000
 8002020:	08002900 	.word	0x08002900
 8002024:	40004400 	.word	0x40004400

08002028 <init_SPI1>:

void init_SPI1(void){
 8002028:	b580      	push	{r7, lr}
 800202a:	b088      	sub	sp, #32
 800202c:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct;
	SPI_InitTypeDef SPI_InitStruct;

	// enable clock for used IO pins
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800202e:	2101      	movs	r1, #1
 8002030:	2001      	movs	r0, #1
 8002032:	f7ff f977 	bl	8001324 <RCC_AHBPeriphClockCmd>

	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_6 | GPIO_Pin_5;
 8002036:	23e0      	movs	r3, #224	; 0xe0
 8002038:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 800203a:	2302      	movs	r3, #2
 800203c:	773b      	strb	r3, [r7, #28]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 800203e:	2300      	movs	r3, #0
 8002040:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_40MHz;
 8002042:	2303      	movs	r3, #3
 8002044:	777b      	strb	r3, [r7, #29]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204a:	f107 0318 	add.w	r3, r7, #24
 800204e:	4619      	mov	r1, r3
 8002050:	4823      	ldr	r0, [pc, #140]	; (80020e0 <init_SPI1+0xb8>)
 8002052:	f7fe ff93 	bl	8000f7c <GPIO_Init>

	// connect SPI1 pins to SPI alternate function
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource5, GPIO_AF_SPI1);
 8002056:	2205      	movs	r2, #5
 8002058:	2105      	movs	r1, #5
 800205a:	4821      	ldr	r0, [pc, #132]	; (80020e0 <init_SPI1+0xb8>)
 800205c:	f7ff f840 	bl	80010e0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_SPI1);
 8002060:	2205      	movs	r2, #5
 8002062:	2106      	movs	r1, #6
 8002064:	481e      	ldr	r0, [pc, #120]	; (80020e0 <init_SPI1+0xb8>)
 8002066:	f7ff f83b 	bl	80010e0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_SPI1);
 800206a:	2205      	movs	r2, #5
 800206c:	2107      	movs	r1, #7
 800206e:	481c      	ldr	r0, [pc, #112]	; (80020e0 <init_SPI1+0xb8>)
 8002070:	f7ff f836 	bl	80010e0 <GPIO_PinAFConfig>

	/* Configure the chip select pin
	   in this case we will use PA8 */
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_8;
 8002074:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002078:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 800207a:	2301      	movs	r3, #1
 800207c:	773b      	strb	r3, [r7, #28]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 800207e:	2300      	movs	r3, #0
 8002080:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_40MHz;
 8002082:	2303      	movs	r3, #3
 8002084:	777b      	strb	r3, [r7, #29]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8002086:	2301      	movs	r3, #1
 8002088:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208a:	f107 0318 	add.w	r3, r7, #24
 800208e:	4619      	mov	r1, r3
 8002090:	4813      	ldr	r0, [pc, #76]	; (80020e0 <init_SPI1+0xb8>)
 8002092:	f7fe ff73 	bl	8000f7c <GPIO_Init>
	// enable peripheral clock
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8002096:	2101      	movs	r1, #1
 8002098:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800209c:	f7ff f960 	bl	8001360 <RCC_APB2PeriphClockCmd>
	/* configure SPI1 in Mode 0
	 * CPOL = 0 --> clock is low when idle
	 * CPHA = 0 --> data is sampled at the first edge
	 */
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex; // set to full duplex mode, seperate MOSI and MISO lines
 80020a0:	2300      	movs	r3, #0
 80020a2:	80bb      	strh	r3, [r7, #4]
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;     // transmit in master mode, NSS pin has to be always high
 80020a4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80020a8:	80fb      	strh	r3, [r7, #6]
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b; // one packet of data is 8 bits wide
 80020aa:	2300      	movs	r3, #0
 80020ac:	813b      	strh	r3, [r7, #8]
	//SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;        // clock is high when idle
 80020ae:	2302      	movs	r3, #2
 80020b0:	817b      	strh	r3, [r7, #10]
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;      // data sampled at first edge
 80020b2:	2301      	movs	r3, #1
 80020b4:	81bb      	strh	r3, [r7, #12]
	//SPI_InitStruct.SPI_NSS = SPI_NSS_Soft | SPI_NSSInternalSoft_Set; // set the NSS management to internal and pull internal NSS high
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 80020b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ba:	81fb      	strh	r3, [r7, #14]
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_32; // SPI frequency is APB2 frequency / 32 changed by Miroslav Kohut
 80020bc:	2320      	movs	r3, #32
 80020be:	823b      	strh	r3, [r7, #16]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;// data is transmitted MSB first
 80020c0:	2300      	movs	r3, #0
 80020c2:	827b      	strh	r3, [r7, #18]
	SPI_Init(SPI1, &SPI_InitStruct);
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	4619      	mov	r1, r3
 80020c8:	4806      	ldr	r0, [pc, #24]	; (80020e4 <init_SPI1+0xbc>)
 80020ca:	f7ff f985 	bl	80013d8 <SPI_Init>

	SPI_Cmd(SPI1, ENABLE); // enable SPI1
 80020ce:	2101      	movs	r1, #1
 80020d0:	4804      	ldr	r0, [pc, #16]	; (80020e4 <init_SPI1+0xbc>)
 80020d2:	f7ff f9c5 	bl	8001460 <SPI_Cmd>
}
 80020d6:	bf00      	nop
 80020d8:	3720      	adds	r7, #32
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40020000 	.word	0x40020000
 80020e4:	40013000 	.word	0x40013000

080020e8 <write_reg>:

void write_reg( uint8_t WriteAddr, uint8_t WriteData )
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	460a      	mov	r2, r1
 80020f2:	71fb      	strb	r3, [r7, #7]
 80020f4:	4613      	mov	r3, r2
 80020f6:	71bb      	strb	r3, [r7, #6]
	chip_select();
 80020f8:	f000 f8a4 	bl	8002244 <chip_select>
	while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE));
 80020fc:	bf00      	nop
 80020fe:	2102      	movs	r1, #2
 8002100:	481a      	ldr	r0, [pc, #104]	; (800216c <write_reg+0x84>)
 8002102:	f7ff f9e7 	bl	80014d4 <SPI_I2S_GetFlagStatus>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f8      	beq.n	80020fe <write_reg+0x16>
	SPI_I2S_SendData(SPI1, WriteAddr);
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	b29b      	uxth	r3, r3
 8002110:	4619      	mov	r1, r3
 8002112:	4816      	ldr	r0, [pc, #88]	; (800216c <write_reg+0x84>)
 8002114:	f7ff f9d0 	bl	80014b8 <SPI_I2S_SendData>
	while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE));
 8002118:	bf00      	nop
 800211a:	2101      	movs	r1, #1
 800211c:	4813      	ldr	r0, [pc, #76]	; (800216c <write_reg+0x84>)
 800211e:	f7ff f9d9 	bl	80014d4 <SPI_I2S_GetFlagStatus>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f8      	beq.n	800211a <write_reg+0x32>
	SPI_I2S_ReceiveData(SPI1);
 8002128:	4810      	ldr	r0, [pc, #64]	; (800216c <write_reg+0x84>)
 800212a:	f7ff f9b9 	bl	80014a0 <SPI_I2S_ReceiveData>

	while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE));
 800212e:	bf00      	nop
 8002130:	2102      	movs	r1, #2
 8002132:	480e      	ldr	r0, [pc, #56]	; (800216c <write_reg+0x84>)
 8002134:	f7ff f9ce 	bl	80014d4 <SPI_I2S_GetFlagStatus>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0f8      	beq.n	8002130 <write_reg+0x48>
	SPI_I2S_SendData(SPI1, WriteData);
 800213e:	79bb      	ldrb	r3, [r7, #6]
 8002140:	b29b      	uxth	r3, r3
 8002142:	4619      	mov	r1, r3
 8002144:	4809      	ldr	r0, [pc, #36]	; (800216c <write_reg+0x84>)
 8002146:	f7ff f9b7 	bl	80014b8 <SPI_I2S_SendData>
	while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE));
 800214a:	bf00      	nop
 800214c:	2101      	movs	r1, #1
 800214e:	4807      	ldr	r0, [pc, #28]	; (800216c <write_reg+0x84>)
 8002150:	f7ff f9c0 	bl	80014d4 <SPI_I2S_GetFlagStatus>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f8      	beq.n	800214c <write_reg+0x64>
	SPI_I2S_ReceiveData(SPI1);
 800215a:	4804      	ldr	r0, [pc, #16]	; (800216c <write_reg+0x84>)
 800215c:	f7ff f9a0 	bl	80014a0 <SPI_I2S_ReceiveData>
	chip_deselect();
 8002160:	f000 f87c 	bl	800225c <chip_deselect>
}
 8002164:	bf00      	nop
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40013000 	.word	0x40013000

08002170 <read_reg>:

uint8_t read_reg( uint8_t ReadAddr)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
	chip_select();
 800217a:	f000 f863 	bl	8002244 <chip_select>

	ReadAddr = READ_FLAG | ReadAddr;
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002184:	71fb      	strb	r3, [r7, #7]
	while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE));
 8002186:	bf00      	nop
 8002188:	2102      	movs	r1, #2
 800218a:	481b      	ldr	r0, [pc, #108]	; (80021f8 <read_reg+0x88>)
 800218c:	f7ff f9a2 	bl	80014d4 <SPI_I2S_GetFlagStatus>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f8      	beq.n	8002188 <read_reg+0x18>
	SPI_I2S_SendData(SPI1, ReadAddr);
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	b29b      	uxth	r3, r3
 800219a:	4619      	mov	r1, r3
 800219c:	4816      	ldr	r0, [pc, #88]	; (80021f8 <read_reg+0x88>)
 800219e:	f7ff f98b 	bl	80014b8 <SPI_I2S_SendData>
	while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE));
 80021a2:	bf00      	nop
 80021a4:	2101      	movs	r1, #1
 80021a6:	4814      	ldr	r0, [pc, #80]	; (80021f8 <read_reg+0x88>)
 80021a8:	f7ff f994 	bl	80014d4 <SPI_I2S_GetFlagStatus>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f8      	beq.n	80021a4 <read_reg+0x34>
	SPI_I2S_ReceiveData(SPI1); //Clear RXNE bit
 80021b2:	4811      	ldr	r0, [pc, #68]	; (80021f8 <read_reg+0x88>)
 80021b4:	f7ff f974 	bl	80014a0 <SPI_I2S_ReceiveData>

	while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE));
 80021b8:	bf00      	nop
 80021ba:	2102      	movs	r1, #2
 80021bc:	480e      	ldr	r0, [pc, #56]	; (80021f8 <read_reg+0x88>)
 80021be:	f7ff f989 	bl	80014d4 <SPI_I2S_GetFlagStatus>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f8      	beq.n	80021ba <read_reg+0x4a>
	SPI_I2S_SendData(SPI1, 0x00); //Dummy byte to generate clock
 80021c8:	2100      	movs	r1, #0
 80021ca:	480b      	ldr	r0, [pc, #44]	; (80021f8 <read_reg+0x88>)
 80021cc:	f7ff f974 	bl	80014b8 <SPI_I2S_SendData>
	while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE));
 80021d0:	bf00      	nop
 80021d2:	2101      	movs	r1, #1
 80021d4:	4808      	ldr	r0, [pc, #32]	; (80021f8 <read_reg+0x88>)
 80021d6:	f7ff f97d 	bl	80014d4 <SPI_I2S_GetFlagStatus>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f8      	beq.n	80021d2 <read_reg+0x62>
	uint8_t data =  SPI_I2S_ReceiveData(SPI1);
 80021e0:	4805      	ldr	r0, [pc, #20]	; (80021f8 <read_reg+0x88>)
 80021e2:	f7ff f95d 	bl	80014a0 <SPI_I2S_ReceiveData>
 80021e6:	4603      	mov	r3, r0
 80021e8:	73fb      	strb	r3, [r7, #15]
	chip_deselect();
 80021ea:	f000 f837 	bl	800225c <chip_deselect>

	return data;
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40013000 	.word	0x40013000

080021fc <read_regs>:

void read_regs( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
 80021fc:	b590      	push	{r4, r7, lr}
 80021fe:	b087      	sub	sp, #28
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	73fb      	strb	r3, [r7, #15]
    uint16_t  i = 0;
 800220a:	2300      	movs	r3, #0
 800220c:	82fb      	strh	r3, [r7, #22]
    for(i=0; i<Bytes; i++){
 800220e:	2300      	movs	r3, #0
 8002210:	82fb      	strh	r3, [r7, #22]
 8002212:	e00f      	b.n	8002234 <read_regs+0x38>
    	ReadBuf[i] = read_reg(ReadAddr+i);
 8002214:	8afb      	ldrh	r3, [r7, #22]
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	18d4      	adds	r4, r2, r3
 800221a:	8afb      	ldrh	r3, [r7, #22]
 800221c:	b2da      	uxtb	r2, r3
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	4413      	add	r3, r2
 8002222:	b2db      	uxtb	r3, r3
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff ffa3 	bl	8002170 <read_reg>
 800222a:	4603      	mov	r3, r0
 800222c:	7023      	strb	r3, [r4, #0]
}

void read_regs( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
    uint16_t  i = 0;
    for(i=0; i<Bytes; i++){
 800222e:	8afb      	ldrh	r3, [r7, #22]
 8002230:	3301      	adds	r3, #1
 8002232:	82fb      	strh	r3, [r7, #22]
 8002234:	8afa      	ldrh	r2, [r7, #22]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	429a      	cmp	r2, r3
 800223a:	d3eb      	bcc.n	8002214 <read_regs+0x18>
    	ReadBuf[i] = read_reg(ReadAddr+i);
    }
}
 800223c:	bf00      	nop
 800223e:	371c      	adds	r7, #28
 8002240:	46bd      	mov	sp, r7
 8002242:	bd90      	pop	{r4, r7, pc}

08002244 <chip_select>:

void chip_select(void){
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
	GPIO_ResetBits(GPIOA, GPIO_Pin_8);
 8002248:	f44f 7180 	mov.w	r1, #256	; 0x100
 800224c:	4802      	ldr	r0, [pc, #8]	; (8002258 <chip_select+0x14>)
 800224e:	f7fe ff39 	bl	80010c4 <GPIO_ResetBits>
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40020000 	.word	0x40020000

0800225c <chip_deselect>:
void chip_deselect(void){
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
	GPIO_SetBits(GPIOA, GPIO_Pin_8);
 8002260:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002264:	4802      	ldr	r0, [pc, #8]	; (8002270 <chip_deselect+0x14>)
 8002266:	f7fe ff1f 	bl	80010a8 <GPIO_SetBits>
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40020000 	.word	0x40020000

08002274 <sleep>:
// function sleep for specific time in def, +- 2 us
void sleep(uint64_t time){
 8002274:	b490      	push	{r4, r7}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	e9c7 0100 	strd	r0, r1, [r7]
	for(uint64_t c = 0; c < time;c++);
 800227e:	f04f 0300 	mov.w	r3, #0
 8002282:	f04f 0400 	mov.w	r4, #0
 8002286:	e9c7 3402 	strd	r3, r4, [r7, #8]
 800228a:	e006      	b.n	800229a <sleep+0x26>
 800228c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002290:	3301      	adds	r3, #1
 8002292:	f144 0400 	adc.w	r4, r4, #0
 8002296:	e9c7 3402 	strd	r3, r4, [r7, #8]
 800229a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800229e:	e897 0018 	ldmia.w	r7, {r3, r4}
 80022a2:	42a2      	cmp	r2, r4
 80022a4:	bf08      	it	eq
 80022a6:	4299      	cmpeq	r1, r3
 80022a8:	d3f0      	bcc.n	800228c <sleep+0x18>
}
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc90      	pop	{r4, r7}
 80022b2:	4770      	bx	lr

080022b4 <TIM2_init>:

void TIM2_init(int period_in_miliseconds)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
	uint32_t SystemTimeClock = 16000000;		//mame 16MHz vstup!!!
 80022bc:	4b1f      	ldr	r3, [pc, #124]	; (800233c <TIM2_init+0x88>)
 80022be:	61fb      	str	r3, [r7, #28]
	unsigned short inputPeriodValue = 10000;		//input clock = 10000Hz = 0,1ms
 80022c0:	f242 7310 	movw	r3, #10000	; 0x2710
 80022c4:	837b      	strh	r3, [r7, #26]
	unsigned short prescalerValue = (unsigned short) (SystemTimeClock / inputPeriodValue) - 1;
 80022c6:	8b7b      	ldrh	r3, [r7, #26]
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	3b01      	subs	r3, #1
 80022d2:	833b      	strh	r3, [r7, #24]

	/*Structure for timer settings*/
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80022d4:	2101      	movs	r1, #1
 80022d6:	2001      	movs	r0, #1
 80022d8:	f7ff f860 	bl	800139c <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructure.TIM_Period = period_in_miliseconds*10 - 1;		// 10 period * 0,0001s = 0,001s = 1ms vzorkovaci cas
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	3b01      	subs	r3, #1
 80022e8:	613b      	str	r3, [r7, #16]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80022ee:	2300      	movs	r3, #0
 80022f0:	81fb      	strh	r3, [r7, #14]
	TIM_TimeBaseStructure.TIM_Prescaler = prescalerValue;
 80022f2:	8b3b      	ldrh	r3, [r7, #24]
 80022f4:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80022f6:	f107 030c 	add.w	r3, r7, #12
 80022fa:	4619      	mov	r1, r3
 80022fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002300:	f7ff f904 	bl	800150c <TIM_TimeBaseInit>
	/* TIM Interrupts enable */
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8002304:	2201      	movs	r2, #1
 8002306:	2101      	movs	r1, #1
 8002308:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800230c:	f7ff f970 	bl	80015f0 <TIM_ITConfig>
	TIM_Cmd(TIM2, ENABLE);
 8002310:	2101      	movs	r1, #1
 8002312:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002316:	f7ff f94b 	bl	80015b0 <TIM_Cmd>

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 800231a:	231c      	movs	r3, #28
 800231c:	723b      	strb	r3, [r7, #8]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	727b      	strb	r3, [r7, #9]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8002322:	2301      	movs	r3, #1
 8002324:	72bb      	strb	r3, [r7, #10]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002326:	2301      	movs	r3, #1
 8002328:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&NVIC_InitStructure);
 800232a:	f107 0308 	add.w	r3, r7, #8
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe fdc4 	bl	8000ebc <NVIC_Init>
}
 8002334:	bf00      	nop
 8002336:	3720      	adds	r7, #32
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	00f42400 	.word	0x00f42400

08002340 <TIM3_init>:

void TIM3_init(int period_in_miliseconds)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	uint32_t SystemTimeClock = 16000000;		//mame 16MHz vstup!!!
 8002348:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <TIM3_init+0x84>)
 800234a:	61fb      	str	r3, [r7, #28]
	unsigned short inputPeriodValue = 10000;		//input clock = 10000Hz = 0,1ms
 800234c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002350:	837b      	strh	r3, [r7, #26]
	unsigned short prescalerValue = (unsigned short) (SystemTimeClock / inputPeriodValue) - 1;
 8002352:	8b7b      	ldrh	r3, [r7, #26]
 8002354:	69fa      	ldr	r2, [r7, #28]
 8002356:	fbb2 f3f3 	udiv	r3, r2, r3
 800235a:	b29b      	uxth	r3, r3
 800235c:	3b01      	subs	r3, #1
 800235e:	833b      	strh	r3, [r7, #24]

	/*Structure for timer settings*/
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8002360:	2101      	movs	r1, #1
 8002362:	2002      	movs	r0, #2
 8002364:	f7ff f81a 	bl	800139c <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructure.TIM_Period = period_in_miliseconds*10 - 1;		// 10 period * 0,0001s = 0,001s = 1ms vzorkovaci cas
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	3b01      	subs	r3, #1
 8002374:	613b      	str	r3, [r7, #16]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8002376:	2300      	movs	r3, #0
 8002378:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800237a:	2300      	movs	r3, #0
 800237c:	81fb      	strh	r3, [r7, #14]
	TIM_TimeBaseStructure.TIM_Prescaler = prescalerValue;
 800237e:	8b3b      	ldrh	r3, [r7, #24]
 8002380:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 8002382:	f107 030c 	add.w	r3, r7, #12
 8002386:	4619      	mov	r1, r3
 8002388:	480f      	ldr	r0, [pc, #60]	; (80023c8 <TIM3_init+0x88>)
 800238a:	f7ff f8bf 	bl	800150c <TIM_TimeBaseInit>
	/* TIM Interrupts enable */
	TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
 800238e:	2201      	movs	r2, #1
 8002390:	2101      	movs	r1, #1
 8002392:	480d      	ldr	r0, [pc, #52]	; (80023c8 <TIM3_init+0x88>)
 8002394:	f7ff f92c 	bl	80015f0 <TIM_ITConfig>
	TIM_Cmd(TIM3, ENABLE);
 8002398:	2101      	movs	r1, #1
 800239a:	480b      	ldr	r0, [pc, #44]	; (80023c8 <TIM3_init+0x88>)
 800239c:	f7ff f908 	bl	80015b0 <TIM_Cmd>

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM3 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 80023a0:	231d      	movs	r3, #29
 80023a2:	723b      	strb	r3, [r7, #8]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	727b      	strb	r3, [r7, #9]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80023a8:	2301      	movs	r3, #1
 80023aa:	72bb      	strb	r3, [r7, #10]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80023ac:	2301      	movs	r3, #1
 80023ae:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&NVIC_InitStructure);
 80023b0:	f107 0308 	add.w	r3, r7, #8
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe fd81 	bl	8000ebc <NVIC_Init>
}
 80023ba:	bf00      	nop
 80023bc:	3720      	adds	r7, #32
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	00f42400 	.word	0x00f42400
 80023c8:	40000400 	.word	0x40000400

080023cc <TIM2_IRQHandler>:



void TIM2_IRQHandler()
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
    if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
 80023d0:	2101      	movs	r1, #1
 80023d2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80023d6:	f7ff f92f 	bl	8001638 <TIM_GetITStatus>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d006      	beq.n	80023ee <TIM2_IRQHandler+0x22>
    {
        TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 80023e0:	2101      	movs	r1, #1
 80023e2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80023e6:	f7ff f951 	bl	800168c <TIM_ClearITPendingBit>
        calculate_angle();
 80023ea:	f7ff fd01 	bl	8001df0 <calculate_angle>
    }
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop

080023f4 <TIM3_IRQHandler>:

void TIM3_IRQHandler()
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
    if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)
 80023f8:	2101      	movs	r1, #1
 80023fa:	4807      	ldr	r0, [pc, #28]	; (8002418 <TIM3_IRQHandler+0x24>)
 80023fc:	f7ff f91c 	bl	8001638 <TIM_GetITStatus>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d005      	beq.n	8002412 <TIM3_IRQHandler+0x1e>
    {
        TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 8002406:	2101      	movs	r1, #1
 8002408:	4803      	ldr	r0, [pc, #12]	; (8002418 <TIM3_IRQHandler+0x24>)
 800240a:	f7ff f93f 	bl	800168c <TIM_ClearITPendingBit>
        read_rot();
 800240e:	f7ff fc8d 	bl	8001d2c <read_rot>
    }
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40000400 	.word	0x40000400

0800241c <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
	/*initializations*/
	usart_init();
 8002420:	f7ff fd26 	bl	8001e70 <usart_init>
    if(mpu9250_init(1,BITS_DLPF_CFG_188HZ)){  //INIT the mpu9250
 8002424:	2101      	movs	r1, #1
 8002426:	2001      	movs	r0, #1
 8002428:	f7ff fa42 	bl	80018b0 <mpu9250_init>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <main+0x1e>
    	USART_send_function("\nCouldn't initialize MPU9250 via SPI!\r");
 8002432:	480d      	ldr	r0, [pc, #52]	; (8002468 <main+0x4c>)
 8002434:	f7ff fd60 	bl	8001ef8 <USART_send_function>
 8002438:	e002      	b.n	8002440 <main+0x24>
    }
    else
    	USART_send_function("\nMPU9250 WAS SUCCESFULLY INITIALIZED!\r");
 800243a:	480c      	ldr	r0, [pc, #48]	; (800246c <main+0x50>)
 800243c:	f7ff fd5c 	bl	8001ef8 <USART_send_function>

    calib_acc();
 8002440:	f7ff fc38 	bl	8001cb4 <calib_acc>
    sleep(SLEEP_500_ms);
 8002444:	480a      	ldr	r0, [pc, #40]	; (8002470 <main+0x54>)
 8002446:	f04f 0100 	mov.w	r1, #0
 800244a:	f7ff ff13 	bl	8002274 <sleep>

    TIM2_init(50);
 800244e:	2032      	movs	r0, #50	; 0x32
 8002450:	f7ff ff30 	bl	80022b4 <TIM2_init>
    TIM3_init(10);
 8002454:	200a      	movs	r0, #10
 8002456:	f7ff ff73 	bl	8002340 <TIM3_init>
		USART_send_function_number(gyroscope_data[1]);
		USART_send_function("   ROT Z:");
		USART_send_function_number(gyroscope_data[2]);
		USART_SendData(USART2,'\r');*/
		//USART_send_function("   Angle X:");
		USART_send_function_number(gyroscope_angle[2]);
 800245a:	4b06      	ldr	r3, [pc, #24]	; (8002474 <main+0x58>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fd7a 	bl	8001f58 <USART_send_function_number>
		//USART_SendData(USART2,'\r');
	}
 8002464:	e7f9      	b.n	800245a <main+0x3e>
 8002466:	bf00      	nop
 8002468:	08002908 	.word	0x08002908
 800246c:	08002930 	.word	0x08002930
 8002470:	0005a550 	.word	0x0005a550
 8002474:	2000008c 	.word	0x2000008c

08002478 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002478:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800247c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800247e:	e003      	b.n	8002488 <LoopCopyDataInit>

08002480 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002480:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 8002482:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002484:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002486:	3104      	adds	r1, #4

08002488 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002488:	480b      	ldr	r0, [pc, #44]	; (80024b8 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 800248a:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 800248c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800248e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002490:	d3f6      	bcc.n	8002480 <CopyDataInit>
  ldr r2, =_sbss
 8002492:	4a0b      	ldr	r2, [pc, #44]	; (80024c0 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8002494:	e002      	b.n	800249c <LoopFillZerobss>

08002496 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002496:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002498:	f842 3b04 	str.w	r3, [r2], #4

0800249c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800249c:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <LoopFillZerobss+0x28>)
  cmp r2, r3
 800249e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80024a0:	d3f9      	bcc.n	8002496 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024a2:	f000 f841 	bl	8002528 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024a6:	f000 f9f9 	bl	800289c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024aa:	f7ff ffb7 	bl	800241c <main>
  bx lr
 80024ae:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80024b0:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 80024b4:	08002960 	.word	0x08002960
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 80024b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80024bc:	2000001c 	.word	0x2000001c
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 80024c0:	2000001c 	.word	0x2000001c
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 80024c4:	20000098 	.word	0x20000098

080024c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024c8:	e7fe      	b.n	80024c8 <ADC1_IRQHandler>
	...

080024cc <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr

080024d8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80024dc:	e7fe      	b.n	80024dc <HardFault_Handler+0x4>
 80024de:	bf00      	nop

080024e0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80024e4:	e7fe      	b.n	80024e4 <MemManage_Handler+0x4>
 80024e6:	bf00      	nop

080024e8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80024ec:	e7fe      	b.n	80024ec <BusFault_Handler+0x4>
 80024ee:	bf00      	nop

080024f0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80024f4:	e7fe      	b.n	80024f4 <UsageFault_Handler+0x4>
 80024f6:	bf00      	nop

080024f8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr

08002504 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr

08002528 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 800252c:	4a15      	ldr	r2, [pc, #84]	; (8002584 <SystemInit+0x5c>)
 800252e:	4b15      	ldr	r3, [pc, #84]	; (8002584 <SystemInit+0x5c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002536:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8002538:	4912      	ldr	r1, [pc, #72]	; (8002584 <SystemInit+0x5c>)
 800253a:	4b12      	ldr	r3, [pc, #72]	; (8002584 <SystemInit+0x5c>)
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	4b12      	ldr	r3, [pc, #72]	; (8002588 <SystemInit+0x60>)
 8002540:	4013      	ands	r3, r2
 8002542:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8002544:	4a0f      	ldr	r2, [pc, #60]	; (8002584 <SystemInit+0x5c>)
 8002546:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <SystemInit+0x5c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800254e:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8002552:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002554:	4a0b      	ldr	r2, [pc, #44]	; (8002584 <SystemInit+0x5c>)
 8002556:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <SystemInit+0x5c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800255e:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8002560:	4a08      	ldr	r2, [pc, #32]	; (8002584 <SystemInit+0x5c>)
 8002562:	4b08      	ldr	r3, [pc, #32]	; (8002584 <SystemInit+0x5c>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800256a:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 800256c:	4b05      	ldr	r3, [pc, #20]	; (8002584 <SystemInit+0x5c>)
 800256e:	2200      	movs	r2, #0
 8002570:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8002572:	f000 f80d 	bl	8002590 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002576:	4b05      	ldr	r3, [pc, #20]	; (800258c <SystemInit+0x64>)
 8002578:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800257c:	609a      	str	r2, [r3, #8]
#endif
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800
 8002588:	88ffc00c 	.word	0x88ffc00c
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	607b      	str	r3, [r7, #4]
 800259a:	2300      	movs	r3, #0
 800259c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800259e:	4a41      	ldr	r2, [pc, #260]	; (80026a4 <SetSysClock+0x114>)
 80025a0:	4b40      	ldr	r3, [pc, #256]	; (80026a4 <SetSysClock+0x114>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80025aa:	4b3e      	ldr	r3, [pc, #248]	; (80026a4 <SetSysClock+0x114>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3301      	adds	r3, #1
 80025b8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d103      	bne.n	80025c8 <SetSysClock+0x38>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80025c6:	d1f0      	bne.n	80025aa <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80025c8:	4b36      	ldr	r3, [pc, #216]	; (80026a4 <SetSysClock+0x114>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d002      	beq.n	80025da <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80025d4:	2301      	movs	r3, #1
 80025d6:	603b      	str	r3, [r7, #0]
 80025d8:	e001      	b.n	80025de <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80025da:	2300      	movs	r3, #0
 80025dc:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d15a      	bne.n	800269a <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 80025e4:	4a30      	ldr	r2, [pc, #192]	; (80026a8 <SetSysClock+0x118>)
 80025e6:	4b30      	ldr	r3, [pc, #192]	; (80026a8 <SetSysClock+0x118>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f043 0304 	orr.w	r3, r3, #4
 80025ee:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 80025f0:	4a2d      	ldr	r2, [pc, #180]	; (80026a8 <SetSysClock+0x118>)
 80025f2:	4b2d      	ldr	r3, [pc, #180]	; (80026a8 <SetSysClock+0x118>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f043 0302 	orr.w	r3, r3, #2
 80025fa:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 80025fc:	4a2a      	ldr	r2, [pc, #168]	; (80026a8 <SetSysClock+0x118>)
 80025fe:	4b2a      	ldr	r3, [pc, #168]	; (80026a8 <SetSysClock+0x118>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002608:	4a26      	ldr	r2, [pc, #152]	; (80026a4 <SetSysClock+0x114>)
 800260a:	4b26      	ldr	r3, [pc, #152]	; (80026a4 <SetSysClock+0x114>)
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002612:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8002614:	4b25      	ldr	r3, [pc, #148]	; (80026ac <SetSysClock+0x11c>)
 8002616:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800261a:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 800261c:	bf00      	nop
 800261e:	4b23      	ldr	r3, [pc, #140]	; (80026ac <SetSysClock+0x11c>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f9      	bne.n	800261e <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800262a:	4a1e      	ldr	r2, [pc, #120]	; (80026a4 <SetSysClock+0x114>)
 800262c:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <SetSysClock+0x114>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002632:	4a1c      	ldr	r2, [pc, #112]	; (80026a4 <SetSysClock+0x114>)
 8002634:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <SetSysClock+0x114>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 800263a:	4a1a      	ldr	r2, [pc, #104]	; (80026a4 <SetSysClock+0x114>)
 800263c:	4b19      	ldr	r3, [pc, #100]	; (80026a4 <SetSysClock+0x114>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 8002642:	4a18      	ldr	r2, [pc, #96]	; (80026a4 <SetSysClock+0x114>)
 8002644:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <SetSysClock+0x114>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800264c:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 800264e:	4a15      	ldr	r2, [pc, #84]	; (80026a4 <SetSysClock+0x114>)
 8002650:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <SetSysClock+0x114>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8002658:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800265a:	4a12      	ldr	r2, [pc, #72]	; (80026a4 <SetSysClock+0x114>)
 800265c:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <SetSysClock+0x114>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002664:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002666:	bf00      	nop
 8002668:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <SetSysClock+0x114>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0f9      	beq.n	8002668 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002674:	4a0b      	ldr	r2, [pc, #44]	; (80026a4 <SetSysClock+0x114>)
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <SetSysClock+0x114>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f023 0303 	bic.w	r3, r3, #3
 800267e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8002680:	4a08      	ldr	r2, [pc, #32]	; (80026a4 <SetSysClock+0x114>)
 8002682:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <SetSysClock+0x114>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f043 0303 	orr.w	r3, r3, #3
 800268a:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 800268c:	bf00      	nop
 800268e:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <SetSysClock+0x114>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	2b0c      	cmp	r3, #12
 8002698:	d1f9      	bne.n	800268e <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40023c00 	.word	0x40023c00
 80026ac:	40007000 	.word	0x40007000

080026b0 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
	int div = 1;
 80026bc:	2301      	movs	r3, #1
 80026be:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80026c0:	e004      	b.n	80026cc <ts_itoa+0x1c>
		div *= base;
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	fb02 f303 	mul.w	r3, r2, r3
 80026ca:	617b      	str	r3, [r7, #20]
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
	int div = 1;
	while (d/div >= base)
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d2f3      	bcs.n	80026c2 <ts_itoa+0x12>
		div *= base;

	while (div != 0)
 80026da:	e029      	b.n	8002730 <ts_itoa+0x80>
	{
		int num = d/div;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e4:	613b      	str	r3, [r7, #16]
		d = d%div;
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80026ee:	fb02 f201 	mul.w	r2, r2, r1
 80026f2:	1a9b      	subs	r3, r3, r2
 80026f4:	60bb      	str	r3, [r7, #8]
		div /= base;
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80026fe:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	2b09      	cmp	r3, #9
 8002704:	dd0a      	ble.n	800271c <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	1c59      	adds	r1, r3, #1
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	6011      	str	r1, [r2, #0]
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	3237      	adds	r2, #55	; 0x37
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	701a      	strb	r2, [r3, #0]
 800271a:	e009      	b.n	8002730 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	1c59      	adds	r1, r3, #1
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	6011      	str	r1, [r2, #0]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	3230      	adds	r2, #48	; 0x30
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	701a      	strb	r2, [r3, #0]
{
	int div = 1;
	while (d/div >= base)
		div *= base;

	while (div != 0)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1d2      	bne.n	80026dc <ts_itoa+0x2c>
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
	}
}
 8002736:	bf00      	nop
 8002738:	371c      	adds	r7, #28
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr

08002740 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8002750:	e07d      	b.n	800284e <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b25      	cmp	r3, #37	; 0x25
 8002758:	d171      	bne.n	800283e <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	3301      	adds	r3, #1
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b64      	cmp	r3, #100	; 0x64
 8002766:	d01e      	beq.n	80027a6 <ts_formatstring+0x66>
 8002768:	2b64      	cmp	r3, #100	; 0x64
 800276a:	dc06      	bgt.n	800277a <ts_formatstring+0x3a>
 800276c:	2b58      	cmp	r3, #88	; 0x58
 800276e:	d050      	beq.n	8002812 <ts_formatstring+0xd2>
 8002770:	2b63      	cmp	r3, #99	; 0x63
 8002772:	d00e      	beq.n	8002792 <ts_formatstring+0x52>
 8002774:	2b25      	cmp	r3, #37	; 0x25
 8002776:	d058      	beq.n	800282a <ts_formatstring+0xea>
 8002778:	e05d      	b.n	8002836 <ts_formatstring+0xf6>
 800277a:	2b73      	cmp	r3, #115	; 0x73
 800277c:	d02b      	beq.n	80027d6 <ts_formatstring+0x96>
 800277e:	2b73      	cmp	r3, #115	; 0x73
 8002780:	dc02      	bgt.n	8002788 <ts_formatstring+0x48>
 8002782:	2b69      	cmp	r3, #105	; 0x69
 8002784:	d00f      	beq.n	80027a6 <ts_formatstring+0x66>
 8002786:	e056      	b.n	8002836 <ts_formatstring+0xf6>
 8002788:	2b75      	cmp	r3, #117	; 0x75
 800278a:	d037      	beq.n	80027fc <ts_formatstring+0xbc>
 800278c:	2b78      	cmp	r3, #120	; 0x78
 800278e:	d040      	beq.n	8002812 <ts_formatstring+0xd2>
 8002790:	e051      	b.n	8002836 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	60fa      	str	r2, [r7, #12]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	1d11      	adds	r1, r2, #4
 800279c:	6079      	str	r1, [r7, #4]
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	701a      	strb	r2, [r3, #0]
				break;
 80027a4:	e047      	b.n	8002836 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	1d1a      	adds	r2, r3, #4
 80027aa:	607a      	str	r2, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	da07      	bge.n	80027c6 <ts_formatstring+0x86>
					{
						val *= -1;
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	425b      	negs	r3, r3
 80027ba:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	60fa      	str	r2, [r7, #12]
 80027c2:	222d      	movs	r2, #45	; 0x2d
 80027c4:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 80027c6:	69f9      	ldr	r1, [r7, #28]
 80027c8:	f107 030c 	add.w	r3, r7, #12
 80027cc:	220a      	movs	r2, #10
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff ff6e 	bl	80026b0 <ts_itoa>
				}
				break;
 80027d4:	e02f      	b.n	8002836 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	1d1a      	adds	r2, r3, #4
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	61bb      	str	r3, [r7, #24]
					while (*arg)
 80027e0:	e007      	b.n	80027f2 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	60fa      	str	r2, [r7, #12]
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	1c51      	adds	r1, r2, #1
 80027ec:	61b9      	str	r1, [r7, #24]
 80027ee:	7812      	ldrb	r2, [r2, #0]
 80027f0:	701a      	strb	r2, [r3, #0]
				}
				break;
			  case 's':
				{
					char * arg = va_arg(va, char *);
					while (*arg)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f3      	bne.n	80027e2 <ts_formatstring+0xa2>
					{
						*buf++ = *arg++;
					}
				}
				break;
 80027fa:	e01c      	b.n	8002836 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	1d1a      	adds	r2, r3, #4
 8002800:	607a      	str	r2, [r7, #4]
 8002802:	6819      	ldr	r1, [r3, #0]
 8002804:	f107 030c 	add.w	r3, r7, #12
 8002808:	220a      	movs	r2, #10
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff ff50 	bl	80026b0 <ts_itoa>
				break;
 8002810:	e011      	b.n	8002836 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	1d1a      	adds	r2, r3, #4
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4619      	mov	r1, r3
 800281c:	f107 030c 	add.w	r3, r7, #12
 8002820:	2210      	movs	r2, #16
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff ff44 	bl	80026b0 <ts_itoa>
				break;
 8002828:	e005      	b.n	8002836 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	60fa      	str	r2, [r7, #12]
 8002830:	2225      	movs	r2, #37	; 0x25
 8002832:	701a      	strb	r2, [r3, #0]
				  break;
 8002834:	bf00      	nop
			}
			fmt++;
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	3301      	adds	r3, #1
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	e007      	b.n	800284e <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	60fa      	str	r2, [r7, #12]
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	1c51      	adds	r1, r2, #1
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	7812      	ldrb	r2, [r2, #0]
 800284c:	701a      	strb	r2, [r3, #0]
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
	char *start_buf = buf;
	while(*fmt)
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	f47f af7d 	bne.w	8002752 <ts_formatstring+0x12>
		else
		{
			*buf++ = *fmt++;
		}
	}
	*buf = 0;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	461a      	mov	r2, r3
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	1ad3      	subs	r3, r2, r3
}
 8002866:	4618      	mov	r0, r3
 8002868:	3720      	adds	r7, #32
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop

08002870 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8002870:	b40e      	push	{r1, r2, r3}
 8002872:	b580      	push	{r7, lr}
 8002874:	b085      	sub	sp, #20
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 800287a:	f107 0320 	add.w	r3, r7, #32
 800287e:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	69f9      	ldr	r1, [r7, #28]
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff ff5b 	bl	8002740 <ts_formatstring>
 800288a:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 800288c:	68fb      	ldr	r3, [r7, #12]
}
 800288e:	4618      	mov	r0, r3
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002898:	b003      	add	sp, #12
 800289a:	4770      	bx	lr

0800289c <__libc_init_array>:
 800289c:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <__libc_init_array+0x3c>)
 800289e:	b570      	push	{r4, r5, r6, lr}
 80028a0:	461e      	mov	r6, r3
 80028a2:	4c0e      	ldr	r4, [pc, #56]	; (80028dc <__libc_init_array+0x40>)
 80028a4:	2500      	movs	r5, #0
 80028a6:	1ae4      	subs	r4, r4, r3
 80028a8:	10a4      	asrs	r4, r4, #2
 80028aa:	42a5      	cmp	r5, r4
 80028ac:	d004      	beq.n	80028b8 <__libc_init_array+0x1c>
 80028ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028b2:	4798      	blx	r3
 80028b4:	3501      	adds	r5, #1
 80028b6:	e7f8      	b.n	80028aa <__libc_init_array+0xe>
 80028b8:	f000 f816 	bl	80028e8 <_init>
 80028bc:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <__libc_init_array+0x44>)
 80028be:	4c09      	ldr	r4, [pc, #36]	; (80028e4 <__libc_init_array+0x48>)
 80028c0:	461e      	mov	r6, r3
 80028c2:	1ae4      	subs	r4, r4, r3
 80028c4:	10a4      	asrs	r4, r4, #2
 80028c6:	2500      	movs	r5, #0
 80028c8:	42a5      	cmp	r5, r4
 80028ca:	d004      	beq.n	80028d6 <__libc_init_array+0x3a>
 80028cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028d0:	4798      	blx	r3
 80028d2:	3501      	adds	r5, #1
 80028d4:	e7f8      	b.n	80028c8 <__libc_init_array+0x2c>
 80028d6:	bd70      	pop	{r4, r5, r6, pc}
 80028d8:	08002958 	.word	0x08002958
 80028dc:	08002958 	.word	0x08002958
 80028e0:	08002958 	.word	0x08002958
 80028e4:	0800295c 	.word	0x0800295c

080028e8 <_init>:
 80028e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ea:	bf00      	nop
 80028ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ee:	bc08      	pop	{r3}
 80028f0:	469e      	mov	lr, r3
 80028f2:	4770      	bx	lr

080028f4 <_fini>:
 80028f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f6:	bf00      	nop
 80028f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028fa:	bc08      	pop	{r3}
 80028fc:	469e      	mov	lr, r3
 80028fe:	4770      	bx	lr
