
quadrocopter_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001434  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08001570  08001570  00011570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001578  08001578  00011578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800157c  0800157c  0001157c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  20000000  08001580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  2000001c  0800159c  0002001c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000038  0800159c  00020038  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00003f3a  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000ce6  00000000  00000000  00023f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000548  00000000  00000000  00024c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004b0  00000000  00000000  000251b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001d35  00000000  00000000  00025660  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000018e2  00000000  00000000  00027395  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  00028c77  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000157c  00000000  00000000  00028cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002a274  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000001c 	.word	0x2000001c
 8000158:	00000000 	.word	0x00000000
 800015c:	08001558 	.word	0x08001558

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000020 	.word	0x20000020
 8000178:	08001558 	.word	0x08001558

0800017c <__aeabi_frsub>:
 800017c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__addsf3>
 8000182:	bf00      	nop

08000184 <__aeabi_fsub>:
 8000184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000188 <__addsf3>:
 8000188:	0042      	lsls	r2, r0, #1
 800018a:	bf1f      	itttt	ne
 800018c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000190:	ea92 0f03 	teqne	r2, r3
 8000194:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000198:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800019c:	d06a      	beq.n	8000274 <__addsf3+0xec>
 800019e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001a6:	bfc1      	itttt	gt
 80001a8:	18d2      	addgt	r2, r2, r3
 80001aa:	4041      	eorgt	r1, r0
 80001ac:	4048      	eorgt	r0, r1
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	bfb8      	it	lt
 80001b2:	425b      	neglt	r3, r3
 80001b4:	2b19      	cmp	r3, #25
 80001b6:	bf88      	it	hi
 80001b8:	4770      	bxhi	lr
 80001ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001c6:	bf18      	it	ne
 80001c8:	4240      	negne	r0, r0
 80001ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4249      	negne	r1, r1
 80001da:	ea92 0f03 	teq	r2, r3
 80001de:	d03f      	beq.n	8000260 <__addsf3+0xd8>
 80001e0:	f1a2 0201 	sub.w	r2, r2, #1
 80001e4:	fa41 fc03 	asr.w	ip, r1, r3
 80001e8:	eb10 000c 	adds.w	r0, r0, ip
 80001ec:	f1c3 0320 	rsb	r3, r3, #32
 80001f0:	fa01 f103 	lsl.w	r1, r1, r3
 80001f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f8:	d502      	bpl.n	8000200 <__addsf3+0x78>
 80001fa:	4249      	negs	r1, r1
 80001fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000200:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000204:	d313      	bcc.n	800022e <__addsf3+0xa6>
 8000206:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020a:	d306      	bcc.n	800021a <__addsf3+0x92>
 800020c:	0840      	lsrs	r0, r0, #1
 800020e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000212:	f102 0201 	add.w	r2, r2, #1
 8000216:	2afe      	cmp	r2, #254	; 0xfe
 8000218:	d251      	bcs.n	80002be <__addsf3+0x136>
 800021a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800021e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000222:	bf08      	it	eq
 8000224:	f020 0001 	biceq.w	r0, r0, #1
 8000228:	ea40 0003 	orr.w	r0, r0, r3
 800022c:	4770      	bx	lr
 800022e:	0049      	lsls	r1, r1, #1
 8000230:	eb40 0000 	adc.w	r0, r0, r0
 8000234:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000238:	f1a2 0201 	sub.w	r2, r2, #1
 800023c:	d1ed      	bne.n	800021a <__addsf3+0x92>
 800023e:	fab0 fc80 	clz	ip, r0
 8000242:	f1ac 0c08 	sub.w	ip, ip, #8
 8000246:	ebb2 020c 	subs.w	r2, r2, ip
 800024a:	fa00 f00c 	lsl.w	r0, r0, ip
 800024e:	bfaa      	itet	ge
 8000250:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000254:	4252      	neglt	r2, r2
 8000256:	4318      	orrge	r0, r3
 8000258:	bfbc      	itt	lt
 800025a:	40d0      	lsrlt	r0, r2
 800025c:	4318      	orrlt	r0, r3
 800025e:	4770      	bx	lr
 8000260:	f092 0f00 	teq	r2, #0
 8000264:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000268:	bf06      	itte	eq
 800026a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800026e:	3201      	addeq	r2, #1
 8000270:	3b01      	subne	r3, #1
 8000272:	e7b5      	b.n	80001e0 <__addsf3+0x58>
 8000274:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000278:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800027c:	bf18      	it	ne
 800027e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000282:	d021      	beq.n	80002c8 <__addsf3+0x140>
 8000284:	ea92 0f03 	teq	r2, r3
 8000288:	d004      	beq.n	8000294 <__addsf3+0x10c>
 800028a:	f092 0f00 	teq	r2, #0
 800028e:	bf08      	it	eq
 8000290:	4608      	moveq	r0, r1
 8000292:	4770      	bx	lr
 8000294:	ea90 0f01 	teq	r0, r1
 8000298:	bf1c      	itt	ne
 800029a:	2000      	movne	r0, #0
 800029c:	4770      	bxne	lr
 800029e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a2:	d104      	bne.n	80002ae <__addsf3+0x126>
 80002a4:	0040      	lsls	r0, r0, #1
 80002a6:	bf28      	it	cs
 80002a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b2:	bf3c      	itt	cc
 80002b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bxcc	lr
 80002ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	4770      	bx	lr
 80002c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002cc:	bf16      	itet	ne
 80002ce:	4608      	movne	r0, r1
 80002d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d4:	4601      	movne	r1, r0
 80002d6:	0242      	lsls	r2, r0, #9
 80002d8:	bf06      	itte	eq
 80002da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002de:	ea90 0f01 	teqeq	r0, r1
 80002e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_ui2f>:
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e004      	b.n	80002f8 <__aeabi_i2f+0x8>
 80002ee:	bf00      	nop

080002f0 <__aeabi_i2f>:
 80002f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f4:	bf48      	it	mi
 80002f6:	4240      	negmi	r0, r0
 80002f8:	ea5f 0c00 	movs.w	ip, r0
 80002fc:	bf08      	it	eq
 80002fe:	4770      	bxeq	lr
 8000300:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000304:	4601      	mov	r1, r0
 8000306:	f04f 0000 	mov.w	r0, #0
 800030a:	e01c      	b.n	8000346 <__aeabi_l2f+0x2a>

0800030c <__aeabi_ul2f>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	e00a      	b.n	8000330 <__aeabi_l2f+0x14>
 800031a:	bf00      	nop

0800031c <__aeabi_l2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000328:	d502      	bpl.n	8000330 <__aeabi_l2f+0x14>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	ea5f 0c01 	movs.w	ip, r1
 8000334:	bf02      	ittt	eq
 8000336:	4684      	moveq	ip, r0
 8000338:	4601      	moveq	r1, r0
 800033a:	2000      	moveq	r0, #0
 800033c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000340:	bf08      	it	eq
 8000342:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000346:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034a:	fabc f28c 	clz	r2, ip
 800034e:	3a08      	subs	r2, #8
 8000350:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000354:	db10      	blt.n	8000378 <__aeabi_l2f+0x5c>
 8000356:	fa01 fc02 	lsl.w	ip, r1, r2
 800035a:	4463      	add	r3, ip
 800035c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	fa20 f202 	lsr.w	r2, r0, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	f020 0001 	biceq.w	r0, r0, #1
 8000376:	4770      	bx	lr
 8000378:	f102 0220 	add.w	r2, r2, #32
 800037c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000380:	f1c2 0220 	rsb	r2, r2, #32
 8000384:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000388:	fa21 f202 	lsr.w	r2, r1, r2
 800038c:	eb43 0002 	adc.w	r0, r3, r2
 8000390:	bf08      	it	eq
 8000392:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000396:	4770      	bx	lr

08000398 <__aeabi_fmul>:
 8000398:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800039c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003a0:	bf1e      	ittt	ne
 80003a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003a6:	ea92 0f0c 	teqne	r2, ip
 80003aa:	ea93 0f0c 	teqne	r3, ip
 80003ae:	d06f      	beq.n	8000490 <__aeabi_fmul+0xf8>
 80003b0:	441a      	add	r2, r3
 80003b2:	ea80 0c01 	eor.w	ip, r0, r1
 80003b6:	0240      	lsls	r0, r0, #9
 80003b8:	bf18      	it	ne
 80003ba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003be:	d01e      	beq.n	80003fe <__aeabi_fmul+0x66>
 80003c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003c4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003c8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003cc:	fba0 3101 	umull	r3, r1, r0, r1
 80003d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003d4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003d8:	bf3e      	ittt	cc
 80003da:	0049      	lslcc	r1, r1, #1
 80003dc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003e0:	005b      	lslcc	r3, r3, #1
 80003e2:	ea40 0001 	orr.w	r0, r0, r1
 80003e6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ea:	2afd      	cmp	r2, #253	; 0xfd
 80003ec:	d81d      	bhi.n	800042a <__aeabi_fmul+0x92>
 80003ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003f6:	bf08      	it	eq
 80003f8:	f020 0001 	biceq.w	r0, r0, #1
 80003fc:	4770      	bx	lr
 80003fe:	f090 0f00 	teq	r0, #0
 8000402:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000406:	bf08      	it	eq
 8000408:	0249      	lsleq	r1, r1, #9
 800040a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800040e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000412:	3a7f      	subs	r2, #127	; 0x7f
 8000414:	bfc2      	ittt	gt
 8000416:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800041a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800041e:	4770      	bxgt	lr
 8000420:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000424:	f04f 0300 	mov.w	r3, #0
 8000428:	3a01      	subs	r2, #1
 800042a:	dc5d      	bgt.n	80004e8 <__aeabi_fmul+0x150>
 800042c:	f112 0f19 	cmn.w	r2, #25
 8000430:	bfdc      	itt	le
 8000432:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000436:	4770      	bxle	lr
 8000438:	f1c2 0200 	rsb	r2, r2, #0
 800043c:	0041      	lsls	r1, r0, #1
 800043e:	fa21 f102 	lsr.w	r1, r1, r2
 8000442:	f1c2 0220 	rsb	r2, r2, #32
 8000446:	fa00 fc02 	lsl.w	ip, r0, r2
 800044a:	ea5f 0031 	movs.w	r0, r1, rrx
 800044e:	f140 0000 	adc.w	r0, r0, #0
 8000452:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000456:	bf08      	it	eq
 8000458:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800045c:	4770      	bx	lr
 800045e:	f092 0f00 	teq	r2, #0
 8000462:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000466:	bf02      	ittt	eq
 8000468:	0040      	lsleq	r0, r0, #1
 800046a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800046e:	3a01      	subeq	r2, #1
 8000470:	d0f9      	beq.n	8000466 <__aeabi_fmul+0xce>
 8000472:	ea40 000c 	orr.w	r0, r0, ip
 8000476:	f093 0f00 	teq	r3, #0
 800047a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800047e:	bf02      	ittt	eq
 8000480:	0049      	lsleq	r1, r1, #1
 8000482:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000486:	3b01      	subeq	r3, #1
 8000488:	d0f9      	beq.n	800047e <__aeabi_fmul+0xe6>
 800048a:	ea41 010c 	orr.w	r1, r1, ip
 800048e:	e78f      	b.n	80003b0 <__aeabi_fmul+0x18>
 8000490:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000494:	ea92 0f0c 	teq	r2, ip
 8000498:	bf18      	it	ne
 800049a:	ea93 0f0c 	teqne	r3, ip
 800049e:	d00a      	beq.n	80004b6 <__aeabi_fmul+0x11e>
 80004a0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004a4:	bf18      	it	ne
 80004a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004aa:	d1d8      	bne.n	800045e <__aeabi_fmul+0xc6>
 80004ac:	ea80 0001 	eor.w	r0, r0, r1
 80004b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004b4:	4770      	bx	lr
 80004b6:	f090 0f00 	teq	r0, #0
 80004ba:	bf17      	itett	ne
 80004bc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004c0:	4608      	moveq	r0, r1
 80004c2:	f091 0f00 	teqne	r1, #0
 80004c6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ca:	d014      	beq.n	80004f6 <__aeabi_fmul+0x15e>
 80004cc:	ea92 0f0c 	teq	r2, ip
 80004d0:	d101      	bne.n	80004d6 <__aeabi_fmul+0x13e>
 80004d2:	0242      	lsls	r2, r0, #9
 80004d4:	d10f      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004d6:	ea93 0f0c 	teq	r3, ip
 80004da:	d103      	bne.n	80004e4 <__aeabi_fmul+0x14c>
 80004dc:	024b      	lsls	r3, r1, #9
 80004de:	bf18      	it	ne
 80004e0:	4608      	movne	r0, r1
 80004e2:	d108      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004e4:	ea80 0001 	eor.w	r0, r0, r1
 80004e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004f4:	4770      	bx	lr
 80004f6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004fe:	4770      	bx	lr

08000500 <__aeabi_fdiv>:
 8000500:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000504:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000508:	bf1e      	ittt	ne
 800050a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800050e:	ea92 0f0c 	teqne	r2, ip
 8000512:	ea93 0f0c 	teqne	r3, ip
 8000516:	d069      	beq.n	80005ec <__aeabi_fdiv+0xec>
 8000518:	eba2 0203 	sub.w	r2, r2, r3
 800051c:	ea80 0c01 	eor.w	ip, r0, r1
 8000520:	0249      	lsls	r1, r1, #9
 8000522:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000526:	d037      	beq.n	8000598 <__aeabi_fdiv+0x98>
 8000528:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800052c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000530:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000534:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000538:	428b      	cmp	r3, r1
 800053a:	bf38      	it	cc
 800053c:	005b      	lslcc	r3, r3, #1
 800053e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000542:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000546:	428b      	cmp	r3, r1
 8000548:	bf24      	itt	cs
 800054a:	1a5b      	subcs	r3, r3, r1
 800054c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000550:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000554:	bf24      	itt	cs
 8000556:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800055a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800055e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000562:	bf24      	itt	cs
 8000564:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000568:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800056c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000570:	bf24      	itt	cs
 8000572:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000576:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	bf18      	it	ne
 800057e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000582:	d1e0      	bne.n	8000546 <__aeabi_fdiv+0x46>
 8000584:	2afd      	cmp	r2, #253	; 0xfd
 8000586:	f63f af50 	bhi.w	800042a <__aeabi_fmul+0x92>
 800058a:	428b      	cmp	r3, r1
 800058c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000590:	bf08      	it	eq
 8000592:	f020 0001 	biceq.w	r0, r0, #1
 8000596:	4770      	bx	lr
 8000598:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800059c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005a0:	327f      	adds	r2, #127	; 0x7f
 80005a2:	bfc2      	ittt	gt
 80005a4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005a8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005ac:	4770      	bxgt	lr
 80005ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005b2:	f04f 0300 	mov.w	r3, #0
 80005b6:	3a01      	subs	r2, #1
 80005b8:	e737      	b.n	800042a <__aeabi_fmul+0x92>
 80005ba:	f092 0f00 	teq	r2, #0
 80005be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005c2:	bf02      	ittt	eq
 80005c4:	0040      	lsleq	r0, r0, #1
 80005c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ca:	3a01      	subeq	r2, #1
 80005cc:	d0f9      	beq.n	80005c2 <__aeabi_fdiv+0xc2>
 80005ce:	ea40 000c 	orr.w	r0, r0, ip
 80005d2:	f093 0f00 	teq	r3, #0
 80005d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005da:	bf02      	ittt	eq
 80005dc:	0049      	lsleq	r1, r1, #1
 80005de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005e2:	3b01      	subeq	r3, #1
 80005e4:	d0f9      	beq.n	80005da <__aeabi_fdiv+0xda>
 80005e6:	ea41 010c 	orr.w	r1, r1, ip
 80005ea:	e795      	b.n	8000518 <__aeabi_fdiv+0x18>
 80005ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005f0:	ea92 0f0c 	teq	r2, ip
 80005f4:	d108      	bne.n	8000608 <__aeabi_fdiv+0x108>
 80005f6:	0242      	lsls	r2, r0, #9
 80005f8:	f47f af7d 	bne.w	80004f6 <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	f47f af70 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 8000604:	4608      	mov	r0, r1
 8000606:	e776      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000608:	ea93 0f0c 	teq	r3, ip
 800060c:	d104      	bne.n	8000618 <__aeabi_fdiv+0x118>
 800060e:	024b      	lsls	r3, r1, #9
 8000610:	f43f af4c 	beq.w	80004ac <__aeabi_fmul+0x114>
 8000614:	4608      	mov	r0, r1
 8000616:	e76e      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000618:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800061c:	bf18      	it	ne
 800061e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000622:	d1ca      	bne.n	80005ba <__aeabi_fdiv+0xba>
 8000624:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000628:	f47f af5c 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 800062c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000630:	f47f af3c 	bne.w	80004ac <__aeabi_fmul+0x114>
 8000634:	e75f      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000636:	bf00      	nop

08000638 <__aeabi_f2uiz>:
 8000638:	0042      	lsls	r2, r0, #1
 800063a:	d20e      	bcs.n	800065a <__aeabi_f2uiz+0x22>
 800063c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000640:	d30b      	bcc.n	800065a <__aeabi_f2uiz+0x22>
 8000642:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000646:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800064a:	d409      	bmi.n	8000660 <__aeabi_f2uiz+0x28>
 800064c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000650:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000654:	fa23 f002 	lsr.w	r0, r3, r2
 8000658:	4770      	bx	lr
 800065a:	f04f 0000 	mov.w	r0, #0
 800065e:	4770      	bx	lr
 8000660:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000664:	d101      	bne.n	800066a <__aeabi_f2uiz+0x32>
 8000666:	0242      	lsls	r2, r0, #9
 8000668:	d102      	bne.n	8000670 <__aeabi_f2uiz+0x38>
 800066a:	f04f 30ff 	mov.w	r0, #4294967295
 800066e:	4770      	bx	lr
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000678:	b480      	push	{r7}
 800067a:	b087      	sub	sp, #28
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
 8000692:	e07e      	b.n	8000792 <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000694:	2201      	movs	r2, #1
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	fa02 f303 	lsl.w	r3, r2, r3
 800069c:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	693b      	ldr	r3, [r7, #16]
 80006a4:	4013      	ands	r3, r2
 80006a6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80006a8:	68fa      	ldr	r2, [r7, #12]
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d16d      	bne.n	800078c <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	2103      	movs	r1, #3
 80006ba:	fa01 f303 	lsl.w	r3, r1, r3
 80006be:	43db      	mvns	r3, r3
 80006c0:	401a      	ands	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	791b      	ldrb	r3, [r3, #4]
 80006ce:	4619      	mov	r1, r3
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	fa01 f303 	lsl.w	r3, r1, r3
 80006d8:	431a      	orrs	r2, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	791b      	ldrb	r3, [r3, #4]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d003      	beq.n	80006ee <GPIO_Init+0x76>
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	791b      	ldrb	r3, [r3, #4]
 80006ea:	2b02      	cmp	r3, #2
 80006ec:	d136      	bne.n	800075c <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	689a      	ldr	r2, [r3, #8]
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	2103      	movs	r1, #3
 80006f8:	fa01 f303 	lsl.w	r3, r1, r3
 80006fc:	43db      	mvns	r3, r3
 80006fe:	401a      	ands	r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	689a      	ldr	r2, [r3, #8]
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	795b      	ldrb	r3, [r3, #5]
 800070c:	4619      	mov	r1, r3
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	fa01 f303 	lsl.w	r3, r1, r3
 8000716:	431a      	orrs	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	889b      	ldrh	r3, [r3, #4]
 8000720:	b29a      	uxth	r2, r3
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	b29b      	uxth	r3, r3
 8000726:	2101      	movs	r1, #1
 8000728:	fa01 f303 	lsl.w	r3, r1, r3
 800072c:	b29b      	uxth	r3, r3
 800072e:	43db      	mvns	r3, r3
 8000730:	b29b      	uxth	r3, r3
 8000732:	4013      	ands	r3, r2
 8000734:	b29a      	uxth	r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	889b      	ldrh	r3, [r3, #4]
 800073e:	b29b      	uxth	r3, r3
 8000740:	b21a      	sxth	r2, r3
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	799b      	ldrb	r3, [r3, #6]
 8000746:	4619      	mov	r1, r3
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	b29b      	uxth	r3, r3
 800074c:	fa01 f303 	lsl.w	r3, r1, r3
 8000750:	b21b      	sxth	r3, r3
 8000752:	4313      	orrs	r3, r2
 8000754:	b21b      	sxth	r3, r3
 8000756:	b29a      	uxth	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	68da      	ldr	r2, [r3, #12]
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	b29b      	uxth	r3, r3
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	2103      	movs	r1, #3
 8000768:	fa01 f303 	lsl.w	r3, r1, r3
 800076c:	43db      	mvns	r3, r3
 800076e:	401a      	ands	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	68da      	ldr	r2, [r3, #12]
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	79db      	ldrb	r3, [r3, #7]
 800077c:	4619      	mov	r1, r3
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	fa01 f303 	lsl.w	r3, r1, r3
 8000786:	431a      	orrs	r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	3301      	adds	r3, #1
 8000790:	617b      	str	r3, [r7, #20]
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	2b0f      	cmp	r3, #15
 8000796:	f67f af7d 	bls.w	8000694 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800079a:	bf00      	nop
 800079c:	371c      	adds	r7, #28
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr

080007a4 <GPIO_SetBits>:
  *        accesses. In this way, there is no risk of an IRQ occurring between
  *        the read and the modify access.
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	460b      	mov	r3, r1
 80007ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRRL = GPIO_Pin;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	887a      	ldrh	r2, [r7, #2]
 80007b4:	831a      	strh	r2, [r3, #24]
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr

080007c0 <GPIO_ResetBits>:
  *        accesses. In this way, there is no risk of an IRQ occurring between
  *        the read and the modify access.
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	460b      	mov	r3, r1
 80007ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRRH = GPIO_Pin;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	887a      	ldrh	r2, [r7, #2]
 80007d0:	835a      	strh	r2, [r3, #26]
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr

080007dc <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	460b      	mov	r3, r1
 80007e6:	807b      	strh	r3, [r7, #2]
 80007e8:	4613      	mov	r3, r2
 80007ea:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80007f4:	787a      	ldrb	r2, [r7, #1]
 80007f6:	887b      	ldrh	r3, [r7, #2]
 80007f8:	f003 0307 	and.w	r3, r3, #7
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000802:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000804:	887b      	ldrh	r3, [r7, #2]
 8000806:	08db      	lsrs	r3, r3, #3
 8000808:	b29b      	uxth	r3, r3
 800080a:	4618      	mov	r0, r3
 800080c:	887b      	ldrh	r3, [r7, #2]
 800080e:	08db      	lsrs	r3, r3, #3
 8000810:	b29b      	uxth	r3, r3
 8000812:	461a      	mov	r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3208      	adds	r2, #8
 8000818:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800081c:	887b      	ldrh	r3, [r7, #2]
 800081e:	f003 0307 	and.w	r3, r3, #7
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	210f      	movs	r1, #15
 8000826:	fa01 f303 	lsl.w	r3, r1, r3
 800082a:	43db      	mvns	r3, r3
 800082c:	ea02 0103 	and.w	r1, r2, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f100 0208 	add.w	r2, r0, #8
 8000836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800083a:	887b      	ldrh	r3, [r7, #2]
 800083c:	08db      	lsrs	r3, r3, #3
 800083e:	b29b      	uxth	r3, r3
 8000840:	461a      	mov	r2, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	3208      	adds	r2, #8
 8000846:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	4313      	orrs	r3, r2
 800084e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000850:	887b      	ldrh	r3, [r7, #2]
 8000852:	08db      	lsrs	r3, r3, #3
 8000854:	b29b      	uxth	r3, r3
 8000856:	461a      	mov	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3208      	adds	r2, #8
 800085c:	68b9      	ldr	r1, [r7, #8]
 800085e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr

0800086c <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800086c:	b480      	push	{r7}
 800086e:	b089      	sub	sp, #36	; 0x24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, presc = 0, msirange = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	61fb      	str	r3, [r7, #28]
 8000878:	2300      	movs	r3, #0
 800087a:	61bb      	str	r3, [r7, #24]
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	2300      	movs	r3, #0
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800088c:	4b5f      	ldr	r3, [pc, #380]	; (8000a0c <RCC_GetClocksFreq+0x1a0>)
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	f003 030c 	and.w	r3, r3, #12
 8000894:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	2b0c      	cmp	r3, #12
 800089a:	d865      	bhi.n	8000968 <RCC_GetClocksFreq+0xfc>
 800089c:	a201      	add	r2, pc, #4	; (adr r2, 80008a4 <RCC_GetClocksFreq+0x38>)
 800089e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a2:	bf00      	nop
 80008a4:	080008d9 	.word	0x080008d9
 80008a8:	08000969 	.word	0x08000969
 80008ac:	08000969 	.word	0x08000969
 80008b0:	08000969 	.word	0x08000969
 80008b4:	080008f9 	.word	0x080008f9
 80008b8:	08000969 	.word	0x08000969
 80008bc:	08000969 	.word	0x08000969
 80008c0:	08000969 	.word	0x08000969
 80008c4:	08000901 	.word	0x08000901
 80008c8:	08000969 	.word	0x08000969
 80008cc:	08000969 	.word	0x08000969
 80008d0:	08000969 	.word	0x08000969
 80008d4:	08000909 	.word	0x08000909
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 80008d8:	4b4c      	ldr	r3, [pc, #304]	; (8000a0c <RCC_GetClocksFreq+0x1a0>)
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80008e0:	0b5b      	lsrs	r3, r3, #13
 80008e2:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	3301      	adds	r3, #1
 80008e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	461a      	mov	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	601a      	str	r2, [r3, #0]
      break;
 80008f6:	e047      	b.n	8000988 <RCC_GetClocksFreq+0x11c>
    case 0x04:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4a45      	ldr	r2, [pc, #276]	; (8000a10 <RCC_GetClocksFreq+0x1a4>)
 80008fc:	601a      	str	r2, [r3, #0]
      break;
 80008fe:	e043      	b.n	8000988 <RCC_GetClocksFreq+0x11c>
    case 0x08:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a44      	ldr	r2, [pc, #272]	; (8000a14 <RCC_GetClocksFreq+0x1a8>)
 8000904:	601a      	str	r2, [r3, #0]
      break;
 8000906:	e03f      	b.n	8000988 <RCC_GetClocksFreq+0x11c>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000908:	4b40      	ldr	r3, [pc, #256]	; (8000a0c <RCC_GetClocksFreq+0x1a0>)
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000910:	61bb      	str	r3, [r7, #24]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8000912:	4b3e      	ldr	r3, [pc, #248]	; (8000a0c <RCC_GetClocksFreq+0x1a0>)
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800091a:	617b      	str	r3, [r7, #20]
      pllmul = PLLMulTable[(pllmul >> 18)];
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	0c9b      	lsrs	r3, r3, #18
 8000920:	4a3d      	ldr	r2, [pc, #244]	; (8000a18 <RCC_GetClocksFreq+0x1ac>)
 8000922:	5cd3      	ldrb	r3, [r2, r3]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	61bb      	str	r3, [r7, #24]
      plldiv = (plldiv >> 22) + 1;
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	0d9b      	lsrs	r3, r3, #22
 800092c:	3301      	adds	r3, #1
 800092e:	617b      	str	r3, [r7, #20]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000930:	4b36      	ldr	r3, [pc, #216]	; (8000a0c <RCC_GetClocksFreq+0x1a0>)
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000938:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d109      	bne.n	8000954 <RCC_GetClocksFreq+0xe8>
      {
        /* HSI oscillator clock selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	4a33      	ldr	r2, [pc, #204]	; (8000a10 <RCC_GetClocksFreq+0x1a4>)
 8000944:	fb02 f203 	mul.w	r2, r2, r3
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	fbb2 f2f3 	udiv	r2, r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8000952:	e019      	b.n	8000988 <RCC_GetClocksFreq+0x11c>
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	4a2f      	ldr	r2, [pc, #188]	; (8000a14 <RCC_GetClocksFreq+0x1a8>)
 8000958:	fb02 f203 	mul.w	r2, r2, r3
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	601a      	str	r2, [r3, #0]
      }
      break;
 8000966:	e00f      	b.n	8000988 <RCC_GetClocksFreq+0x11c>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8000968:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <RCC_GetClocksFreq+0x1a0>)
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000970:	0b5b      	lsrs	r3, r3, #13
 8000972:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	3301      	adds	r3, #1
 8000978:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	461a      	mov	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	601a      	str	r2, [r3, #0]
      break;
 8000986:	bf00      	nop
  }
  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000988:	4b20      	ldr	r3, [pc, #128]	; (8000a0c <RCC_GetClocksFreq+0x1a0>)
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000990:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	091b      	lsrs	r3, r3, #4
 8000996:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp]; 
 8000998:	4a20      	ldr	r2, [pc, #128]	; (8000a1c <RCC_GetClocksFreq+0x1b0>)
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	4413      	add	r3, r2
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	40da      	lsrs	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80009b0:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <RCC_GetClocksFreq+0x1a0>)
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80009b8:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	0a1b      	lsrs	r3, r3, #8
 80009be:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80009c0:	4a16      	ldr	r2, [pc, #88]	; (8000a1c <RCC_GetClocksFreq+0x1b0>)
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	4413      	add	r3, r2
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	60fb      	str	r3, [r7, #12]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	685a      	ldr	r2, [r3, #4]
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	40da      	lsrs	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <RCC_GetClocksFreq+0x1a0>)
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80009e0:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	0adb      	lsrs	r3, r3, #11
 80009e6:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80009e8:	4a0c      	ldr	r2, [pc, #48]	; (8000a1c <RCC_GetClocksFreq+0x1b0>)
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	4413      	add	r3, r2
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	685a      	ldr	r2, [r3, #4]
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	40da      	lsrs	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	60da      	str	r2, [r3, #12]
}
 8000a00:	bf00      	nop
 8000a02:	3724      	adds	r7, #36	; 0x24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	00f42400 	.word	0x00f42400
 8000a14:	007a1200 	.word	0x007a1200
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	2000000c 	.word	0x2000000c

08000a20 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a2c:	78fb      	ldrb	r3, [r7, #3]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d006      	beq.n	8000a40 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000a32:	4909      	ldr	r1, [pc, #36]	; (8000a58 <RCC_AHBPeriphClockCmd+0x38>)
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <RCC_AHBPeriphClockCmd+0x38>)
 8000a36:	69da      	ldr	r2, [r3, #28]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000a3e:	e006      	b.n	8000a4e <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000a40:	4905      	ldr	r1, [pc, #20]	; (8000a58 <RCC_AHBPeriphClockCmd+0x38>)
 8000a42:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <RCC_AHBPeriphClockCmd+0x38>)
 8000a44:	69da      	ldr	r2, [r3, #28]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	61cb      	str	r3, [r1, #28]
  }
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	40023800 	.word	0x40023800

08000a5c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	460b      	mov	r3, r1
 8000a66:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000a68:	78fb      	ldrb	r3, [r7, #3]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d006      	beq.n	8000a7c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000a6e:	4909      	ldr	r1, [pc, #36]	; (8000a94 <RCC_APB2PeriphClockCmd+0x38>)
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <RCC_APB2PeriphClockCmd+0x38>)
 8000a72:	6a1a      	ldr	r2, [r3, #32]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000a7a:	e006      	b.n	8000a8a <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000a7c:	4905      	ldr	r1, [pc, #20]	; (8000a94 <RCC_APB2PeriphClockCmd+0x38>)
 8000a7e:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <RCC_APB2PeriphClockCmd+0x38>)
 8000a80:	6a1a      	ldr	r2, [r3, #32]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	43db      	mvns	r3, r3
 8000a86:	4013      	ands	r3, r2
 8000a88:	620b      	str	r3, [r1, #32]
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	40023800 	.word	0x40023800

08000a98 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000aa4:	78fb      	ldrb	r3, [r7, #3]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d006      	beq.n	8000ab8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000aaa:	4909      	ldr	r1, [pc, #36]	; (8000ad0 <RCC_APB1PeriphClockCmd+0x38>)
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <RCC_APB1PeriphClockCmd+0x38>)
 8000aae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000ab6:	e006      	b.n	8000ac6 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000ab8:	4905      	ldr	r1, [pc, #20]	; (8000ad0 <RCC_APB1PeriphClockCmd+0x38>)
 8000aba:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <RCC_APB1PeriphClockCmd+0x38>)
 8000abc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	40023800 	.word	0x40023800

08000ad4 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000ae8:	89fb      	ldrh	r3, [r7, #14]
 8000aea:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8000aee:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	881a      	ldrh	r2, [r3, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	885b      	ldrh	r3, [r3, #2]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000b00:	4313      	orrs	r3, r2
 8000b02:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000b10:	4313      	orrs	r3, r2
 8000b12:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000b20:	4313      	orrs	r3, r2
 8000b22:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	89fb      	ldrh	r3, [r7, #14]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	89fa      	ldrh	r2, [r7, #14]
 8000b36:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	8b9b      	ldrh	r3, [r3, #28]
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	8a1a      	ldrh	r2, [r3, #16]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	821a      	strh	r2, [r3, #16]
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b68:	78fb      	ldrb	r3, [r7, #3]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d008      	beq.n	8000b80 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 8000b7e:	e007      	b.n	8000b90 <SPI_Cmd+0x34>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	881b      	ldrh	r3, [r3, #0]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	801a      	strh	r2, [r3, #0]
  }
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3
  *         in SPI mode or 2 or 3 in I2S mode.
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	899b      	ldrh	r3, [r3, #12]
 8000ba8:	b29b      	uxth	r3, r3
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr

08000bb4 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	887a      	ldrh	r2, [r7, #2]
 8000bc4:	819a      	strh	r2, [r3, #12]
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	891b      	ldrh	r3, [r3, #8]
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	887b      	ldrh	r3, [r7, #2]
 8000be8:	4013      	ands	r3, r2
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d002      	beq.n	8000bf6 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	73fb      	strb	r3, [r7, #15]
 8000bf4:	e001      	b.n	8000bfa <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that 
  *        contains the configuration information for the specified USART peripheral.
  * @retval None.
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	; 0x28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000c12:	2300      	movs	r3, #0
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
 8000c16:	2300      	movs	r3, #0
 8000c18:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }
   
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	8a1b      	ldrh	r3, [r3, #16]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	88db      	ldrh	r3, [r3, #6]
 8000c36:	461a      	mov	r2, r3
 8000c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	899b      	ldrh	r3, [r3, #12]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c50:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000c54:	f023 030c 	bic.w	r3, r3, #12
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	889a      	ldrh	r2, [r3, #4]
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	891b      	ldrh	r3, [r3, #8]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	461a      	mov	r2, r3
 8000c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c72:	4313      	orrs	r3, r2
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	8a9b      	ldrh	r3, [r3, #20]
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	899b      	ldrh	r3, [r3, #12]
 8000c92:	461a      	mov	r2, r3
 8000c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c96:	4313      	orrs	r3, r2
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000ca2:	f107 0308 	add.w	r3, r7, #8
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fde0 	bl	800086c <RCC_GetClocksFreq>
  if (USARTx == USART1) 
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a2e      	ldr	r2, [pc, #184]	; (8000d68 <USART_Init+0x160>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d102      	bne.n	8000cba <USART_Init+0xb2>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	623b      	str	r3, [r7, #32]
 8000cb8:	e001      	b.n	8000cbe <USART_Init+0xb6>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	623b      	str	r3, [r7, #32]
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	899b      	ldrh	r3, [r3, #12]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	b21b      	sxth	r3, r3
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	da0c      	bge.n	8000ce4 <USART_Init+0xdc>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000cca:	6a3a      	ldr	r2, [r7, #32]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	4413      	add	r3, r2
 8000cd2:	009a      	lsls	r2, r3, #2
 8000cd4:	441a      	add	r2, r3
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce0:	61fb      	str	r3, [r7, #28]
 8000ce2:	e00b      	b.n	8000cfc <USART_Init+0xf4>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000ce4:	6a3a      	ldr	r2, [r7, #32]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	4413      	add	r3, r2
 8000cec:	009a      	lsls	r2, r3, #2
 8000cee:	441a      	add	r2, r3
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfa:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	4a1b      	ldr	r2, [pc, #108]	; (8000d6c <USART_Init+0x164>)
 8000d00:	fba2 2303 	umull	r2, r3, r2, r3
 8000d04:	095b      	lsrs	r3, r3, #5
 8000d06:	011b      	lsls	r3, r3, #4
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0c:	091b      	lsrs	r3, r3, #4
 8000d0e:	2264      	movs	r2, #100	; 0x64
 8000d10:	fb02 f303 	mul.w	r3, r2, r3
 8000d14:	69fa      	ldr	r2, [r7, #28]
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	899b      	ldrh	r3, [r3, #12]
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	b21b      	sxth	r3, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	da0c      	bge.n	8000d40 <USART_Init+0x138>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	3332      	adds	r3, #50	; 0x32
 8000d2c:	4a0f      	ldr	r2, [pc, #60]	; (8000d6c <USART_Init+0x164>)
 8000d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d32:	095b      	lsrs	r3, r3, #5
 8000d34:	f003 0307 	and.w	r3, r3, #7
 8000d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d3e:	e00b      	b.n	8000d58 <USART_Init+0x150>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	011b      	lsls	r3, r3, #4
 8000d44:	3332      	adds	r3, #50	; 0x32
 8000d46:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <USART_Init+0x164>)
 8000d48:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4c:	095b      	lsrs	r3, r3, #5
 8000d4e:	f003 030f 	and.w	r3, r3, #15
 8000d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d54:	4313      	orrs	r3, r2
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
  }
 
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	811a      	strh	r2, [r3, #8]
}
 8000d60:	bf00      	nop
 8000d62:	3728      	adds	r7, #40	; 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40013800 	.word	0x40013800
 8000d6c:	51eb851f 	.word	0x51eb851f

08000d70 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d7c:	78fb      	ldrb	r3, [r7, #3]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d008      	beq.n	8000d94 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	899b      	ldrh	r3, [r3, #12]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d8c:	b29a      	uxth	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000d92:	e007      	b.n	8000da4 <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	899b      	ldrh	r3, [r3, #12]
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	819a      	strh	r2, [r3, #12]
  }
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop

08000db0 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None.
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	460b      	mov	r3, r1
 8000dba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000dbc:	887b      	ldrh	r3, [r7, #2]
 8000dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	809a      	strh	r2, [r3, #4]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop

08000dd4 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag.
  *     @arg USART_FLAG_PE:   Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000de0:	2300      	movs	r3, #0
 8000de2:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	887b      	ldrh	r3, [r7, #2]
 8000dec:	4013      	ands	r3, r2
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d002      	beq.n	8000dfa <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000df4:	2301      	movs	r3, #1
 8000df6:	73fb      	strb	r3, [r7, #15]
 8000df8:	e001      	b.n	8000dfe <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <usart_init>:
/* Includes */
#include <functions.h>



void usart_init(){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000e12:	2101      	movs	r1, #1
 8000e14:	2001      	movs	r0, #1
 8000e16:	f7ff fe03 	bl	8000a20 <RCC_AHBPeriphClockCmd>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 8000e1a:	2207      	movs	r2, #7
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	481b      	ldr	r0, [pc, #108]	; (8000e8c <usart_init+0x80>)
 8000e20:	f7ff fcdc 	bl	80007dc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 8000e24:	2207      	movs	r2, #7
 8000e26:	2103      	movs	r1, #3
 8000e28:	4818      	ldr	r0, [pc, #96]	; (8000e8c <usart_init+0x80>)
 8000e2a:	f7ff fcd7 	bl	80007dc <GPIO_PinAFConfig>

	GPIO_InitTypeDef GPIO_usart;

	GPIO_usart.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8000e2e:	230c      	movs	r3, #12
 8000e30:	613b      	str	r3, [r7, #16]
	GPIO_usart.GPIO_Mode = GPIO_Mode_AF;
 8000e32:	2302      	movs	r3, #2
 8000e34:	753b      	strb	r3, [r7, #20]
	GPIO_usart.GPIO_OType = GPIO_OType_PP;
 8000e36:	2300      	movs	r3, #0
 8000e38:	75bb      	strb	r3, [r7, #22]
	GPIO_usart.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	75fb      	strb	r3, [r7, #23]
	GPIO_usart.GPIO_Speed = GPIO_Speed_40MHz;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	757b      	strb	r3, [r7, #21]

	GPIO_Init(GPIOA,&GPIO_usart);
 8000e42:	f107 0310 	add.w	r3, r7, #16
 8000e46:	4619      	mov	r1, r3
 8000e48:	4810      	ldr	r0, [pc, #64]	; (8000e8c <usart_init+0x80>)
 8000e4a:	f7ff fc15 	bl	8000678 <GPIO_Init>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000e4e:	2101      	movs	r1, #1
 8000e50:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000e54:	f7ff fe20 	bl	8000a98 <RCC_APB1PeriphClockCmd>

	USART_InitTypeDef USART_InitStructure;
	USART_InitStructure.USART_BaudRate = 9600;
 8000e58:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000e5c:	603b      	str	r3, [r7, #0]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	80bb      	strh	r3, [r7, #4]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	80fb      	strh	r3, [r7, #6]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8000e66:	2300      	movs	r3, #0
 8000e68:	813b      	strh	r3, [r7, #8]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000e6e:	230c      	movs	r3, #12
 8000e70:	817b      	strh	r3, [r7, #10]
	USART_Init(USART2, &USART_InitStructure);
 8000e72:	463b      	mov	r3, r7
 8000e74:	4619      	mov	r1, r3
 8000e76:	4806      	ldr	r0, [pc, #24]	; (8000e90 <usart_init+0x84>)
 8000e78:	f7ff fec6 	bl	8000c08 <USART_Init>
	USART_Cmd(USART2, ENABLE);
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	4804      	ldr	r0, [pc, #16]	; (8000e90 <usart_init+0x84>)
 8000e80:	f7ff ff76 	bl	8000d70 <USART_Cmd>
}
 8000e84:	bf00      	nop
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40020000 	.word	0x40020000
 8000e90:	40004400 	.word	0x40004400

08000e94 <USART_send_function_number>:
	USART_SendData(USART2,'\r');
	while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);

}

void USART_send_function_number(float number){
 8000e94:	b590      	push	{r4, r7, lr}
 8000e96:	b089      	sub	sp, #36	; 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]

	uint16_t i = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	83fb      	strh	r3, [r7, #30]
	char text[20];
	uint16_t num1 = (uint16_t)number;
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff fbc9 	bl	8000638 <__aeabi_f2uiz>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	83bb      	strh	r3, [r7, #28]
	sprintf(text,"%d.%d", num1, (uint16_t)((number-num1)*1000));
 8000eaa:	8bbc      	ldrh	r4, [r7, #28]
 8000eac:	8bbb      	ldrh	r3, [r7, #28]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fa1e 	bl	80002f0 <__aeabi_i2f>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff f963 	bl	8000184 <__aeabi_fsub>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	491f      	ldr	r1, [pc, #124]	; (8000f40 <USART_send_function_number+0xac>)
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fa68 	bl	8000398 <__aeabi_fmul>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fbb4 	bl	8000638 <__aeabi_f2uiz>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	f107 0008 	add.w	r0, r7, #8
 8000ed8:	4622      	mov	r2, r4
 8000eda:	491a      	ldr	r1, [pc, #104]	; (8000f44 <USART_send_function_number+0xb0>)
 8000edc:	f000 fb00 	bl	80014e0 <siprintf>
	while(text[i] != '\0'){
 8000ee0:	e015      	b.n	8000f0e <USART_send_function_number+0x7a>
		USART_SendData(USART2, text[i]);
 8000ee2:	8bfb      	ldrh	r3, [r7, #30]
 8000ee4:	f107 0220 	add.w	r2, r7, #32
 8000ee8:	4413      	add	r3, r2
 8000eea:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4815      	ldr	r0, [pc, #84]	; (8000f48 <USART_send_function_number+0xb4>)
 8000ef4:	f7ff ff5c 	bl	8000db0 <USART_SendData>
		while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);
 8000ef8:	bf00      	nop
 8000efa:	2140      	movs	r1, #64	; 0x40
 8000efc:	4812      	ldr	r0, [pc, #72]	; (8000f48 <USART_send_function_number+0xb4>)
 8000efe:	f7ff ff69 	bl	8000dd4 <USART_GetFlagStatus>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d0f8      	beq.n	8000efa <USART_send_function_number+0x66>
		i++;
 8000f08:	8bfb      	ldrh	r3, [r7, #30]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	83fb      	strh	r3, [r7, #30]

	uint16_t i = 0;
	char text[20];
	uint16_t num1 = (uint16_t)number;
	sprintf(text,"%d.%d", num1, (uint16_t)((number-num1)*1000));
	while(text[i] != '\0'){
 8000f0e:	8bfb      	ldrh	r3, [r7, #30]
 8000f10:	f107 0220 	add.w	r2, r7, #32
 8000f14:	4413      	add	r3, r2
 8000f16:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d1e1      	bne.n	8000ee2 <USART_send_function_number+0x4e>
		USART_SendData(USART2, text[i]);
		while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);
		i++;
	}
	USART_SendData(USART2,'\r');
 8000f1e:	210d      	movs	r1, #13
 8000f20:	4809      	ldr	r0, [pc, #36]	; (8000f48 <USART_send_function_number+0xb4>)
 8000f22:	f7ff ff45 	bl	8000db0 <USART_SendData>
	while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);
 8000f26:	bf00      	nop
 8000f28:	2140      	movs	r1, #64	; 0x40
 8000f2a:	4807      	ldr	r0, [pc, #28]	; (8000f48 <USART_send_function_number+0xb4>)
 8000f2c:	f7ff ff52 	bl	8000dd4 <USART_GetFlagStatus>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0f8      	beq.n	8000f28 <USART_send_function_number+0x94>

}
 8000f36:	bf00      	nop
 8000f38:	3724      	adds	r7, #36	; 0x24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd90      	pop	{r4, r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	447a0000 	.word	0x447a0000
 8000f44:	08001570 	.word	0x08001570
 8000f48:	40004400 	.word	0x40004400

08000f4c <init_SPI1>:

void init_SPI1(void){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct;
	SPI_InitTypeDef SPI_InitStruct;

	// enable clock for used IO pins
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000f52:	2101      	movs	r1, #1
 8000f54:	2001      	movs	r0, #1
 8000f56:	f7ff fd63 	bl	8000a20 <RCC_AHBPeriphClockCmd>

	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_6 | GPIO_Pin_5;
 8000f5a:	23e0      	movs	r3, #224	; 0xe0
 8000f5c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	773b      	strb	r3, [r7, #28]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000f62:	2300      	movs	r3, #0
 8000f64:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_40MHz;
 8000f66:	2303      	movs	r3, #3
 8000f68:	777b      	strb	r3, [r7, #29]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	f107 0318 	add.w	r3, r7, #24
 8000f72:	4619      	mov	r1, r3
 8000f74:	4823      	ldr	r0, [pc, #140]	; (8001004 <init_SPI1+0xb8>)
 8000f76:	f7ff fb7f 	bl	8000678 <GPIO_Init>

	// connect SPI1 pins to SPI alternate function
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource5, GPIO_AF_SPI1);
 8000f7a:	2205      	movs	r2, #5
 8000f7c:	2105      	movs	r1, #5
 8000f7e:	4821      	ldr	r0, [pc, #132]	; (8001004 <init_SPI1+0xb8>)
 8000f80:	f7ff fc2c 	bl	80007dc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_SPI1);
 8000f84:	2205      	movs	r2, #5
 8000f86:	2106      	movs	r1, #6
 8000f88:	481e      	ldr	r0, [pc, #120]	; (8001004 <init_SPI1+0xb8>)
 8000f8a:	f7ff fc27 	bl	80007dc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_SPI1);
 8000f8e:	2205      	movs	r2, #5
 8000f90:	2107      	movs	r1, #7
 8000f92:	481c      	ldr	r0, [pc, #112]	; (8001004 <init_SPI1+0xb8>)
 8000f94:	f7ff fc22 	bl	80007dc <GPIO_PinAFConfig>

	/* Configure the chip select pin
	   in this case we will use PA8 */
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_8;
 8000f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f9c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	773b      	strb	r3, [r7, #28]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_40MHz;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	777b      	strb	r3, [r7, #29]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 0318 	add.w	r3, r7, #24
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4813      	ldr	r0, [pc, #76]	; (8001004 <init_SPI1+0xb8>)
 8000fb6:	f7ff fb5f 	bl	8000678 <GPIO_Init>
	// enable peripheral clock
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8000fba:	2101      	movs	r1, #1
 8000fbc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000fc0:	f7ff fd4c 	bl	8000a5c <RCC_APB2PeriphClockCmd>
	/* configure SPI1 in Mode 0
	 * CPOL = 0 --> clock is low when idle
	 * CPHA = 0 --> data is sampled at the first edge
	 */
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex; // set to full duplex mode, seperate MOSI and MISO lines
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	80bb      	strh	r3, [r7, #4]
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;     // transmit in master mode, NSS pin has to be always high
 8000fc8:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000fcc:	80fb      	strh	r3, [r7, #6]
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b; // one packet of data is 8 bits wide
 8000fce:	2300      	movs	r3, #0
 8000fd0:	813b      	strh	r3, [r7, #8]
	//SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;        // clock is high when idle
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	817b      	strh	r3, [r7, #10]
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;      // data sampled at first edge
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	81bb      	strh	r3, [r7, #12]
	//SPI_InitStruct.SPI_NSS = SPI_NSS_Soft | SPI_NSSInternalSoft_Set; // set the NSS management to internal and pull internal NSS high
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8000fda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fde:	81fb      	strh	r3, [r7, #14]
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_32; // SPI frequency is APB2 frequency / 32 changed by Miroslav Kohut
 8000fe0:	2320      	movs	r3, #32
 8000fe2:	823b      	strh	r3, [r7, #16]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;// data is transmitted MSB first
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	827b      	strh	r3, [r7, #18]
	SPI_Init(SPI1, &SPI_InitStruct);
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	4619      	mov	r1, r3
 8000fec:	4806      	ldr	r0, [pc, #24]	; (8001008 <init_SPI1+0xbc>)
 8000fee:	f7ff fd71 	bl	8000ad4 <SPI_Init>

	SPI_Cmd(SPI1, ENABLE); // enable SPI1
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <init_SPI1+0xbc>)
 8000ff6:	f7ff fdb1 	bl	8000b5c <SPI_Cmd>
}
 8000ffa:	bf00      	nop
 8000ffc:	3720      	adds	r7, #32
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40020000 	.word	0x40020000
 8001008:	40013000 	.word	0x40013000

0800100c <read_reg>:
	SPI_I2S_ReceiveData(SPI1);
	chip_deselect();
}

uint16_t read_reg( uint8_t WriteAddr)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
	chip_select();
 8001016:	f000 f83d 	bl	8001094 <chip_select>

	WriteAddr = 0x80 | WriteAddr;
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001020:	71fb      	strb	r3, [r7, #7]
	while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE));
 8001022:	bf00      	nop
 8001024:	2102      	movs	r1, #2
 8001026:	481a      	ldr	r0, [pc, #104]	; (8001090 <read_reg+0x84>)
 8001028:	f7ff fdd2 	bl	8000bd0 <SPI_I2S_GetFlagStatus>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0f8      	beq.n	8001024 <read_reg+0x18>
	SPI_I2S_SendData(SPI1, WriteAddr);
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	b29b      	uxth	r3, r3
 8001036:	4619      	mov	r1, r3
 8001038:	4815      	ldr	r0, [pc, #84]	; (8001090 <read_reg+0x84>)
 800103a:	f7ff fdbb 	bl	8000bb4 <SPI_I2S_SendData>
	while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE));
 800103e:	bf00      	nop
 8001040:	2101      	movs	r1, #1
 8001042:	4813      	ldr	r0, [pc, #76]	; (8001090 <read_reg+0x84>)
 8001044:	f7ff fdc4 	bl	8000bd0 <SPI_I2S_GetFlagStatus>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d0f8      	beq.n	8001040 <read_reg+0x34>
	SPI_I2S_ReceiveData(SPI1); //Clear RXNE bit
 800104e:	4810      	ldr	r0, [pc, #64]	; (8001090 <read_reg+0x84>)
 8001050:	f7ff fda4 	bl	8000b9c <SPI_I2S_ReceiveData>

	while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE));
 8001054:	bf00      	nop
 8001056:	2102      	movs	r1, #2
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <read_reg+0x84>)
 800105a:	f7ff fdb9 	bl	8000bd0 <SPI_I2S_GetFlagStatus>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0f8      	beq.n	8001056 <read_reg+0x4a>
	SPI_I2S_SendData(SPI1, 0x00); //Dummy byte to generate clock
 8001064:	2100      	movs	r1, #0
 8001066:	480a      	ldr	r0, [pc, #40]	; (8001090 <read_reg+0x84>)
 8001068:	f7ff fda4 	bl	8000bb4 <SPI_I2S_SendData>
	while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE));
 800106c:	bf00      	nop
 800106e:	2101      	movs	r1, #1
 8001070:	4807      	ldr	r0, [pc, #28]	; (8001090 <read_reg+0x84>)
 8001072:	f7ff fdad 	bl	8000bd0 <SPI_I2S_GetFlagStatus>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d0f8      	beq.n	800106e <read_reg+0x62>
	chip_deselect();
 800107c:	f000 f816 	bl	80010ac <chip_deselect>
	return  SPI_I2S_ReceiveData(SPI1);
 8001080:	4803      	ldr	r0, [pc, #12]	; (8001090 <read_reg+0x84>)
 8001082:	f7ff fd8b 	bl	8000b9c <SPI_I2S_ReceiveData>
 8001086:	4603      	mov	r3, r0
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40013000 	.word	0x40013000

08001094 <chip_select>:
void chip_select(void){
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	GPIO_ResetBits(GPIOA, GPIO_Pin_8);
 8001098:	f44f 7180 	mov.w	r1, #256	; 0x100
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <chip_select+0x14>)
 800109e:	f7ff fb8f 	bl	80007c0 <GPIO_ResetBits>
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40020000 	.word	0x40020000

080010ac <chip_deselect>:
void chip_deselect(void){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	GPIO_SetBits(GPIOA, GPIO_Pin_8);
 80010b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <chip_deselect+0x14>)
 80010b6:	f7ff fb75 	bl	80007a4 <GPIO_SetBits>
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40020000 	.word	0x40020000

080010c4 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	/*initializations*/

	init_SPI1();
 80010c8:	f7ff ff40 	bl	8000f4c <init_SPI1>
	usart_init();
 80010cc:	f7ff fe9e 	bl	8000e0c <usart_init>

	/* Infinite loop */
	while (1)
	{
		//USART_send_function("Test_USART");
		USART_send_function_number(read_reg(MPUREG_WHOAMI));
 80010d0:	2075      	movs	r0, #117	; 0x75
 80010d2:	f7ff ff9b 	bl	800100c <read_reg>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff f905 	bl	80002e8 <__aeabi_ui2f>
 80010de:	4603      	mov	r3, r0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fed7 	bl	8000e94 <USART_send_function_number>
		//sleep(SLEEP_50_us);
		//for(c = 0; c < 1000;c++);
	}
 80010e6:	e7f3      	b.n	80010d0 <main+0xc>

080010e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001120 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80010ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80010ee:	e003      	b.n	80010f8 <LoopCopyDataInit>

080010f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 80010f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80010f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80010f6:	3104      	adds	r1, #4

080010f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80010f8:	480b      	ldr	r0, [pc, #44]	; (8001128 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 80010fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80010fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001100:	d3f6      	bcc.n	80010f0 <CopyDataInit>
  ldr r2, =_sbss
 8001102:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8001104:	e002      	b.n	800110c <LoopFillZerobss>

08001106 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001108:	f842 3b04 	str.w	r3, [r2], #4

0800110c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <LoopFillZerobss+0x28>)
  cmp r2, r3
 800110e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001110:	d3f9      	bcc.n	8001106 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001112:	f000 f841 	bl	8001198 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001116:	f000 f9f9 	bl	800150c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800111a:	f7ff ffd3 	bl	80010c4 <main>
  bx lr
 800111e:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001120:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8001124:	08001580 	.word	0x08001580
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8001128:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800112c:	2000001c 	.word	0x2000001c
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8001130:	2000001c 	.word	0x2000001c
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8001134:	20000038 	.word	0x20000038

08001138 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001138:	e7fe      	b.n	8001138 <ADC1_IRQHandler>
	...

0800113c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 800114c:	e7fe      	b.n	800114c <HardFault_Handler+0x4>
 800114e:	bf00      	nop

08001150 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8001154:	e7fe      	b.n	8001154 <MemManage_Handler+0x4>
 8001156:	bf00      	nop

08001158 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 800115c:	e7fe      	b.n	800115c <BusFault_Handler+0x4>
 800115e:	bf00      	nop

08001160 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001164:	e7fe      	b.n	8001164 <UsageFault_Handler+0x4>
 8001166:	bf00      	nop

08001168 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr

08001180 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 800119c:	4a15      	ldr	r2, [pc, #84]	; (80011f4 <SystemInit+0x5c>)
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <SystemInit+0x5c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a6:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80011a8:	4912      	ldr	r1, [pc, #72]	; (80011f4 <SystemInit+0x5c>)
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <SystemInit+0x5c>)
 80011ac:	689a      	ldr	r2, [r3, #8]
 80011ae:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <SystemInit+0x60>)
 80011b0:	4013      	ands	r3, r2
 80011b2:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80011b4:	4a0f      	ldr	r2, [pc, #60]	; (80011f4 <SystemInit+0x5c>)
 80011b6:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <SystemInit+0x5c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80011be:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80011c2:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80011c4:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <SystemInit+0x5c>)
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <SystemInit+0x5c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ce:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80011d0:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <SystemInit+0x5c>)
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <SystemInit+0x5c>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80011da:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <SystemInit+0x5c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 80011e2:	f000 f80d 	bl	8001200 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80011e6:	4b05      	ldr	r3, [pc, #20]	; (80011fc <SystemInit+0x64>)
 80011e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011ec:	609a      	str	r2, [r3, #8]
#endif
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800
 80011f8:	88ffc00c 	.word	0x88ffc00c
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	2300      	movs	r3, #0
 800120c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800120e:	4a41      	ldr	r2, [pc, #260]	; (8001314 <SetSysClock+0x114>)
 8001210:	4b40      	ldr	r3, [pc, #256]	; (8001314 <SetSysClock+0x114>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001218:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800121a:	4b3e      	ldr	r3, [pc, #248]	; (8001314 <SetSysClock+0x114>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001222:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3301      	adds	r3, #1
 8001228:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d103      	bne.n	8001238 <SetSysClock+0x38>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001236:	d1f0      	bne.n	800121a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001238:	4b36      	ldr	r3, [pc, #216]	; (8001314 <SetSysClock+0x114>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d002      	beq.n	800124a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001244:	2301      	movs	r3, #1
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	e001      	b.n	800124e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800124a:	2300      	movs	r3, #0
 800124c:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d15a      	bne.n	800130a <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8001254:	4a30      	ldr	r2, [pc, #192]	; (8001318 <SetSysClock+0x118>)
 8001256:	4b30      	ldr	r3, [pc, #192]	; (8001318 <SetSysClock+0x118>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f043 0304 	orr.w	r3, r3, #4
 800125e:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8001260:	4a2d      	ldr	r2, [pc, #180]	; (8001318 <SetSysClock+0x118>)
 8001262:	4b2d      	ldr	r3, [pc, #180]	; (8001318 <SetSysClock+0x118>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f043 0302 	orr.w	r3, r3, #2
 800126a:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 800126c:	4a2a      	ldr	r2, [pc, #168]	; (8001318 <SetSysClock+0x118>)
 800126e:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <SetSysClock+0x118>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001278:	4a26      	ldr	r2, [pc, #152]	; (8001314 <SetSysClock+0x114>)
 800127a:	4b26      	ldr	r3, [pc, #152]	; (8001314 <SetSysClock+0x114>)
 800127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001282:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8001284:	4b25      	ldr	r3, [pc, #148]	; (800131c <SetSysClock+0x11c>)
 8001286:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800128a:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 800128c:	bf00      	nop
 800128e:	4b23      	ldr	r3, [pc, #140]	; (800131c <SetSysClock+0x11c>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 0310 	and.w	r3, r3, #16
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f9      	bne.n	800128e <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800129a:	4a1e      	ldr	r2, [pc, #120]	; (8001314 <SetSysClock+0x114>)
 800129c:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <SetSysClock+0x114>)
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80012a2:	4a1c      	ldr	r2, [pc, #112]	; (8001314 <SetSysClock+0x114>)
 80012a4:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <SetSysClock+0x114>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 80012aa:	4a1a      	ldr	r2, [pc, #104]	; (8001314 <SetSysClock+0x114>)
 80012ac:	4b19      	ldr	r3, [pc, #100]	; (8001314 <SetSysClock+0x114>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 80012b2:	4a18      	ldr	r2, [pc, #96]	; (8001314 <SetSysClock+0x114>)
 80012b4:	4b17      	ldr	r3, [pc, #92]	; (8001314 <SetSysClock+0x114>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80012bc:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 80012be:	4a15      	ldr	r2, [pc, #84]	; (8001314 <SetSysClock+0x114>)
 80012c0:	4b14      	ldr	r3, [pc, #80]	; (8001314 <SetSysClock+0x114>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 80012c8:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80012ca:	4a12      	ldr	r2, [pc, #72]	; (8001314 <SetSysClock+0x114>)
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <SetSysClock+0x114>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012d4:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80012d6:	bf00      	nop
 80012d8:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <SetSysClock+0x114>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0f9      	beq.n	80012d8 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80012e4:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <SetSysClock+0x114>)
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <SetSysClock+0x114>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f023 0303 	bic.w	r3, r3, #3
 80012ee:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80012f0:	4a08      	ldr	r2, [pc, #32]	; (8001314 <SetSysClock+0x114>)
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <SetSysClock+0x114>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f043 0303 	orr.w	r3, r3, #3
 80012fa:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80012fc:	bf00      	nop
 80012fe:	4b05      	ldr	r3, [pc, #20]	; (8001314 <SetSysClock+0x114>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 030c 	and.w	r3, r3, #12
 8001306:	2b0c      	cmp	r3, #12
 8001308:	d1f9      	bne.n	80012fe <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	40023800 	.word	0x40023800
 8001318:	40023c00 	.word	0x40023c00
 800131c:	40007000 	.word	0x40007000

08001320 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8001320:	b480      	push	{r7}
 8001322:	b087      	sub	sp, #28
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
	int div = 1;
 800132c:	2301      	movs	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8001330:	e004      	b.n	800133c <ts_itoa+0x1c>
		div *= base;
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	fb02 f303 	mul.w	r3, r2, r3
 800133a:	617b      	str	r3, [r7, #20]
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
	int div = 1;
	while (d/div >= base)
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	fbb2 f2f3 	udiv	r2, r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	429a      	cmp	r2, r3
 8001348:	d2f3      	bcs.n	8001332 <ts_itoa+0x12>
		div *= base;

	while (div != 0)
 800134a:	e029      	b.n	80013a0 <ts_itoa+0x80>
	{
		int num = d/div;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	fbb2 f3f3 	udiv	r3, r2, r3
 8001354:	613b      	str	r3, [r7, #16]
		d = d%div;
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	fbb3 f1f2 	udiv	r1, r3, r2
 800135e:	fb02 f201 	mul.w	r2, r2, r1
 8001362:	1a9b      	subs	r3, r3, r2
 8001364:	60bb      	str	r3, [r7, #8]
		div /= base;
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	fb92 f3f3 	sdiv	r3, r2, r3
 800136e:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	2b09      	cmp	r3, #9
 8001374:	dd0a      	ble.n	800138c <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	1c59      	adds	r1, r3, #1
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	6011      	str	r1, [r2, #0]
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	3237      	adds	r2, #55	; 0x37
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	701a      	strb	r2, [r3, #0]
 800138a:	e009      	b.n	80013a0 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	1c59      	adds	r1, r3, #1
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	6011      	str	r1, [r2, #0]
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	3230      	adds	r2, #48	; 0x30
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	701a      	strb	r2, [r3, #0]
{
	int div = 1;
	while (d/div >= base)
		div *= base;

	while (div != 0)
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1d2      	bne.n	800134c <ts_itoa+0x2c>
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
	}
}
 80013a6:	bf00      	nop
 80013a8:	371c      	adds	r7, #28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr

080013b0 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	617b      	str	r3, [r7, #20]
	while(*fmt)
 80013c0:	e07d      	b.n	80014be <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b25      	cmp	r3, #37	; 0x25
 80013c8:	d171      	bne.n	80014ae <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	3301      	adds	r3, #1
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b64      	cmp	r3, #100	; 0x64
 80013d6:	d01e      	beq.n	8001416 <ts_formatstring+0x66>
 80013d8:	2b64      	cmp	r3, #100	; 0x64
 80013da:	dc06      	bgt.n	80013ea <ts_formatstring+0x3a>
 80013dc:	2b58      	cmp	r3, #88	; 0x58
 80013de:	d050      	beq.n	8001482 <ts_formatstring+0xd2>
 80013e0:	2b63      	cmp	r3, #99	; 0x63
 80013e2:	d00e      	beq.n	8001402 <ts_formatstring+0x52>
 80013e4:	2b25      	cmp	r3, #37	; 0x25
 80013e6:	d058      	beq.n	800149a <ts_formatstring+0xea>
 80013e8:	e05d      	b.n	80014a6 <ts_formatstring+0xf6>
 80013ea:	2b73      	cmp	r3, #115	; 0x73
 80013ec:	d02b      	beq.n	8001446 <ts_formatstring+0x96>
 80013ee:	2b73      	cmp	r3, #115	; 0x73
 80013f0:	dc02      	bgt.n	80013f8 <ts_formatstring+0x48>
 80013f2:	2b69      	cmp	r3, #105	; 0x69
 80013f4:	d00f      	beq.n	8001416 <ts_formatstring+0x66>
 80013f6:	e056      	b.n	80014a6 <ts_formatstring+0xf6>
 80013f8:	2b75      	cmp	r3, #117	; 0x75
 80013fa:	d037      	beq.n	800146c <ts_formatstring+0xbc>
 80013fc:	2b78      	cmp	r3, #120	; 0x78
 80013fe:	d040      	beq.n	8001482 <ts_formatstring+0xd2>
 8001400:	e051      	b.n	80014a6 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	1c5a      	adds	r2, r3, #1
 8001406:	60fa      	str	r2, [r7, #12]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	1d11      	adds	r1, r2, #4
 800140c:	6079      	str	r1, [r7, #4]
 800140e:	6812      	ldr	r2, [r2, #0]
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	701a      	strb	r2, [r3, #0]
				break;
 8001414:	e047      	b.n	80014a6 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	1d1a      	adds	r2, r3, #4
 800141a:	607a      	str	r2, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	2b00      	cmp	r3, #0
 8001424:	da07      	bge.n	8001436 <ts_formatstring+0x86>
					{
						val *= -1;
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	425b      	negs	r3, r3
 800142a:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	1c5a      	adds	r2, r3, #1
 8001430:	60fa      	str	r2, [r7, #12]
 8001432:	222d      	movs	r2, #45	; 0x2d
 8001434:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8001436:	69f9      	ldr	r1, [r7, #28]
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	220a      	movs	r2, #10
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ff6e 	bl	8001320 <ts_itoa>
				}
				break;
 8001444:	e02f      	b.n	80014a6 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	1d1a      	adds	r2, r3, #4
 800144a:	607a      	str	r2, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8001450:	e007      	b.n	8001462 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	1c5a      	adds	r2, r3, #1
 8001456:	60fa      	str	r2, [r7, #12]
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	1c51      	adds	r1, r2, #1
 800145c:	61b9      	str	r1, [r7, #24]
 800145e:	7812      	ldrb	r2, [r2, #0]
 8001460:	701a      	strb	r2, [r3, #0]
				}
				break;
			  case 's':
				{
					char * arg = va_arg(va, char *);
					while (*arg)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f3      	bne.n	8001452 <ts_formatstring+0xa2>
					{
						*buf++ = *arg++;
					}
				}
				break;
 800146a:	e01c      	b.n	80014a6 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	1d1a      	adds	r2, r3, #4
 8001470:	607a      	str	r2, [r7, #4]
 8001472:	6819      	ldr	r1, [r3, #0]
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	220a      	movs	r2, #10
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff ff50 	bl	8001320 <ts_itoa>
				break;
 8001480:	e011      	b.n	80014a6 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	1d1a      	adds	r2, r3, #4
 8001486:	607a      	str	r2, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4619      	mov	r1, r3
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	2210      	movs	r2, #16
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ff44 	bl	8001320 <ts_itoa>
				break;
 8001498:	e005      	b.n	80014a6 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	1c5a      	adds	r2, r3, #1
 800149e:	60fa      	str	r2, [r7, #12]
 80014a0:	2225      	movs	r2, #37	; 0x25
 80014a2:	701a      	strb	r2, [r3, #0]
				  break;
 80014a4:	bf00      	nop
			}
			fmt++;
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	3301      	adds	r3, #1
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	e007      	b.n	80014be <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	1c5a      	adds	r2, r3, #1
 80014b2:	60fa      	str	r2, [r7, #12]
 80014b4:	68ba      	ldr	r2, [r7, #8]
 80014b6:	1c51      	adds	r1, r2, #1
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	7812      	ldrb	r2, [r2, #0]
 80014bc:	701a      	strb	r2, [r3, #0]
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
	char *start_buf = buf;
	while(*fmt)
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f47f af7d 	bne.w	80013c2 <ts_formatstring+0x12>
		else
		{
			*buf++ = *fmt++;
		}
	}
	*buf = 0;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	461a      	mov	r2, r3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	1ad3      	subs	r3, r2, r3
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3720      	adds	r7, #32
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop

080014e0 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 80014e0:	b40e      	push	{r1, r2, r3}
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b085      	sub	sp, #20
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 80014ea:	f107 0320 	add.w	r3, r7, #32
 80014ee:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	69f9      	ldr	r1, [r7, #28]
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ff5b 	bl	80013b0 <ts_formatstring>
 80014fa:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 80014fc:	68fb      	ldr	r3, [r7, #12]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001508:	b003      	add	sp, #12
 800150a:	4770      	bx	lr

0800150c <__libc_init_array>:
 800150c:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <__libc_init_array+0x3c>)
 800150e:	b570      	push	{r4, r5, r6, lr}
 8001510:	461e      	mov	r6, r3
 8001512:	4c0e      	ldr	r4, [pc, #56]	; (800154c <__libc_init_array+0x40>)
 8001514:	2500      	movs	r5, #0
 8001516:	1ae4      	subs	r4, r4, r3
 8001518:	10a4      	asrs	r4, r4, #2
 800151a:	42a5      	cmp	r5, r4
 800151c:	d004      	beq.n	8001528 <__libc_init_array+0x1c>
 800151e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001522:	4798      	blx	r3
 8001524:	3501      	adds	r5, #1
 8001526:	e7f8      	b.n	800151a <__libc_init_array+0xe>
 8001528:	f000 f816 	bl	8001558 <_init>
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <__libc_init_array+0x44>)
 800152e:	4c09      	ldr	r4, [pc, #36]	; (8001554 <__libc_init_array+0x48>)
 8001530:	461e      	mov	r6, r3
 8001532:	1ae4      	subs	r4, r4, r3
 8001534:	10a4      	asrs	r4, r4, #2
 8001536:	2500      	movs	r5, #0
 8001538:	42a5      	cmp	r5, r4
 800153a:	d004      	beq.n	8001546 <__libc_init_array+0x3a>
 800153c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001540:	4798      	blx	r3
 8001542:	3501      	adds	r5, #1
 8001544:	e7f8      	b.n	8001538 <__libc_init_array+0x2c>
 8001546:	bd70      	pop	{r4, r5, r6, pc}
 8001548:	08001578 	.word	0x08001578
 800154c:	08001578 	.word	0x08001578
 8001550:	08001578 	.word	0x08001578
 8001554:	0800157c 	.word	0x0800157c

08001558 <_init>:
 8001558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800155a:	bf00      	nop
 800155c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800155e:	bc08      	pop	{r3}
 8001560:	469e      	mov	lr, r3
 8001562:	4770      	bx	lr

08001564 <_fini>:
 8001564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001566:	bf00      	nop
 8001568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800156a:	bc08      	pop	{r3}
 800156c:	469e      	mov	lr, r3
 800156e:	4770      	bx	lr
